{"config":{"indexing":"full","lang":["fr"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cours de bases de donn\u00e9es Auteur : Denis Rinfret Ressources Logiciels PostgreSQL T\u00e9l\u00e9chargement Documentation Jetbrains DataGrip IntelliJ PlantUML Diagramme de classes Online Server Bases de donn\u00e9es relationnelles Pour bien comprendre les principes de base des bases de donn\u00e9es relationnelles et de SQL, voici quelques ressources en anglais et en fran\u00e7ais qui vous seront tr\u00e8s utiles : Wikip\u00e9dia : L'article sur les bases de donn\u00e9es relationnelles offre une vue d'ensemble compl\u00e8te, couvrant l'histoire, les concepts cl\u00e9s comme les tables, les tuples (lignes), les attributs (colonnes), et les syst\u00e8mes de gestion de bases de donn\u00e9es relationnelles (SGBDR). IBM : Cet article explique les concepts fondamentaux des bases de donn\u00e9es relationnelles, y compris les tables, les cl\u00e9s primaires et \u00e9trang\u00e8res, et les avantages des bases de donn\u00e9es relationnelles par rapport aux autres types de bases de donn\u00e9es. Oracle : Ce guide fournit une explication d\u00e9taill\u00e9e sur le mod\u00e8le relationnel, les op\u00e9rations logiques et physiques, ainsi que les r\u00e8gles d'int\u00e9grit\u00e9 pour garantir la pr\u00e9cision et l'accessibilit\u00e9 des donn\u00e9es. University of Pennsylvania : Une le\u00e7on qui introduit les concepts de base des syst\u00e8mes de gestion de bases de donn\u00e9es relationnelles, comme les tables, les cl\u00e9s primaires, et les colonnes index\u00e9es. Lido App : Cet article explique les composants essentiels des bases de donn\u00e9es relationnelles, notamment les tables, les cl\u00e9s et les relations, avec des exemples concrets. SQL (Structured Query Language) Pour apprendre SQL et pratiquer avec des exercices interactifs, voici quelques excellentes ressources en ligne : LearnSQLOnline.org : Ce site propose des tutoriels interactifs gratuits sur SQL, couvrant des sujets de base comme la s\u00e9lection de donn\u00e9es, la cr\u00e9ation de tables, et des sujets avanc\u00e9s comme les fonctions de fen\u00eatre et les sous-requ\u00eates. Les exercices sont int\u00e9gr\u00e9s pour une pratique imm\u00e9diate. W3Schools SQL Exercises : W3Schools propose une s\u00e9rie d'exercices SQL avec des r\u00e9ponses pour chaque chapitre de leur tutoriel SQL. Vous pouvez tester vos comp\u00e9tences et voir les solutions si vous \u00eates bloqu\u00e9. SQL Exercises - w3resource : Ce site offre une vaste collection d'exercices SQL couvrant diff\u00e9rents niveaux de difficult\u00e9 et sujets, tels que les fonctions d'agr\u00e9gation, les jointures, et les sous-requ\u00eates. C'est id\u00e9al pour pratiquer et am\u00e9liorer vos comp\u00e9tences SQL. GeeksforGeeks SQL Practice : GeeksforGeeks propose des exercices SQL pour les d\u00e9butants, interm\u00e9diaires et avanc\u00e9s. Les exercices couvrent des sujets vari\u00e9s, des requ\u00eates de base aux fonctions de fen\u00eatre et aux proc\u00e9dures stock\u00e9es. Khan Academy - Intro to SQL : Khan Academy offre un cours interactif sur SQL avec des d\u00e9fis pratiques apr\u00e8s chaque le\u00e7on. Les sujets incluent la cr\u00e9ation de tables, les requ\u00eates, les jointures, et plus encore. SQLZoo : SQLZoo est un site populaire pour apprendre et pratiquer SQL. Il propose des tutoriels interactifs, des exercices et des quiz couvrant divers aspects de SQL, des bases aux concepts avanc\u00e9s. Mode Analytics SQL Tutorial : Mode Analytics propose un tutoriel SQL interactif qui vous permet de pratiquer avec des exercices int\u00e9gr\u00e9s. Le tutoriel couvre les concepts de base et avanc\u00e9s de SQL. Codecademy : Codecademy propose un cours interactif sur SQL o\u00f9 vous pouvez apprendre et pratiquer en m\u00eame temps. Bien que certaines fonctionnalit\u00e9s avanc\u00e9es n\u00e9cessitent un abonnement, les bases sont disponibles gratuitement. DataCamp : DataCamp propose un cours d'introduction \u00e0 SQL pour la science des donn\u00e9es. Bien que DataCamp soit un service payant, il offre des sections gratuites pour commencer. Livres sur O'Reilly/BANQ Learning SQL Practical SQL SQL Pocket Guide Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Cours de bases de donn\u00e9es"},{"location":"#cours-de-bases-de-donnees","text":"Auteur : Denis Rinfret","title":"Cours de bases de donn\u00e9es"},{"location":"#ressources","text":"","title":"Ressources"},{"location":"#logiciels","text":"PostgreSQL T\u00e9l\u00e9chargement Documentation Jetbrains DataGrip IntelliJ PlantUML Diagramme de classes Online Server","title":"Logiciels"},{"location":"#bases-de-donnees-relationnelles","text":"Pour bien comprendre les principes de base des bases de donn\u00e9es relationnelles et de SQL, voici quelques ressources en anglais et en fran\u00e7ais qui vous seront tr\u00e8s utiles : Wikip\u00e9dia : L'article sur les bases de donn\u00e9es relationnelles offre une vue d'ensemble compl\u00e8te, couvrant l'histoire, les concepts cl\u00e9s comme les tables, les tuples (lignes), les attributs (colonnes), et les syst\u00e8mes de gestion de bases de donn\u00e9es relationnelles (SGBDR). IBM : Cet article explique les concepts fondamentaux des bases de donn\u00e9es relationnelles, y compris les tables, les cl\u00e9s primaires et \u00e9trang\u00e8res, et les avantages des bases de donn\u00e9es relationnelles par rapport aux autres types de bases de donn\u00e9es. Oracle : Ce guide fournit une explication d\u00e9taill\u00e9e sur le mod\u00e8le relationnel, les op\u00e9rations logiques et physiques, ainsi que les r\u00e8gles d'int\u00e9grit\u00e9 pour garantir la pr\u00e9cision et l'accessibilit\u00e9 des donn\u00e9es. University of Pennsylvania : Une le\u00e7on qui introduit les concepts de base des syst\u00e8mes de gestion de bases de donn\u00e9es relationnelles, comme les tables, les cl\u00e9s primaires, et les colonnes index\u00e9es. Lido App : Cet article explique les composants essentiels des bases de donn\u00e9es relationnelles, notamment les tables, les cl\u00e9s et les relations, avec des exemples concrets.","title":"Bases de donn\u00e9es relationnelles"},{"location":"#sql-structured-query-language","text":"Pour apprendre SQL et pratiquer avec des exercices interactifs, voici quelques excellentes ressources en ligne : LearnSQLOnline.org : Ce site propose des tutoriels interactifs gratuits sur SQL, couvrant des sujets de base comme la s\u00e9lection de donn\u00e9es, la cr\u00e9ation de tables, et des sujets avanc\u00e9s comme les fonctions de fen\u00eatre et les sous-requ\u00eates. Les exercices sont int\u00e9gr\u00e9s pour une pratique imm\u00e9diate. W3Schools SQL Exercises : W3Schools propose une s\u00e9rie d'exercices SQL avec des r\u00e9ponses pour chaque chapitre de leur tutoriel SQL. Vous pouvez tester vos comp\u00e9tences et voir les solutions si vous \u00eates bloqu\u00e9. SQL Exercises - w3resource : Ce site offre une vaste collection d'exercices SQL couvrant diff\u00e9rents niveaux de difficult\u00e9 et sujets, tels que les fonctions d'agr\u00e9gation, les jointures, et les sous-requ\u00eates. C'est id\u00e9al pour pratiquer et am\u00e9liorer vos comp\u00e9tences SQL. GeeksforGeeks SQL Practice : GeeksforGeeks propose des exercices SQL pour les d\u00e9butants, interm\u00e9diaires et avanc\u00e9s. Les exercices couvrent des sujets vari\u00e9s, des requ\u00eates de base aux fonctions de fen\u00eatre et aux proc\u00e9dures stock\u00e9es. Khan Academy - Intro to SQL : Khan Academy offre un cours interactif sur SQL avec des d\u00e9fis pratiques apr\u00e8s chaque le\u00e7on. Les sujets incluent la cr\u00e9ation de tables, les requ\u00eates, les jointures, et plus encore. SQLZoo : SQLZoo est un site populaire pour apprendre et pratiquer SQL. Il propose des tutoriels interactifs, des exercices et des quiz couvrant divers aspects de SQL, des bases aux concepts avanc\u00e9s. Mode Analytics SQL Tutorial : Mode Analytics propose un tutoriel SQL interactif qui vous permet de pratiquer avec des exercices int\u00e9gr\u00e9s. Le tutoriel couvre les concepts de base et avanc\u00e9s de SQL. Codecademy : Codecademy propose un cours interactif sur SQL o\u00f9 vous pouvez apprendre et pratiquer en m\u00eame temps. Bien que certaines fonctionnalit\u00e9s avanc\u00e9es n\u00e9cessitent un abonnement, les bases sont disponibles gratuitement. DataCamp : DataCamp propose un cours d'introduction \u00e0 SQL pour la science des donn\u00e9es. Bien que DataCamp soit un service payant, il offre des sections gratuites pour commencer.","title":"SQL (Structured Query Language)"},{"location":"#livres-sur-oreillybanq","text":"Learning SQL Practical SQL SQL Pocket Guide Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Livres sur O'Reilly/BANQ"},{"location":"1.%20Introduction/01-Introduction-aux-bd/","text":"Qu'est-ce qu'une base de donn\u00e9es ? Une base de donn\u00e9es est une collection organis\u00e9e de donn\u00e9es, g\u00e9n\u00e9ralement stock\u00e9e et accessible \u00e9lectroniquement \u00e0 partir d'un syst\u00e8me informatique. Les bases de donn\u00e9es permettent de stocker, g\u00e9rer et r\u00e9cup\u00e9rer efficacement des informations. Elles sont essentielles pour de nombreuses applications, allant des syst\u00e8mes de gestion d'entreprise aux applications web et mobiles. Composants principaux d'une base de donn\u00e9es Donn\u00e9es : Les informations stock\u00e9es dans la base de donn\u00e9es. Elles peuvent \u00eatre de diff\u00e9rents types (texte, nombres, dates, etc.) et sont organis\u00e9es de diff\u00e9rentes fa\u00e7ons selon le mod\u00e8le de donn\u00e9es utilis\u00e9. Syst\u00e8me de gestion de base de donn\u00e9es (SGBD) : Le logiciel qui permet de cr\u00e9er, g\u00e9rer et manipuler les bases de donn\u00e9es. PostgreSQL est un exemple de SGBD. Sch\u00e9ma : La structure qui d\u00e9finit l'organisation des donn\u00e9es dans la base de donn\u00e9es, incluant les tables, les colonnes, les types de donn\u00e9es, les contraintes, etc. Requ\u00eates : Les instructions utilis\u00e9es pour interagir avec la base de donn\u00e9es, le plus souvent \u00e9crites en SQL ( Structured Query Language ). Types de bases de donn\u00e9es Bases de donn\u00e9es relationnelles : Utilisent des tables pour organiser les donn\u00e9es. Les relations entre les tables sont d\u00e9finies par des cl\u00e9s primaires et \u00e9trang\u00e8res. Exemple : PostgreSQL, MySQL, Oracle, MS SQL Server. Bases de donn\u00e9es NoSQL : Con\u00e7ues pour des besoins sp\u00e9cifiques qui ne sont pas bien pris en charge par les bases de donn\u00e9es relationnelles. Elles incluent des bases de donn\u00e9es de documents, de colonnes, de graphes et de paires cl\u00e9-valeur. Exemple : MongoDB, Cassandra, Redis. Bases de donn\u00e9es en m\u00e9moire : Stockent les donn\u00e9es directement dans la m\u00e9moire vive pour des performances tr\u00e8s rapides. Exemple : Redis. Bases de donn\u00e9es orient\u00e9es objets : Int\u00e8grent les concepts de programmation orient\u00e9e objet pour stocker les donn\u00e9es sous forme d'objets. Exemple : db4o. Avantages des bases de donn\u00e9es Organisation : Les donn\u00e9es sont structur\u00e9es de mani\u00e8re logique et coh\u00e9rente. Acc\u00e8s rapide : Les SGBD permettent des recherches et des r\u00e9cup\u00e9rations de donn\u00e9es rapides et efficaces. S\u00e9curit\u00e9 : Les bases de donn\u00e9es offrent des m\u00e9canismes pour prot\u00e9ger les donn\u00e9es contre les acc\u00e8s non autoris\u00e9s. Int\u00e9grit\u00e9 des donn\u00e9es : Les contraintes et les r\u00e8gles d'int\u00e9grit\u00e9 garantissent que les donn\u00e9es restent pr\u00e9cises et coh\u00e9rentes. Scalabilit\u00e9 : Les bases de donn\u00e9es peuvent \u00eatre dimensionn\u00e9es pour g\u00e9rer des volumes de donn\u00e9es croissants. Conclusion Les bases de donn\u00e9es sont des outils puissants pour organiser, g\u00e9rer les donn\u00e9es et y acc\u00e9der. Comprendre les concepts de base des bases de donn\u00e9es et savoir utiliser un SGBD comme PostgreSQL est essentiel pour tout d\u00e9veloppeur ou professionnel de l'informatique. Dans les prochains cours, nous explorerons plus en d\u00e9tail les diff\u00e9rents aspects des bases de donn\u00e9es relationnelles et l'utilisation de SQL pour interagir avec elles. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Qu'est-ce qu'une base de donn\u00e9es ?"},{"location":"1.%20Introduction/01-Introduction-aux-bd/#quest-ce-quune-base-de-donnees","text":"Une base de donn\u00e9es est une collection organis\u00e9e de donn\u00e9es, g\u00e9n\u00e9ralement stock\u00e9e et accessible \u00e9lectroniquement \u00e0 partir d'un syst\u00e8me informatique. Les bases de donn\u00e9es permettent de stocker, g\u00e9rer et r\u00e9cup\u00e9rer efficacement des informations. Elles sont essentielles pour de nombreuses applications, allant des syst\u00e8mes de gestion d'entreprise aux applications web et mobiles.","title":"Qu'est-ce qu'une base de donn\u00e9es ?"},{"location":"1.%20Introduction/01-Introduction-aux-bd/#composants-principaux-dune-base-de-donnees","text":"Donn\u00e9es : Les informations stock\u00e9es dans la base de donn\u00e9es. Elles peuvent \u00eatre de diff\u00e9rents types (texte, nombres, dates, etc.) et sont organis\u00e9es de diff\u00e9rentes fa\u00e7ons selon le mod\u00e8le de donn\u00e9es utilis\u00e9. Syst\u00e8me de gestion de base de donn\u00e9es (SGBD) : Le logiciel qui permet de cr\u00e9er, g\u00e9rer et manipuler les bases de donn\u00e9es. PostgreSQL est un exemple de SGBD. Sch\u00e9ma : La structure qui d\u00e9finit l'organisation des donn\u00e9es dans la base de donn\u00e9es, incluant les tables, les colonnes, les types de donn\u00e9es, les contraintes, etc. Requ\u00eates : Les instructions utilis\u00e9es pour interagir avec la base de donn\u00e9es, le plus souvent \u00e9crites en SQL ( Structured Query Language ).","title":"Composants principaux d'une base de donn\u00e9es"},{"location":"1.%20Introduction/01-Introduction-aux-bd/#types-de-bases-de-donnees","text":"Bases de donn\u00e9es relationnelles : Utilisent des tables pour organiser les donn\u00e9es. Les relations entre les tables sont d\u00e9finies par des cl\u00e9s primaires et \u00e9trang\u00e8res. Exemple : PostgreSQL, MySQL, Oracle, MS SQL Server. Bases de donn\u00e9es NoSQL : Con\u00e7ues pour des besoins sp\u00e9cifiques qui ne sont pas bien pris en charge par les bases de donn\u00e9es relationnelles. Elles incluent des bases de donn\u00e9es de documents, de colonnes, de graphes et de paires cl\u00e9-valeur. Exemple : MongoDB, Cassandra, Redis. Bases de donn\u00e9es en m\u00e9moire : Stockent les donn\u00e9es directement dans la m\u00e9moire vive pour des performances tr\u00e8s rapides. Exemple : Redis. Bases de donn\u00e9es orient\u00e9es objets : Int\u00e8grent les concepts de programmation orient\u00e9e objet pour stocker les donn\u00e9es sous forme d'objets. Exemple : db4o.","title":"Types de bases de donn\u00e9es"},{"location":"1.%20Introduction/01-Introduction-aux-bd/#avantages-des-bases-de-donnees","text":"Organisation : Les donn\u00e9es sont structur\u00e9es de mani\u00e8re logique et coh\u00e9rente. Acc\u00e8s rapide : Les SGBD permettent des recherches et des r\u00e9cup\u00e9rations de donn\u00e9es rapides et efficaces. S\u00e9curit\u00e9 : Les bases de donn\u00e9es offrent des m\u00e9canismes pour prot\u00e9ger les donn\u00e9es contre les acc\u00e8s non autoris\u00e9s. Int\u00e9grit\u00e9 des donn\u00e9es : Les contraintes et les r\u00e8gles d'int\u00e9grit\u00e9 garantissent que les donn\u00e9es restent pr\u00e9cises et coh\u00e9rentes. Scalabilit\u00e9 : Les bases de donn\u00e9es peuvent \u00eatre dimensionn\u00e9es pour g\u00e9rer des volumes de donn\u00e9es croissants.","title":"Avantages des bases de donn\u00e9es"},{"location":"1.%20Introduction/01-Introduction-aux-bd/#conclusion","text":"Les bases de donn\u00e9es sont des outils puissants pour organiser, g\u00e9rer les donn\u00e9es et y acc\u00e9der. Comprendre les concepts de base des bases de donn\u00e9es et savoir utiliser un SGBD comme PostgreSQL est essentiel pour tout d\u00e9veloppeur ou professionnel de l'informatique. Dans les prochains cours, nous explorerons plus en d\u00e9tail les diff\u00e9rents aspects des bases de donn\u00e9es relationnelles et l'utilisation de SQL pour interagir avec elles. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Conclusion"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/","text":"Types de bases de donn\u00e9es Il existe plusieurs types de bases de donn\u00e9es, chacune \u00e9tant con\u00e7ue pour r\u00e9pondre \u00e0 des besoins sp\u00e9cifiques. Voici un aper\u00e7u des principaux types de bases de donn\u00e9es utilis\u00e9s de nos jours : 1. Bases de donn\u00e9es relationnelles Description Les bases de donn\u00e9es relationnelles organisent les donn\u00e9es en tables qui peuvent \u00eatre reli\u00e9es entre elles par des cl\u00e9s primaires et \u00e9trang\u00e8res. Elles utilisent le langage SQL ( Structured Query Language ) pour la gestion et la manipulation des donn\u00e9es. Exemples PostgreSQL : Un SGBD relationnel (et objet-relationnel) open-source puissant et extensible. MySQL : Un SGBD relationnel open-source populaire, souvent utilis\u00e9 pour les applications web. Oracle Database : Un SGBD relationnel (et objet-relationnel) commercial avec de nombreuses fonctionnalit\u00e9s avanc\u00e9es. Microsoft SQL Server : Un SGBD relationnel d\u00e9velopp\u00e9 par Microsoft, souvent utilis\u00e9 dans les environnements Windows. Avantages Structure claire : Les donn\u00e9es sont organis\u00e9es de mani\u00e8re logique et coh\u00e9rente. Int\u00e9grit\u00e9 des donn\u00e9es : Les contraintes et les r\u00e8gles d'int\u00e9grit\u00e9 garantissent la pr\u00e9cision et la coh\u00e9rence des donn\u00e9es. Requ\u00eates complexes : SQL permet de r\u00e9aliser des requ\u00eates complexes pour extraire des informations sp\u00e9cifiques. 2. Bases de donn\u00e9es objet-relationnelles Description Les bases de donn\u00e9es objet-relationnelles combinent les aspects des bases de donn\u00e9es relationnelles et des bases de donn\u00e9es orient\u00e9es objets. Elles permettent de stocker des donn\u00e9es sous forme de tables tout en supportant des concepts de programmation orient\u00e9e objet comme les types de donn\u00e9es personnalis\u00e9s, les h\u00e9ritages de tables et les m\u00e9thodes. Exemples PostgreSQL : Un SGBD objet-relationnel open-source qui supporte des fonctionnalit\u00e9s avanc\u00e9es comme les types de donn\u00e9es personnalis\u00e9s et les h\u00e9ritages de tables. Oracle Database : Offre des fonctionnalit\u00e9s objet-relationnelles en plus de ses fonctionnalit\u00e9s relationnelles. Avantages Flexibilit\u00e9 : Combine les avantages des bases de donn\u00e9es relationnelles et orient\u00e9es objets. Extensibilit\u00e9 : Permet de cr\u00e9er des types de donn\u00e9es et des m\u00e9thodes personnalis\u00e9s. Compatibilit\u00e9 : Maintient la compatibilit\u00e9 avec SQL tout en offrant des fonctionnalit\u00e9s avanc\u00e9es. 3. Bases de donn\u00e9es NoSQL Description Les bases de donn\u00e9es NoSQL sont con\u00e7ues pour des besoins sp\u00e9cifiques qui ne sont pas bien pris en charge par les bases de donn\u00e9es relationnelles. Elles sont souvent utilis\u00e9es pour des applications n\u00e9cessitant une grande scalabilit\u00e9 et des performances \u00e9lev\u00e9es. Types de bases de donn\u00e9es NoSQL Bases de donn\u00e9es de documents : Stockent les donn\u00e9es sous forme de documents JSON ou BSON. Exemple : MongoDB. Bases de donn\u00e9es de colonnes : Stockent les donn\u00e9es dans des colonnes plut\u00f4t que des lignes. Exemple : Apache Cassandra. Bases de donn\u00e9es de graphes : Utilisent des structures de graphes pour repr\u00e9senter et stocker les donn\u00e9es. Exemple : Neo4j. Bases de donn\u00e9es de paires cl\u00e9-valeur : Stockent les donn\u00e9es sous forme de paires cl\u00e9-valeur. Exemple : Redis. Avantages Scalabilit\u00e9 : Con\u00e7ues pour g\u00e9rer de grandes quantit\u00e9s de donn\u00e9es et des charges de travail \u00e9lev\u00e9es. Flexibilit\u00e9 : Permettent de stocker des donn\u00e9es non structur\u00e9es ou semi-structur\u00e9es. Performance : Optimis\u00e9es pour des op\u00e9rations de lecture et d'\u00e9criture rapides. 4. Bases de donn\u00e9es en m\u00e9moire Description Les bases de donn\u00e9es en m\u00e9moire stockent les donn\u00e9es directement dans la m\u00e9moire vive (RAM), ce qui permet des temps d'acc\u00e8s tr\u00e8s rapides. Elles sont souvent utilis\u00e9es pour des applications n\u00e9cessitant des performances \u00e9lev\u00e9es en temps r\u00e9el. Exemples Redis : Une base de donn\u00e9es en m\u00e9moire open-source souvent utilis\u00e9e pour la mise en cache et la gestion de sessions. Memcached : Un syst\u00e8me de cache distribu\u00e9 en m\u00e9moire, utilis\u00e9 pour acc\u00e9l\u00e9rer les applications web en r\u00e9duisant la charge sur les bases de donn\u00e9es. Avantages Performance : Acc\u00e8s aux donn\u00e9es extr\u00eamement rapide. Temps r\u00e9el : Id\u00e9ales pour les applications n\u00e9cessitant des r\u00e9ponses en temps r\u00e9el. 5. Bases de donn\u00e9es orient\u00e9es objet Description Les bases de donn\u00e9es orient\u00e9es objets stockent les donn\u00e9es sous forme d'objets, comme dans la programmation orient\u00e9e objet. Elles permettent de stocker des objets complexes avec leurs m\u00e9thodes et leurs attributs. Exemples db4o : Une base de donn\u00e9es orient\u00e9e objet open-source. ObjectDB : Une base de donn\u00e9es orient\u00e9e objet pour Java. Avantages Correspondance avec la programmation orient\u00e9e objet : Facilite la transition entre les objets en m\u00e9moire et les objets stock\u00e9s. Complexit\u00e9 des donn\u00e9es : Permet de stocker des structures de donn\u00e9es complexes. Conclusion Chaque type de base de donn\u00e9es a ses propres avantages et inconv\u00e9nients, et le choix du type de base de donn\u00e9es d\u00e9pend des besoins sp\u00e9cifiques de l'application. Dans le cadre de ce cours, nous nous concentrerons principalement sur les bases de donn\u00e9es relationnelles et l'utilisation de PostgreSQL, mais il est important de conna\u00eetre les autres types de bases de donn\u00e9es et leurs cas d'utilisation. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Types de bases de donn\u00e9es"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#types-de-bases-de-donnees","text":"Il existe plusieurs types de bases de donn\u00e9es, chacune \u00e9tant con\u00e7ue pour r\u00e9pondre \u00e0 des besoins sp\u00e9cifiques. Voici un aper\u00e7u des principaux types de bases de donn\u00e9es utilis\u00e9s de nos jours :","title":"Types de bases de donn\u00e9es"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#1-bases-de-donnees-relationnelles","text":"","title":"1. Bases de donn\u00e9es relationnelles"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description","text":"Les bases de donn\u00e9es relationnelles organisent les donn\u00e9es en tables qui peuvent \u00eatre reli\u00e9es entre elles par des cl\u00e9s primaires et \u00e9trang\u00e8res. Elles utilisent le langage SQL ( Structured Query Language ) pour la gestion et la manipulation des donn\u00e9es.","title":"Description"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#exemples","text":"PostgreSQL : Un SGBD relationnel (et objet-relationnel) open-source puissant et extensible. MySQL : Un SGBD relationnel open-source populaire, souvent utilis\u00e9 pour les applications web. Oracle Database : Un SGBD relationnel (et objet-relationnel) commercial avec de nombreuses fonctionnalit\u00e9s avanc\u00e9es. Microsoft SQL Server : Un SGBD relationnel d\u00e9velopp\u00e9 par Microsoft, souvent utilis\u00e9 dans les environnements Windows.","title":"Exemples"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#avantages","text":"Structure claire : Les donn\u00e9es sont organis\u00e9es de mani\u00e8re logique et coh\u00e9rente. Int\u00e9grit\u00e9 des donn\u00e9es : Les contraintes et les r\u00e8gles d'int\u00e9grit\u00e9 garantissent la pr\u00e9cision et la coh\u00e9rence des donn\u00e9es. Requ\u00eates complexes : SQL permet de r\u00e9aliser des requ\u00eates complexes pour extraire des informations sp\u00e9cifiques.","title":"Avantages"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#2-bases-de-donnees-objet-relationnelles","text":"","title":"2. Bases de donn\u00e9es objet-relationnelles"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description_1","text":"Les bases de donn\u00e9es objet-relationnelles combinent les aspects des bases de donn\u00e9es relationnelles et des bases de donn\u00e9es orient\u00e9es objets. Elles permettent de stocker des donn\u00e9es sous forme de tables tout en supportant des concepts de programmation orient\u00e9e objet comme les types de donn\u00e9es personnalis\u00e9s, les h\u00e9ritages de tables et les m\u00e9thodes.","title":"Description"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#exemples_1","text":"PostgreSQL : Un SGBD objet-relationnel open-source qui supporte des fonctionnalit\u00e9s avanc\u00e9es comme les types de donn\u00e9es personnalis\u00e9s et les h\u00e9ritages de tables. Oracle Database : Offre des fonctionnalit\u00e9s objet-relationnelles en plus de ses fonctionnalit\u00e9s relationnelles.","title":"Exemples"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#avantages_1","text":"Flexibilit\u00e9 : Combine les avantages des bases de donn\u00e9es relationnelles et orient\u00e9es objets. Extensibilit\u00e9 : Permet de cr\u00e9er des types de donn\u00e9es et des m\u00e9thodes personnalis\u00e9s. Compatibilit\u00e9 : Maintient la compatibilit\u00e9 avec SQL tout en offrant des fonctionnalit\u00e9s avanc\u00e9es.","title":"Avantages"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#3-bases-de-donnees-nosql","text":"","title":"3. Bases de donn\u00e9es NoSQL"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description_2","text":"Les bases de donn\u00e9es NoSQL sont con\u00e7ues pour des besoins sp\u00e9cifiques qui ne sont pas bien pris en charge par les bases de donn\u00e9es relationnelles. Elles sont souvent utilis\u00e9es pour des applications n\u00e9cessitant une grande scalabilit\u00e9 et des performances \u00e9lev\u00e9es.","title":"Description"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#types-de-bases-de-donnees-nosql","text":"Bases de donn\u00e9es de documents : Stockent les donn\u00e9es sous forme de documents JSON ou BSON. Exemple : MongoDB. Bases de donn\u00e9es de colonnes : Stockent les donn\u00e9es dans des colonnes plut\u00f4t que des lignes. Exemple : Apache Cassandra. Bases de donn\u00e9es de graphes : Utilisent des structures de graphes pour repr\u00e9senter et stocker les donn\u00e9es. Exemple : Neo4j. Bases de donn\u00e9es de paires cl\u00e9-valeur : Stockent les donn\u00e9es sous forme de paires cl\u00e9-valeur. Exemple : Redis.","title":"Types de bases de donn\u00e9es NoSQL"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#avantages_2","text":"Scalabilit\u00e9 : Con\u00e7ues pour g\u00e9rer de grandes quantit\u00e9s de donn\u00e9es et des charges de travail \u00e9lev\u00e9es. Flexibilit\u00e9 : Permettent de stocker des donn\u00e9es non structur\u00e9es ou semi-structur\u00e9es. Performance : Optimis\u00e9es pour des op\u00e9rations de lecture et d'\u00e9criture rapides.","title":"Avantages"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#4-bases-de-donnees-en-memoire","text":"","title":"4. Bases de donn\u00e9es en m\u00e9moire"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description_3","text":"Les bases de donn\u00e9es en m\u00e9moire stockent les donn\u00e9es directement dans la m\u00e9moire vive (RAM), ce qui permet des temps d'acc\u00e8s tr\u00e8s rapides. Elles sont souvent utilis\u00e9es pour des applications n\u00e9cessitant des performances \u00e9lev\u00e9es en temps r\u00e9el.","title":"Description"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#exemples_2","text":"Redis : Une base de donn\u00e9es en m\u00e9moire open-source souvent utilis\u00e9e pour la mise en cache et la gestion de sessions. Memcached : Un syst\u00e8me de cache distribu\u00e9 en m\u00e9moire, utilis\u00e9 pour acc\u00e9l\u00e9rer les applications web en r\u00e9duisant la charge sur les bases de donn\u00e9es.","title":"Exemples"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#avantages_3","text":"Performance : Acc\u00e8s aux donn\u00e9es extr\u00eamement rapide. Temps r\u00e9el : Id\u00e9ales pour les applications n\u00e9cessitant des r\u00e9ponses en temps r\u00e9el.","title":"Avantages"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#5-bases-de-donnees-orientees-objet","text":"","title":"5. Bases de donn\u00e9es orient\u00e9es objet"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description_4","text":"Les bases de donn\u00e9es orient\u00e9es objets stockent les donn\u00e9es sous forme d'objets, comme dans la programmation orient\u00e9e objet. Elles permettent de stocker des objets complexes avec leurs m\u00e9thodes et leurs attributs.","title":"Description"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#exemples_3","text":"db4o : Une base de donn\u00e9es orient\u00e9e objet open-source. ObjectDB : Une base de donn\u00e9es orient\u00e9e objet pour Java.","title":"Exemples"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#avantages_4","text":"Correspondance avec la programmation orient\u00e9e objet : Facilite la transition entre les objets en m\u00e9moire et les objets stock\u00e9s. Complexit\u00e9 des donn\u00e9es : Permet de stocker des structures de donn\u00e9es complexes.","title":"Avantages"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#conclusion","text":"Chaque type de base de donn\u00e9es a ses propres avantages et inconv\u00e9nients, et le choix du type de base de donn\u00e9es d\u00e9pend des besoins sp\u00e9cifiques de l'application. Dans le cadre de ce cours, nous nous concentrerons principalement sur les bases de donn\u00e9es relationnelles et l'utilisation de PostgreSQL, mais il est important de conna\u00eetre les autres types de bases de donn\u00e9es et leurs cas d'utilisation. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Conclusion"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/","text":"Historique des bases de donn\u00e9es Ann\u00e9es 1960 : Les d\u00e9buts Syst\u00e8mes de fichiers Stockage s\u00e9quentiel : Les premiers syst\u00e8mes de gestion des donn\u00e9es utilisaient des fichiers s\u00e9quentiels pour stocker les informations. Les donn\u00e9es \u00e9taient enregistr\u00e9es dans un ordre sp\u00e9cifique, ce qui rendait les op\u00e9rations de recherche et de mise \u00e0 jour lentes et inefficaces. Bases de donn\u00e9es hi\u00e9rarchiques IMS (Information Management System) : D\u00e9velopp\u00e9 par IBM en 1966, IMS est l'un des premiers syst\u00e8mes de gestion de bases de donn\u00e9es (SGBD) hi\u00e9rarchiques. Les donn\u00e9es sont organis\u00e9es en une structure arborescente, avec des enregistrements parents et enfants. Exemple de structure hi\u00e9rarchique Entreprise \u2502 \u251c\u2500\u2500 D\u00e9partement A \u2502 \u251c\u2500\u2500 Employ\u00e9 1 \u2502 \u2514\u2500\u2500 Employ\u00e9 2 \u2502 \u2514\u2500\u2500 D\u00e9partement B \u251c\u2500\u2500 Employ\u00e9 3 \u2514\u2500\u2500 Employ\u00e9 4 Ann\u00e9es 1970 : L'\u00e8re des bases de donn\u00e9es relationnelles Mod\u00e8le relationnel Edgar F. Codd : En 1970, Edgar F. Codd, un chercheur chez IBM, propose le mod\u00e8le relationnel dans son article \"A Relational Model of Data for Large Shared Data Banks\". Ce mod\u00e8le organise les donn\u00e9es en tables (relations) et utilise des cl\u00e9s pour \u00e9tablir des relations entre les tables. SGBD relationnels System R : IBM d\u00e9veloppe System R dans les ann\u00e9es 1970 pour d\u00e9montrer la faisabilit\u00e9 du mod\u00e8le relationnel. Ce projet conduit \u00e0 la cr\u00e9ation du langage SQL ( Structured Query Language ). Ingres : Un autre projet de recherche majeur, Ingres, est d\u00e9velopp\u00e9 \u00e0 l'Universit\u00e9 de Californie, Berkeley, et contribue \u00e9galement \u00e0 la popularisation des bases de donn\u00e9es relationnelles. Ce syst\u00e8me aura comme successeur Postgres et plus tard PostgreSQL. Ann\u00e9es 1980 : Commercialisation et standardisation SGBD commerciaux Oracle : Fond\u00e9e en 1977, Oracle Corporation lance son premier SGBD relationnel commercial en 1979. Oracle devient rapidement un leader dans le domaine des bases de donn\u00e9es. IBM DB2 : En 1983, IBM lance DB2, un SGBD relationnel bas\u00e9 sur les recherches de System R. Microsoft SQL Server : Lanc\u00e9 en 1989, SQL Server devient un acteur majeur dans le domaine des bases de donn\u00e9es relationnelles. Standardisation de SQL ANSI SQL : En 1986, l' American National Standards Institute (ANSI) publie la premi\u00e8re norme SQL, standardisant le langage de requ\u00eate pour les bases de donn\u00e9es relationnelles. Ann\u00e9es 1990 : \u00c9volution et diversification Bases de donn\u00e9es orient\u00e9es objets Emergence : Les bases de donn\u00e9es orient\u00e9es objets gagnent en popularit\u00e9 pour g\u00e9rer des donn\u00e9es complexes et des objets de programmation. db4o et ObjectDB : Des exemples de SGBD orient\u00e9s objets qui apparaissent durant cette p\u00e9riode. Bases de donn\u00e9es distribu\u00e9es Scalabilit\u00e9 : Les bases de donn\u00e9es distribu\u00e9es sont d\u00e9velopp\u00e9es pour permettre la r\u00e9partition des donn\u00e9es sur plusieurs serveurs, am\u00e9liorant ainsi la scalabilit\u00e9 et la tol\u00e9rance aux pannes. Ann\u00e9es 2000 : L'essor des bases de donn\u00e9es NoSQL Big Data Explosion des donn\u00e9es : Avec l'essor d'internet et des applications web, le volume des donn\u00e9es explose, n\u00e9cessitant de nouvelles approches de gestion des donn\u00e9es. Bases de donn\u00e9es NoSQL MongoDB : Lanc\u00e9 en 2009, MongoDB est une base de donn\u00e9es de documents qui permet de stocker des donn\u00e9es semi-structur\u00e9es. Cassandra : D\u00e9velopp\u00e9 par Facebook, Cassandra est une base de donn\u00e9es de colonnes distribu\u00e9e, con\u00e7ue pour g\u00e9rer de grandes quantit\u00e9s de donn\u00e9es sur plusieurs serveurs. Redis : Une base de donn\u00e9es en m\u00e9moire, utilis\u00e9e pour des applications n\u00e9cessitant des performances \u00e9lev\u00e9es. Ann\u00e9es 2010 \u00e0 aujourd'hui : Nouvelles tendances et technologies Bases de donn\u00e9es en m\u00e9moire Performance : Les bases de donn\u00e9es en m\u00e9moire, comme Redis et Memcached, gagnent en popularit\u00e9 pour les applications n\u00e9cessitant des temps de r\u00e9ponse ultra-rapides. Bases de donn\u00e9es multi-mod\u00e8les Flexibilit\u00e9 : Les bases de donn\u00e9es multi-mod\u00e8les, comme ArangoDB et OrientDB, permettent de combiner plusieurs mod\u00e8les de donn\u00e9es (relationnel, document, graphe) dans un m\u00eame SGBD. Cloud et bases de donn\u00e9es en tant que service (DBaaS) Accessibilit\u00e9 : Les services de bases de donn\u00e9es dans le cloud, comme Amazon RDS, Google Cloud SQL et Azure SQL Database, permettent aux entreprises de d\u00e9ployer et de g\u00e9rer des bases de donn\u00e9es sans avoir \u00e0 se soucier de l'infrastructure sous-jacente. Conclusion L'histoire des bases de donn\u00e9es est marqu\u00e9e par une \u00e9volution constante, r\u00e9pondant aux besoins croissants de stockage, de gestion et d'acc\u00e8s aux donn\u00e9es. Des premiers syst\u00e8mes hi\u00e9rarchiques aux bases de donn\u00e9es relationnelles, en passant par les bases de donn\u00e9es NoSQL et les solutions en m\u00e9moire, chaque \u00e9tape a apport\u00e9 des innovations significatives. Aujourd'hui, les bases de donn\u00e9es continuent d'\u00e9voluer pour r\u00e9pondre aux d\u00e9fis du Big Data, de l'Internet des objets (IoT) et des applications en temps r\u00e9el. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Historique des bases de donn\u00e9es"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#historique-des-bases-de-donnees","text":"","title":"Historique des bases de donn\u00e9es"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#annees-1960-les-debuts","text":"","title":"Ann\u00e9es 1960 : Les d\u00e9buts"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#systemes-de-fichiers","text":"Stockage s\u00e9quentiel : Les premiers syst\u00e8mes de gestion des donn\u00e9es utilisaient des fichiers s\u00e9quentiels pour stocker les informations. Les donn\u00e9es \u00e9taient enregistr\u00e9es dans un ordre sp\u00e9cifique, ce qui rendait les op\u00e9rations de recherche et de mise \u00e0 jour lentes et inefficaces.","title":"Syst\u00e8mes de fichiers"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#bases-de-donnees-hierarchiques","text":"IMS (Information Management System) : D\u00e9velopp\u00e9 par IBM en 1966, IMS est l'un des premiers syst\u00e8mes de gestion de bases de donn\u00e9es (SGBD) hi\u00e9rarchiques. Les donn\u00e9es sont organis\u00e9es en une structure arborescente, avec des enregistrements parents et enfants.","title":"Bases de donn\u00e9es hi\u00e9rarchiques"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#exemple-de-structure-hierarchique","text":"Entreprise \u2502 \u251c\u2500\u2500 D\u00e9partement A \u2502 \u251c\u2500\u2500 Employ\u00e9 1 \u2502 \u2514\u2500\u2500 Employ\u00e9 2 \u2502 \u2514\u2500\u2500 D\u00e9partement B \u251c\u2500\u2500 Employ\u00e9 3 \u2514\u2500\u2500 Employ\u00e9 4","title":"Exemple de structure hi\u00e9rarchique"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#annees-1970-lere-des-bases-de-donnees-relationnelles","text":"","title":"Ann\u00e9es 1970 : L'\u00e8re des bases de donn\u00e9es relationnelles"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#modele-relationnel","text":"Edgar F. Codd : En 1970, Edgar F. Codd, un chercheur chez IBM, propose le mod\u00e8le relationnel dans son article \"A Relational Model of Data for Large Shared Data Banks\". Ce mod\u00e8le organise les donn\u00e9es en tables (relations) et utilise des cl\u00e9s pour \u00e9tablir des relations entre les tables.","title":"Mod\u00e8le relationnel"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#sgbd-relationnels","text":"System R : IBM d\u00e9veloppe System R dans les ann\u00e9es 1970 pour d\u00e9montrer la faisabilit\u00e9 du mod\u00e8le relationnel. Ce projet conduit \u00e0 la cr\u00e9ation du langage SQL ( Structured Query Language ). Ingres : Un autre projet de recherche majeur, Ingres, est d\u00e9velopp\u00e9 \u00e0 l'Universit\u00e9 de Californie, Berkeley, et contribue \u00e9galement \u00e0 la popularisation des bases de donn\u00e9es relationnelles. Ce syst\u00e8me aura comme successeur Postgres et plus tard PostgreSQL.","title":"SGBD relationnels"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#annees-1980-commercialisation-et-standardisation","text":"","title":"Ann\u00e9es 1980 : Commercialisation et standardisation"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#sgbd-commerciaux","text":"Oracle : Fond\u00e9e en 1977, Oracle Corporation lance son premier SGBD relationnel commercial en 1979. Oracle devient rapidement un leader dans le domaine des bases de donn\u00e9es. IBM DB2 : En 1983, IBM lance DB2, un SGBD relationnel bas\u00e9 sur les recherches de System R. Microsoft SQL Server : Lanc\u00e9 en 1989, SQL Server devient un acteur majeur dans le domaine des bases de donn\u00e9es relationnelles.","title":"SGBD commerciaux"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#standardisation-de-sql","text":"ANSI SQL : En 1986, l' American National Standards Institute (ANSI) publie la premi\u00e8re norme SQL, standardisant le langage de requ\u00eate pour les bases de donn\u00e9es relationnelles.","title":"Standardisation de SQL"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#annees-1990-evolution-et-diversification","text":"","title":"Ann\u00e9es 1990 : \u00c9volution et diversification"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#bases-de-donnees-orientees-objets","text":"Emergence : Les bases de donn\u00e9es orient\u00e9es objets gagnent en popularit\u00e9 pour g\u00e9rer des donn\u00e9es complexes et des objets de programmation. db4o et ObjectDB : Des exemples de SGBD orient\u00e9s objets qui apparaissent durant cette p\u00e9riode.","title":"Bases de donn\u00e9es orient\u00e9es objets"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#bases-de-donnees-distribuees","text":"Scalabilit\u00e9 : Les bases de donn\u00e9es distribu\u00e9es sont d\u00e9velopp\u00e9es pour permettre la r\u00e9partition des donn\u00e9es sur plusieurs serveurs, am\u00e9liorant ainsi la scalabilit\u00e9 et la tol\u00e9rance aux pannes.","title":"Bases de donn\u00e9es distribu\u00e9es"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#annees-2000-lessor-des-bases-de-donnees-nosql","text":"","title":"Ann\u00e9es 2000 : L'essor des bases de donn\u00e9es NoSQL"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#big-data","text":"Explosion des donn\u00e9es : Avec l'essor d'internet et des applications web, le volume des donn\u00e9es explose, n\u00e9cessitant de nouvelles approches de gestion des donn\u00e9es.","title":"Big Data"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#bases-de-donnees-nosql","text":"MongoDB : Lanc\u00e9 en 2009, MongoDB est une base de donn\u00e9es de documents qui permet de stocker des donn\u00e9es semi-structur\u00e9es. Cassandra : D\u00e9velopp\u00e9 par Facebook, Cassandra est une base de donn\u00e9es de colonnes distribu\u00e9e, con\u00e7ue pour g\u00e9rer de grandes quantit\u00e9s de donn\u00e9es sur plusieurs serveurs. Redis : Une base de donn\u00e9es en m\u00e9moire, utilis\u00e9e pour des applications n\u00e9cessitant des performances \u00e9lev\u00e9es.","title":"Bases de donn\u00e9es NoSQL"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#annees-2010-a-aujourdhui-nouvelles-tendances-et-technologies","text":"","title":"Ann\u00e9es 2010 \u00e0 aujourd'hui : Nouvelles tendances et technologies"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#bases-de-donnees-en-memoire","text":"Performance : Les bases de donn\u00e9es en m\u00e9moire, comme Redis et Memcached, gagnent en popularit\u00e9 pour les applications n\u00e9cessitant des temps de r\u00e9ponse ultra-rapides.","title":"Bases de donn\u00e9es en m\u00e9moire"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#bases-de-donnees-multi-modeles","text":"Flexibilit\u00e9 : Les bases de donn\u00e9es multi-mod\u00e8les, comme ArangoDB et OrientDB, permettent de combiner plusieurs mod\u00e8les de donn\u00e9es (relationnel, document, graphe) dans un m\u00eame SGBD.","title":"Bases de donn\u00e9es multi-mod\u00e8les"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#cloud-et-bases-de-donnees-en-tant-que-service-dbaas","text":"Accessibilit\u00e9 : Les services de bases de donn\u00e9es dans le cloud, comme Amazon RDS, Google Cloud SQL et Azure SQL Database, permettent aux entreprises de d\u00e9ployer et de g\u00e9rer des bases de donn\u00e9es sans avoir \u00e0 se soucier de l'infrastructure sous-jacente.","title":"Cloud et bases de donn\u00e9es en tant que service (DBaaS)"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#conclusion","text":"L'histoire des bases de donn\u00e9es est marqu\u00e9e par une \u00e9volution constante, r\u00e9pondant aux besoins croissants de stockage, de gestion et d'acc\u00e8s aux donn\u00e9es. Des premiers syst\u00e8mes hi\u00e9rarchiques aux bases de donn\u00e9es relationnelles, en passant par les bases de donn\u00e9es NoSQL et les solutions en m\u00e9moire, chaque \u00e9tape a apport\u00e9 des innovations significatives. Aujourd'hui, les bases de donn\u00e9es continuent d'\u00e9voluer pour r\u00e9pondre aux d\u00e9fis du Big Data, de l'Internet des objets (IoT) et des applications en temps r\u00e9el. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Conclusion"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/","text":"Exemples de Bases de Donn\u00e9es dans Diff\u00e9rents Contextes Les bases de donn\u00e9es sont utilis\u00e9es dans une vari\u00e9t\u00e9 de contextes, chacun ayant des besoins et des caract\u00e9ristiques sp\u00e9cifiques. Voici quelques exemples de bases de donn\u00e9es dans diff\u00e9rents contextes, ainsi que la taille typique des bases de donn\u00e9es dans ces contextes. 1. Syst\u00e8mes Embarqu\u00e9s Exemple Appareils IoT (Internet des Objets) : Les bases de donn\u00e9es sont utilis\u00e9es pour stocker des donn\u00e9es de capteurs, des configurations d'appareils et des journaux d'\u00e9v\u00e9nements. Taille Typique Ordre de grandeur : Kilooctets (Ko) \u00e0 M\u00e9gaoctets (Mo) Exemple : Une base de donn\u00e9es embarqu\u00e9e pour un thermostat intelligent pourrait avoir une taille de quelques Mo pour stocker les historiques de temp\u00e9rature et les configurations. 2. Sites Web Exemple Sites de commerce \u00e9lectronique : Les bases de donn\u00e9es stockent des informations sur les produits, les utilisateurs, les commandes, les avis, etc. Taille Typique Ordre de grandeur : Gigaoctets (Go) \u00e0 T\u00e9raoctets (To) Exemple : Un site de commerce \u00e9lectronique de taille moyenne peut avoir une base de donn\u00e9es de plusieurs centaines de Go, tandis qu'un site de grande taille comme Amazon peut avoir des bases de donn\u00e9es de plusieurs To. 3. Applications de Bureau Exemple Logiciels de gestion d'entreprise : Les bases de donn\u00e9es sont utilis\u00e9es pour g\u00e9rer les informations sur les clients, les produits, les ventes, les stocks, etc. Taille Typique Ordre de grandeur : M\u00e9gaoctets (Mo) \u00e0 Gigaoctets (Go) Exemple : Un logiciel de gestion pour une petite entreprise peut avoir une base de donn\u00e9es de quelques dizaines de Mo \u00e0 quelques Go. 4. Analyse de Donn\u00e9es Exemple Entreposage de donn\u00e9es (Data Warehousing) : Les bases de donn\u00e9es sont utilis\u00e9es pour stocker et analyser de grandes quantit\u00e9s de donn\u00e9es historiques. Taille Typique Ordre de grandeur : T\u00e9raoctets (To) \u00e0 P\u00e9taoctets (Po) Exemple : Une entreprise de grande taille peut avoir un entrep\u00f4t de donn\u00e9es de plusieurs To pour l'analyse des ventes, des op\u00e9rations et des performances. 5. Applications Mobiles Exemple Applications de r\u00e9seaux sociaux : Les bases de donn\u00e9es stockent des informations sur les utilisateurs, les messages, les amis, les photos, etc. Taille Typique Ordre de grandeur : M\u00e9gaoctets (Mo) \u00e0 Gigaoctets (Go) Exemple : Une application de r\u00e9seau social de taille moyenne peut avoir une base de donn\u00e9es de plusieurs dizaines de Go pour stocker les informations des utilisateurs et les contenus partag\u00e9s. 6. Jeux Vid\u00e9o Exemple Jeux en ligne massivement multijoueurs (MMO) : Les bases de donn\u00e9es stockent des informations sur les joueurs, les personnages, les inventaires, les scores, etc. Taille Typique Ordre de grandeur : Gigaoctets (Go) \u00e0 T\u00e9raoctets (To) Exemple : Un jeu MMO de grande envergure peut avoir une base de donn\u00e9es de plusieurs To pour g\u00e9rer les informations des joueurs et les \u00e9tats du jeu. 7. Syst\u00e8mes Financiers Exemple Syst\u00e8mes bancaires : Les bases de donn\u00e9es stockent des informations sur les comptes, les transactions, les clients, les historiques de cr\u00e9dit, etc. Taille Typique Ordre de grandeur : T\u00e9raoctets (To) \u00e0 P\u00e9taoctets (Po) Exemple : Une grande banque peut avoir des bases de donn\u00e9es de plusieurs Po pour g\u00e9rer les transactions financi\u00e8res et les informations des clients. Conclusion Les bases de donn\u00e9es sont essentielles dans une vari\u00e9t\u00e9 de contextes, chacun ayant des exigences sp\u00e9cifiques en termes de taille et de performance. De quelques kilooctets dans les syst\u00e8mes embarqu\u00e9s \u00e0 plusieurs p\u00e9taoctets dans les syst\u00e8mes financiers et d'analyse de donn\u00e9es, les bases de donn\u00e9es jouent un r\u00f4le crucial dans le stockage, la gestion et l'analyse des informations. Tableau d'unit\u00e9s Unit\u00e9 (FR) Nom complet (FR) Valeur Base 2 Base 10 (approx) Unit\u00e9 (EN) Nom complet (EN) o octet 1 octet 2^0 1 B byte Ko kilooctet 1 024 octets 2^10 1.02 \u00d7 10^3 KB kilobyte Mo m\u00e9gaoctet 1 024 kilooctets 2^20 1.05 \u00d7 10^6 MB megabyte Go gigaoctet 1 024 m\u00e9gaoctets 2^30 1.07 \u00d7 10^9 GB gigabyte To t\u00e9raoctet 1 024 gigaoctets 2^40 1.10 \u00d7 10^12 TB terabyte Po p\u00e9taoctet 1 024 t\u00e9raoctets 2^50 1.13 \u00d7 10^15 PB petabyte Eo exaoctet 1 024 p\u00e9taoctets 2^60 1.15 \u00d7 10^18 EB exabyte Zo zettaoctet 1 024 exaoctets 2^70 1.18 \u00d7 10^21 ZB zettabyte Yo yottaoctet 1 024 zettaoctets 2^80 1.21 \u00d7 10^24 YB yottabyte Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Exemples de Bases de Donn\u00e9es dans Diff\u00e9rents Contextes"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#exemples-de-bases-de-donnees-dans-differents-contextes","text":"Les bases de donn\u00e9es sont utilis\u00e9es dans une vari\u00e9t\u00e9 de contextes, chacun ayant des besoins et des caract\u00e9ristiques sp\u00e9cifiques. Voici quelques exemples de bases de donn\u00e9es dans diff\u00e9rents contextes, ainsi que la taille typique des bases de donn\u00e9es dans ces contextes.","title":"Exemples de Bases de Donn\u00e9es dans Diff\u00e9rents Contextes"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#1-systemes-embarques","text":"","title":"1. Syst\u00e8mes Embarqu\u00e9s"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#exemple","text":"Appareils IoT (Internet des Objets) : Les bases de donn\u00e9es sont utilis\u00e9es pour stocker des donn\u00e9es de capteurs, des configurations d'appareils et des journaux d'\u00e9v\u00e9nements.","title":"Exemple"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#taille-typique","text":"Ordre de grandeur : Kilooctets (Ko) \u00e0 M\u00e9gaoctets (Mo) Exemple : Une base de donn\u00e9es embarqu\u00e9e pour un thermostat intelligent pourrait avoir une taille de quelques Mo pour stocker les historiques de temp\u00e9rature et les configurations.","title":"Taille Typique"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#2-sites-web","text":"","title":"2. Sites Web"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#exemple_1","text":"Sites de commerce \u00e9lectronique : Les bases de donn\u00e9es stockent des informations sur les produits, les utilisateurs, les commandes, les avis, etc.","title":"Exemple"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#taille-typique_1","text":"Ordre de grandeur : Gigaoctets (Go) \u00e0 T\u00e9raoctets (To) Exemple : Un site de commerce \u00e9lectronique de taille moyenne peut avoir une base de donn\u00e9es de plusieurs centaines de Go, tandis qu'un site de grande taille comme Amazon peut avoir des bases de donn\u00e9es de plusieurs To.","title":"Taille Typique"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#3-applications-de-bureau","text":"","title":"3. Applications de Bureau"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#exemple_2","text":"Logiciels de gestion d'entreprise : Les bases de donn\u00e9es sont utilis\u00e9es pour g\u00e9rer les informations sur les clients, les produits, les ventes, les stocks, etc.","title":"Exemple"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#taille-typique_2","text":"Ordre de grandeur : M\u00e9gaoctets (Mo) \u00e0 Gigaoctets (Go) Exemple : Un logiciel de gestion pour une petite entreprise peut avoir une base de donn\u00e9es de quelques dizaines de Mo \u00e0 quelques Go.","title":"Taille Typique"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#4-analyse-de-donnees","text":"","title":"4. Analyse de Donn\u00e9es"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#exemple_3","text":"Entreposage de donn\u00e9es (Data Warehousing) : Les bases de donn\u00e9es sont utilis\u00e9es pour stocker et analyser de grandes quantit\u00e9s de donn\u00e9es historiques.","title":"Exemple"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#taille-typique_3","text":"Ordre de grandeur : T\u00e9raoctets (To) \u00e0 P\u00e9taoctets (Po) Exemple : Une entreprise de grande taille peut avoir un entrep\u00f4t de donn\u00e9es de plusieurs To pour l'analyse des ventes, des op\u00e9rations et des performances.","title":"Taille Typique"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#5-applications-mobiles","text":"","title":"5. Applications Mobiles"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#exemple_4","text":"Applications de r\u00e9seaux sociaux : Les bases de donn\u00e9es stockent des informations sur les utilisateurs, les messages, les amis, les photos, etc.","title":"Exemple"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#taille-typique_4","text":"Ordre de grandeur : M\u00e9gaoctets (Mo) \u00e0 Gigaoctets (Go) Exemple : Une application de r\u00e9seau social de taille moyenne peut avoir une base de donn\u00e9es de plusieurs dizaines de Go pour stocker les informations des utilisateurs et les contenus partag\u00e9s.","title":"Taille Typique"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#6-jeux-video","text":"","title":"6. Jeux Vid\u00e9o"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#exemple_5","text":"Jeux en ligne massivement multijoueurs (MMO) : Les bases de donn\u00e9es stockent des informations sur les joueurs, les personnages, les inventaires, les scores, etc.","title":"Exemple"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#taille-typique_5","text":"Ordre de grandeur : Gigaoctets (Go) \u00e0 T\u00e9raoctets (To) Exemple : Un jeu MMO de grande envergure peut avoir une base de donn\u00e9es de plusieurs To pour g\u00e9rer les informations des joueurs et les \u00e9tats du jeu.","title":"Taille Typique"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#7-systemes-financiers","text":"","title":"7. Syst\u00e8mes Financiers"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#exemple_6","text":"Syst\u00e8mes bancaires : Les bases de donn\u00e9es stockent des informations sur les comptes, les transactions, les clients, les historiques de cr\u00e9dit, etc.","title":"Exemple"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#taille-typique_6","text":"Ordre de grandeur : T\u00e9raoctets (To) \u00e0 P\u00e9taoctets (Po) Exemple : Une grande banque peut avoir des bases de donn\u00e9es de plusieurs Po pour g\u00e9rer les transactions financi\u00e8res et les informations des clients.","title":"Taille Typique"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#conclusion","text":"Les bases de donn\u00e9es sont essentielles dans une vari\u00e9t\u00e9 de contextes, chacun ayant des exigences sp\u00e9cifiques en termes de taille et de performance. De quelques kilooctets dans les syst\u00e8mes embarqu\u00e9s \u00e0 plusieurs p\u00e9taoctets dans les syst\u00e8mes financiers et d'analyse de donn\u00e9es, les bases de donn\u00e9es jouent un r\u00f4le crucial dans le stockage, la gestion et l'analyse des informations.","title":"Conclusion"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#tableau-dunites","text":"Unit\u00e9 (FR) Nom complet (FR) Valeur Base 2 Base 10 (approx) Unit\u00e9 (EN) Nom complet (EN) o octet 1 octet 2^0 1 B byte Ko kilooctet 1 024 octets 2^10 1.02 \u00d7 10^3 KB kilobyte Mo m\u00e9gaoctet 1 024 kilooctets 2^20 1.05 \u00d7 10^6 MB megabyte Go gigaoctet 1 024 m\u00e9gaoctets 2^30 1.07 \u00d7 10^9 GB gigabyte To t\u00e9raoctet 1 024 gigaoctets 2^40 1.10 \u00d7 10^12 TB terabyte Po p\u00e9taoctet 1 024 t\u00e9raoctets 2^50 1.13 \u00d7 10^15 PB petabyte Eo exaoctet 1 024 p\u00e9taoctets 2^60 1.15 \u00d7 10^18 EB exabyte Zo zettaoctet 1 024 exaoctets 2^70 1.18 \u00d7 10^21 ZB zettabyte Yo yottaoctet 1 024 zettaoctets 2^80 1.21 \u00d7 10^24 YB yottabyte Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Tableau d'unit\u00e9s"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/","text":"Introduction \u00e0 PostgreSQL Historique de PostgreSQL PostgreSQL, souvent appel\u00e9 Postgres, est un syst\u00e8me de gestion de base de donn\u00e9es relationnelle et objet-relationnelle open-source. Son d\u00e9veloppement a commenc\u00e9 en 1986 \u00e0 l'Universit\u00e9 de Californie, Berkeley, sous le projet POSTGRES dirig\u00e9 par le professeur Michael Stonebraker. Le projet a \u00e9volu\u00e9 pour devenir PostgreSQL en 1996, avec l'ajout du support SQL. Mod\u00e8le de donn\u00e9es utilis\u00e9 PostgreSQL utilise un mod\u00e8le de donn\u00e9es relationnel et objet-relationnel. Cela signifie qu'il supporte non seulement les fonctionnalit\u00e9s des bases de donn\u00e9es relationnelles traditionnelles, comme les tables, les requ\u00eates SQL et les transactions, mais aussi des fonctionnalit\u00e9s avanc\u00e9es comme les types de donn\u00e9es personnalis\u00e9s, les objets, et les h\u00e9ritages de tables. Comparatif des mod\u00e8les relationnel et objet-relationnel Caract\u00e9ristique Mod\u00e8le Relationnel Mod\u00e8le Objet-Relationnel Structure des donn\u00e9es Tables et colonnes Tables, colonnes, types de donn\u00e9es personnalis\u00e9s, h\u00e9ritage de tables Langage de requ\u00eate SQL standard SQL avec extensions pour les objets Types de donn\u00e9es Types de donn\u00e9es standard (INT, VARCHAR, etc.) Types de donn\u00e9es standard + types personnalis\u00e9s Support des objets Non Oui H\u00e9ritage de tables Non Oui Importance et support des grandes compagnies PostgreSQL est largement utilis\u00e9 par de nombreuses grandes entreprises et organisations \u00e0 travers le monde, notamment : Apple Cisco Red Hat Debian Instagram Spotify Ces entreprises choisissent PostgreSQL pour sa robustesse, sa flexibilit\u00e9 et son adh\u00e9sion aux standards SQL. Particularit\u00e9s de PostgreSQL compar\u00e9 aux autres SGBD Extensibilit\u00e9 : PostgreSQL permet aux utilisateurs de d\u00e9finir leurs propres types de donn\u00e9es, op\u00e9rateurs et fonctions. Support des transactions ACID : Assure la fiabilit\u00e9 des transactions avec des propri\u00e9t\u00e9s d'atomicit\u00e9, de coh\u00e9rence, d'isolation et de durabilit\u00e9. Conformit\u00e9 aux standards SQL : PostgreSQL est tr\u00e8s conforme aux standards SQL, ce qui facilite la portabilit\u00e9 des applications. Support des requ\u00eates complexes : PostgreSQL supporte les jointures complexes, les sous-requ\u00eates, les vues mat\u00e9rialis\u00e9es, et plus encore. Indexation avanc\u00e9e : Offre plusieurs types d'index (B-tree, Hash, GiST, SP-GiST, GIN, BRIN) pour am\u00e9liorer les performances des requ\u00eates. S\u00e9curit\u00e9 : Inclut des fonctionnalit\u00e9s de s\u00e9curit\u00e9 avanc\u00e9es comme l'authentification SSL, le chiffrement des donn\u00e9es et le contr\u00f4le d'acc\u00e8s bas\u00e9 sur les r\u00f4les. Licence PostgreSQL est distribu\u00e9 sous la licence PostgreSQL, une licence open-source permissive similaire \u00e0 la licence MIT. Cela permet une utilisation, une modification et une distribution libres, y compris pour des applications commerciales. T\u00e9l\u00e9chargement et installation Liens pour le t\u00e9l\u00e9chargement Site officiel de PostgreSQL Guides d'installation Guide d'installation pour Windows Guide d'installation pour macOS Guide d'installation pour Linux Conclusion PostgreSQL est un SGBD puissant et flexible, adapt\u00e9 \u00e0 une large gamme d'applications. Son mod\u00e8le de donn\u00e9es objet-relationnel, sa conformit\u00e9 aux standards SQL, et ses fonctionnalit\u00e9s avanc\u00e9es en font un choix privil\u00e9gi\u00e9 pour de nombreuses entreprises et d\u00e9veloppeurs. Sa licence open-source et son large support communautaire contribuent \u00e9galement \u00e0 sa popularit\u00e9 et \u00e0 son adoption continue. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Introduction \u00e0 PostgreSQL"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#introduction-a-postgresql","text":"","title":"Introduction \u00e0 PostgreSQL"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#historique-de-postgresql","text":"PostgreSQL, souvent appel\u00e9 Postgres, est un syst\u00e8me de gestion de base de donn\u00e9es relationnelle et objet-relationnelle open-source. Son d\u00e9veloppement a commenc\u00e9 en 1986 \u00e0 l'Universit\u00e9 de Californie, Berkeley, sous le projet POSTGRES dirig\u00e9 par le professeur Michael Stonebraker. Le projet a \u00e9volu\u00e9 pour devenir PostgreSQL en 1996, avec l'ajout du support SQL.","title":"Historique de PostgreSQL"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#modele-de-donnees-utilise","text":"PostgreSQL utilise un mod\u00e8le de donn\u00e9es relationnel et objet-relationnel. Cela signifie qu'il supporte non seulement les fonctionnalit\u00e9s des bases de donn\u00e9es relationnelles traditionnelles, comme les tables, les requ\u00eates SQL et les transactions, mais aussi des fonctionnalit\u00e9s avanc\u00e9es comme les types de donn\u00e9es personnalis\u00e9s, les objets, et les h\u00e9ritages de tables.","title":"Mod\u00e8le de donn\u00e9es utilis\u00e9"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#comparatif-des-modeles-relationnel-et-objet-relationnel","text":"Caract\u00e9ristique Mod\u00e8le Relationnel Mod\u00e8le Objet-Relationnel Structure des donn\u00e9es Tables et colonnes Tables, colonnes, types de donn\u00e9es personnalis\u00e9s, h\u00e9ritage de tables Langage de requ\u00eate SQL standard SQL avec extensions pour les objets Types de donn\u00e9es Types de donn\u00e9es standard (INT, VARCHAR, etc.) Types de donn\u00e9es standard + types personnalis\u00e9s Support des objets Non Oui H\u00e9ritage de tables Non Oui","title":"Comparatif des mod\u00e8les relationnel et objet-relationnel"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#importance-et-support-des-grandes-compagnies","text":"PostgreSQL est largement utilis\u00e9 par de nombreuses grandes entreprises et organisations \u00e0 travers le monde, notamment : Apple Cisco Red Hat Debian Instagram Spotify Ces entreprises choisissent PostgreSQL pour sa robustesse, sa flexibilit\u00e9 et son adh\u00e9sion aux standards SQL.","title":"Importance et support des grandes compagnies"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#particularites-de-postgresql-compare-aux-autres-sgbd","text":"Extensibilit\u00e9 : PostgreSQL permet aux utilisateurs de d\u00e9finir leurs propres types de donn\u00e9es, op\u00e9rateurs et fonctions. Support des transactions ACID : Assure la fiabilit\u00e9 des transactions avec des propri\u00e9t\u00e9s d'atomicit\u00e9, de coh\u00e9rence, d'isolation et de durabilit\u00e9. Conformit\u00e9 aux standards SQL : PostgreSQL est tr\u00e8s conforme aux standards SQL, ce qui facilite la portabilit\u00e9 des applications. Support des requ\u00eates complexes : PostgreSQL supporte les jointures complexes, les sous-requ\u00eates, les vues mat\u00e9rialis\u00e9es, et plus encore. Indexation avanc\u00e9e : Offre plusieurs types d'index (B-tree, Hash, GiST, SP-GiST, GIN, BRIN) pour am\u00e9liorer les performances des requ\u00eates. S\u00e9curit\u00e9 : Inclut des fonctionnalit\u00e9s de s\u00e9curit\u00e9 avanc\u00e9es comme l'authentification SSL, le chiffrement des donn\u00e9es et le contr\u00f4le d'acc\u00e8s bas\u00e9 sur les r\u00f4les.","title":"Particularit\u00e9s de PostgreSQL compar\u00e9 aux autres SGBD"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#licence","text":"PostgreSQL est distribu\u00e9 sous la licence PostgreSQL, une licence open-source permissive similaire \u00e0 la licence MIT. Cela permet une utilisation, une modification et une distribution libres, y compris pour des applications commerciales.","title":"Licence"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#telechargement-et-installation","text":"","title":"T\u00e9l\u00e9chargement et installation"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#liens-pour-le-telechargement","text":"Site officiel de PostgreSQL","title":"Liens pour le t\u00e9l\u00e9chargement"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#guides-dinstallation","text":"Guide d'installation pour Windows Guide d'installation pour macOS Guide d'installation pour Linux","title":"Guides d'installation"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#conclusion","text":"PostgreSQL est un SGBD puissant et flexible, adapt\u00e9 \u00e0 une large gamme d'applications. Son mod\u00e8le de donn\u00e9es objet-relationnel, sa conformit\u00e9 aux standards SQL, et ses fonctionnalit\u00e9s avanc\u00e9es en font un choix privil\u00e9gi\u00e9 pour de nombreuses entreprises et d\u00e9veloppeurs. Sa licence open-source et son large support communautaire contribuent \u00e9galement \u00e0 sa popularit\u00e9 et \u00e0 son adoption continue. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Conclusion"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/","text":"Avantages de PostgreSQL par rapport \u00e0 d'autres SGBD PostgreSQL est reconnu pour ses nombreuses fonctionnalit\u00e9s avanc\u00e9es, sa robustesse et sa flexibilit\u00e9. Voici quelques-uns des avantages distinctifs de PostgreSQL par rapport \u00e0 d'autres syst\u00e8mes de gestion de bases de donn\u00e9es (SGBD) : 1. Extensibilit\u00e9 Description PostgreSQL est extr\u00eamement extensible. Les utilisateurs peuvent ajouter de nouveaux types de donn\u00e9es, fonctions, op\u00e9rateurs, agr\u00e9gats, m\u00e9thodes d'indexation, et m\u00eame des langages de proc\u00e9dures. Exemple CREATE FUNCTION add_integers(a INTEGER, b INTEGER) RETURNS INTEGER AS $$ BEGIN RETURN a + b; END; $$ LANGUAGE plpgsql; 2. Conformit\u00e9 aux standards SQL Description PostgreSQL est tr\u00e8s conforme aux standards SQL, ce qui facilite la portabilit\u00e9 des applications entre diff\u00e9rents SGBD. Exemple PostgreSQL supporte les fonctionnalit\u00e9s avanc\u00e9es de SQL comme les sous-requ\u00eates, les jointures complexes, les vues mat\u00e9rialis\u00e9es, etc. 3. Transactions ACID Description PostgreSQL assure la fiabilit\u00e9 des transactions avec des propri\u00e9t\u00e9s d'atomicit\u00e9, de coh\u00e9rence, d'isolation et de durabilit\u00e9 (ACID). Exemple BEGIN; UPDATE comptes SET solde = solde - 100 WHERE id = 1; UPDATE comptes SET solde = solde + 100 WHERE id = 2; COMMIT; 4. Indexation avanc\u00e9e Description PostgreSQL offre plusieurs types d'index (B-tree, Hash, GiST, SP-GiST, GIN, BRIN) pour am\u00e9liorer les performances des requ\u00eates. Exemple CREATE INDEX idx_gin ON documents USING GIN (contenu); 5. S\u00e9curit\u00e9 Description PostgreSQL inclut des fonctionnalit\u00e9s de s\u00e9curit\u00e9 avanc\u00e9es comme l'authentification SSL, le chiffrement des donn\u00e9es, et le contr\u00f4le d'acc\u00e8s bas\u00e9 sur les r\u00f4les. Exemple CREATE ROLE admin WITH LOGIN PASSWORD 'securepassword'; GRANT ALL PRIVILEGES ON DATABASE mydb TO admin; 6. Support des requ\u00eates complexes Description PostgreSQL supporte les jointures complexes, les sous-requ\u00eates, les vues mat\u00e9rialis\u00e9es, les fonctions de fen\u00eatre, et plus encore. Exemple SELECT nom, SUM(salaire) OVER (PARTITION BY departement) AS total_salaire FROM employes; 7. Support des types de donn\u00e9es avanc\u00e9s Description PostgreSQL supporte une large gamme de types de donn\u00e9es, y compris les types g\u00e9om\u00e9triques, les types JSON, les types XML, et les types de tableau. Exemple CREATE TABLE documents ( id SERIAL PRIMARY KEY, contenu JSONB ); INSERT INTO documents (contenu) VALUES ('{\"titre\": \"PostgreSQL\", \"auteur\": \"John Doe\"}'); 8. Haute disponibilit\u00e9 et r\u00e9plication Description PostgreSQL offre des solutions robustes pour la haute disponibilit\u00e9 et la r\u00e9plication, y compris la r\u00e9plication en streaming et la r\u00e9plication logique. Exemple # Configuration de la r\u00e9plication en streaming primary_conninfo = 'host=primary_host port=5432 user=replicator password=securepassword' 9. Licence open-source permissive Description PostgreSQL est distribu\u00e9 sous la licence PostgreSQL, une licence open-source permissive similaire \u00e0 la licence MIT, permettant une utilisation, une modification et une distribution libres, y compris pour des applications commerciales. Conclusion PostgreSQL se distingue par sa flexibilit\u00e9, sa conformit\u00e9 aux standards, ses fonctionnalit\u00e9s avanc\u00e9es, et sa robustesse. Ces avantages en font un choix privil\u00e9gi\u00e9 pour de nombreuses entreprises et d\u00e9veloppeurs \u00e0 travers le monde, offrant une solution fiable et performante pour une large gamme d'applications. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Avantages de PostgreSQL par rapport \u00e0 d'autres SGBD"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#avantages-de-postgresql-par-rapport-a-dautres-sgbd","text":"PostgreSQL est reconnu pour ses nombreuses fonctionnalit\u00e9s avanc\u00e9es, sa robustesse et sa flexibilit\u00e9. Voici quelques-uns des avantages distinctifs de PostgreSQL par rapport \u00e0 d'autres syst\u00e8mes de gestion de bases de donn\u00e9es (SGBD) :","title":"Avantages de PostgreSQL par rapport \u00e0 d'autres SGBD"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#1-extensibilite","text":"","title":"1. Extensibilit\u00e9"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description","text":"PostgreSQL est extr\u00eamement extensible. Les utilisateurs peuvent ajouter de nouveaux types de donn\u00e9es, fonctions, op\u00e9rateurs, agr\u00e9gats, m\u00e9thodes d'indexation, et m\u00eame des langages de proc\u00e9dures.","title":"Description"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#exemple","text":"CREATE FUNCTION add_integers(a INTEGER, b INTEGER) RETURNS INTEGER AS $$ BEGIN RETURN a + b; END; $$ LANGUAGE plpgsql;","title":"Exemple"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#2-conformite-aux-standards-sql","text":"","title":"2. Conformit\u00e9 aux standards SQL"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_1","text":"PostgreSQL est tr\u00e8s conforme aux standards SQL, ce qui facilite la portabilit\u00e9 des applications entre diff\u00e9rents SGBD.","title":"Description"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#exemple_1","text":"PostgreSQL supporte les fonctionnalit\u00e9s avanc\u00e9es de SQL comme les sous-requ\u00eates, les jointures complexes, les vues mat\u00e9rialis\u00e9es, etc.","title":"Exemple"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#3-transactions-acid","text":"","title":"3. Transactions ACID"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_2","text":"PostgreSQL assure la fiabilit\u00e9 des transactions avec des propri\u00e9t\u00e9s d'atomicit\u00e9, de coh\u00e9rence, d'isolation et de durabilit\u00e9 (ACID).","title":"Description"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#exemple_2","text":"BEGIN; UPDATE comptes SET solde = solde - 100 WHERE id = 1; UPDATE comptes SET solde = solde + 100 WHERE id = 2; COMMIT;","title":"Exemple"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#4-indexation-avancee","text":"","title":"4. Indexation avanc\u00e9e"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_3","text":"PostgreSQL offre plusieurs types d'index (B-tree, Hash, GiST, SP-GiST, GIN, BRIN) pour am\u00e9liorer les performances des requ\u00eates.","title":"Description"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#exemple_3","text":"CREATE INDEX idx_gin ON documents USING GIN (contenu);","title":"Exemple"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#5-securite","text":"","title":"5. S\u00e9curit\u00e9"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_4","text":"PostgreSQL inclut des fonctionnalit\u00e9s de s\u00e9curit\u00e9 avanc\u00e9es comme l'authentification SSL, le chiffrement des donn\u00e9es, et le contr\u00f4le d'acc\u00e8s bas\u00e9 sur les r\u00f4les.","title":"Description"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#exemple_4","text":"CREATE ROLE admin WITH LOGIN PASSWORD 'securepassword'; GRANT ALL PRIVILEGES ON DATABASE mydb TO admin;","title":"Exemple"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#6-support-des-requetes-complexes","text":"","title":"6. Support des requ\u00eates complexes"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_5","text":"PostgreSQL supporte les jointures complexes, les sous-requ\u00eates, les vues mat\u00e9rialis\u00e9es, les fonctions de fen\u00eatre, et plus encore.","title":"Description"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#exemple_5","text":"SELECT nom, SUM(salaire) OVER (PARTITION BY departement) AS total_salaire FROM employes;","title":"Exemple"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#7-support-des-types-de-donnees-avances","text":"","title":"7. Support des types de donn\u00e9es avanc\u00e9s"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_6","text":"PostgreSQL supporte une large gamme de types de donn\u00e9es, y compris les types g\u00e9om\u00e9triques, les types JSON, les types XML, et les types de tableau.","title":"Description"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#exemple_6","text":"CREATE TABLE documents ( id SERIAL PRIMARY KEY, contenu JSONB ); INSERT INTO documents (contenu) VALUES ('{\"titre\": \"PostgreSQL\", \"auteur\": \"John Doe\"}');","title":"Exemple"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#8-haute-disponibilite-et-replication","text":"","title":"8. Haute disponibilit\u00e9 et r\u00e9plication"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_7","text":"PostgreSQL offre des solutions robustes pour la haute disponibilit\u00e9 et la r\u00e9plication, y compris la r\u00e9plication en streaming et la r\u00e9plication logique.","title":"Description"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#exemple_7","text":"# Configuration de la r\u00e9plication en streaming primary_conninfo = 'host=primary_host port=5432 user=replicator password=securepassword'","title":"Exemple"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#9-licence-open-source-permissive","text":"","title":"9. Licence open-source permissive"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_8","text":"PostgreSQL est distribu\u00e9 sous la licence PostgreSQL, une licence open-source permissive similaire \u00e0 la licence MIT, permettant une utilisation, une modification et une distribution libres, y compris pour des applications commerciales.","title":"Description"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#conclusion","text":"PostgreSQL se distingue par sa flexibilit\u00e9, sa conformit\u00e9 aux standards, ses fonctionnalit\u00e9s avanc\u00e9es, et sa robustesse. Ces avantages en font un choix privil\u00e9gi\u00e9 pour de nombreuses entreprises et d\u00e9veloppeurs \u00e0 travers le monde, offrant une solution fiable et performante pour une large gamme d'applications. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Conclusion"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/","text":"Entreprises utilisant PostgreSQL PostgreSQL est utilis\u00e9 par de nombreuses grandes entreprises et organisations \u00e0 travers le monde pour diverses raisons, notamment sa robustesse, sa flexibilit\u00e9, sa conformit\u00e9 aux standards SQL, et son mod\u00e8le open-source. Voici quelques exemples notables : 1. Apple Utilisation Apple utilise PostgreSQL pour divers services internes et applications. Raisons Fiabilit\u00e9 et robustesse : PostgreSQL est connu pour sa stabilit\u00e9 et sa capacit\u00e9 \u00e0 g\u00e9rer de grandes quantit\u00e9s de donn\u00e9es. Conformit\u00e9 aux standards SQL : Facilite l'int\u00e9gration avec d'autres syst\u00e8mes et applications. 2. Cisco Utilisation Cisco utilise PostgreSQL pour des solutions de gestion de r\u00e9seaux et des applications de t\u00e9l\u00e9communication. Raisons Extensibilit\u00e9 : Permet de personnaliser et d'\u00e9tendre les fonctionnalit\u00e9s selon les besoins sp\u00e9cifiques. S\u00e9curit\u00e9 : Offre des fonctionnalit\u00e9s de s\u00e9curit\u00e9 avanc\u00e9es, cruciales pour les applications de t\u00e9l\u00e9communication. 3. Red Hat Utilisation Red Hat int\u00e8gre PostgreSQL dans ses solutions d'entreprise, y compris Red Hat Enterprise Linux et OpenShift. Raisons Open-source : Align\u00e9 avec la philosophie open-source de Red Hat. Support de la communaut\u00e9 : B\u00e9n\u00e9ficie d'un large soutien de la communaut\u00e9 et de contributions r\u00e9guli\u00e8res. 4. Debian Utilisation Debian utilise PostgreSQL comme SGBD par d\u00e9faut pour de nombreuses applications et services. Raisons Licence permissive : La licence PostgreSQL permet une utilisation libre et une distribution sans restrictions. Fiabilit\u00e9 : PostgreSQL est r\u00e9put\u00e9 pour sa fiabilit\u00e9 et sa performance. 5. Instagram Utilisation Instagram utilise PostgreSQL pour stocker et g\u00e9rer les donn\u00e9es des utilisateurs et des m\u00e9dias. Raisons Scalabilit\u00e9 : Capable de g\u00e9rer des millions d'utilisateurs et de transactions par jour. Performance : Offre des performances \u00e9lev\u00e9es pour les op\u00e9rations de lecture et d'\u00e9criture. 6. Spotify Utilisation Spotify utilise PostgreSQL pour g\u00e9rer les donn\u00e9es des utilisateurs, les playlists, et les recommandations musicales. Raisons Flexibilit\u00e9 : Permet de stocker des donn\u00e9es structur\u00e9es et semi-structur\u00e9es. Support des requ\u00eates complexes : Capable de g\u00e9rer des requ\u00eates SQL complexes pour les recommandations et les analyses. 7. TripAdvisor Utilisation TripAdvisor utilise PostgreSQL pour stocker et g\u00e9rer les avis des utilisateurs, les informations sur les voyages, et les donn\u00e9es des h\u00f4tels. Raisons Extensibilit\u00e9 : Permet de cr\u00e9er des types de donn\u00e9es personnalis\u00e9s et des fonctions sp\u00e9cifiques. Support des transactions ACID : Assure la fiabilit\u00e9 et la coh\u00e9rence des donn\u00e9es critiques. 8. The Guardian Utilisation The Guardian utilise PostgreSQL pour g\u00e9rer les contenus, les utilisateurs, et les donn\u00e9es analytiques. Raisons S\u00e9curit\u00e9 : Offre des fonctionnalit\u00e9s de s\u00e9curit\u00e9 avanc\u00e9es pour prot\u00e9ger les donn\u00e9es sensibles. Conformit\u00e9 aux standards SQL : Facilite l'int\u00e9gration avec d'autres syst\u00e8mes de gestion de contenu. Conclusion PostgreSQL est choisi par de nombreuses grandes entreprises pour ses nombreux avantages, notamment sa robustesse, sa flexibilit\u00e9, sa conformit\u00e9 aux standards SQL, et sa licence open-source permissive. Ces caract\u00e9ristiques en font un SGBD fiable et performant, capable de r\u00e9pondre aux besoins vari\u00e9s des entreprises modernes. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Entreprises utilisant PostgreSQL"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#entreprises-utilisant-postgresql","text":"PostgreSQL est utilis\u00e9 par de nombreuses grandes entreprises et organisations \u00e0 travers le monde pour diverses raisons, notamment sa robustesse, sa flexibilit\u00e9, sa conformit\u00e9 aux standards SQL, et son mod\u00e8le open-source. Voici quelques exemples notables :","title":"Entreprises utilisant PostgreSQL"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#1-apple","text":"","title":"1. Apple"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#utilisation","text":"Apple utilise PostgreSQL pour divers services internes et applications.","title":"Utilisation"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#raisons","text":"Fiabilit\u00e9 et robustesse : PostgreSQL est connu pour sa stabilit\u00e9 et sa capacit\u00e9 \u00e0 g\u00e9rer de grandes quantit\u00e9s de donn\u00e9es. Conformit\u00e9 aux standards SQL : Facilite l'int\u00e9gration avec d'autres syst\u00e8mes et applications.","title":"Raisons"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#2-cisco","text":"","title":"2. Cisco"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#utilisation_1","text":"Cisco utilise PostgreSQL pour des solutions de gestion de r\u00e9seaux et des applications de t\u00e9l\u00e9communication.","title":"Utilisation"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#raisons_1","text":"Extensibilit\u00e9 : Permet de personnaliser et d'\u00e9tendre les fonctionnalit\u00e9s selon les besoins sp\u00e9cifiques. S\u00e9curit\u00e9 : Offre des fonctionnalit\u00e9s de s\u00e9curit\u00e9 avanc\u00e9es, cruciales pour les applications de t\u00e9l\u00e9communication.","title":"Raisons"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#3-red-hat","text":"","title":"3. Red Hat"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#utilisation_2","text":"Red Hat int\u00e8gre PostgreSQL dans ses solutions d'entreprise, y compris Red Hat Enterprise Linux et OpenShift.","title":"Utilisation"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#raisons_2","text":"Open-source : Align\u00e9 avec la philosophie open-source de Red Hat. Support de la communaut\u00e9 : B\u00e9n\u00e9ficie d'un large soutien de la communaut\u00e9 et de contributions r\u00e9guli\u00e8res.","title":"Raisons"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#4-debian","text":"","title":"4. Debian"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#utilisation_3","text":"Debian utilise PostgreSQL comme SGBD par d\u00e9faut pour de nombreuses applications et services.","title":"Utilisation"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#raisons_3","text":"Licence permissive : La licence PostgreSQL permet une utilisation libre et une distribution sans restrictions. Fiabilit\u00e9 : PostgreSQL est r\u00e9put\u00e9 pour sa fiabilit\u00e9 et sa performance.","title":"Raisons"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#5-instagram","text":"","title":"5. Instagram"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#utilisation_4","text":"Instagram utilise PostgreSQL pour stocker et g\u00e9rer les donn\u00e9es des utilisateurs et des m\u00e9dias.","title":"Utilisation"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#raisons_4","text":"Scalabilit\u00e9 : Capable de g\u00e9rer des millions d'utilisateurs et de transactions par jour. Performance : Offre des performances \u00e9lev\u00e9es pour les op\u00e9rations de lecture et d'\u00e9criture.","title":"Raisons"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#6-spotify","text":"","title":"6. Spotify"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#utilisation_5","text":"Spotify utilise PostgreSQL pour g\u00e9rer les donn\u00e9es des utilisateurs, les playlists, et les recommandations musicales.","title":"Utilisation"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#raisons_5","text":"Flexibilit\u00e9 : Permet de stocker des donn\u00e9es structur\u00e9es et semi-structur\u00e9es. Support des requ\u00eates complexes : Capable de g\u00e9rer des requ\u00eates SQL complexes pour les recommandations et les analyses.","title":"Raisons"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#7-tripadvisor","text":"","title":"7. TripAdvisor"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#utilisation_6","text":"TripAdvisor utilise PostgreSQL pour stocker et g\u00e9rer les avis des utilisateurs, les informations sur les voyages, et les donn\u00e9es des h\u00f4tels.","title":"Utilisation"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#raisons_6","text":"Extensibilit\u00e9 : Permet de cr\u00e9er des types de donn\u00e9es personnalis\u00e9s et des fonctions sp\u00e9cifiques. Support des transactions ACID : Assure la fiabilit\u00e9 et la coh\u00e9rence des donn\u00e9es critiques.","title":"Raisons"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#8-the-guardian","text":"","title":"8. The Guardian"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#utilisation_7","text":"The Guardian utilise PostgreSQL pour g\u00e9rer les contenus, les utilisateurs, et les donn\u00e9es analytiques.","title":"Utilisation"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#raisons_7","text":"S\u00e9curit\u00e9 : Offre des fonctionnalit\u00e9s de s\u00e9curit\u00e9 avanc\u00e9es pour prot\u00e9ger les donn\u00e9es sensibles. Conformit\u00e9 aux standards SQL : Facilite l'int\u00e9gration avec d'autres syst\u00e8mes de gestion de contenu.","title":"Raisons"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#conclusion","text":"PostgreSQL est choisi par de nombreuses grandes entreprises pour ses nombreux avantages, notamment sa robustesse, sa flexibilit\u00e9, sa conformit\u00e9 aux standards SQL, et sa licence open-source permissive. Ces caract\u00e9ristiques en font un SGBD fiable et performant, capable de r\u00e9pondre aux besoins vari\u00e9s des entreprises modernes. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Conclusion"},{"location":"1.%20Introduction/PostgreSQL/04-Configuration/","text":"Configuration de PostgreSQL Pour Windows/Mac Allez sur T\u00e9l\u00e9chargement PostgreSQL pour t\u00e9l\u00e9charger le SGBD PostgreSQL. Allez sur Installation de PostgreSQL et suivez les instructions pour l'installer. Cela installera le serveur de base de donn\u00e9es et quelques autres outils pour g\u00e9rer les bases de donn\u00e9es. Le plus important pour l'instant, la commande psql et l'application PgAdmin seront install\u00e9s en m\u00eame temps que le serveur. N'oubliez pas de saisir un mot de passe pour l'utilisateur postgres. Si cela ne demande pas de mot de passe, il devra \u00eatre d\u00e9fini depuis la ligne de commande. Vous devrez utiliser la commande psql pour changer le mot de passe de l'utilisateur postgres . Sinon, il faudra recommencer l'installation. Pour Linux Suivez ce guide pour installer PostgreSQL sur Ubuntu : PostgreSQL sur Ubuntu . La proc\u00e9dure est tr\u00e8s similaire pour d'autres distributions de Linux. Installez PgAdmin depuis ici , ou par le gestionnaire de paquets de votre distribution. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Configuration de PostgreSQL"},{"location":"1.%20Introduction/PostgreSQL/04-Configuration/#configuration-de-postgresql","text":"","title":"Configuration de PostgreSQL"},{"location":"1.%20Introduction/PostgreSQL/04-Configuration/#pour-windowsmac","text":"Allez sur T\u00e9l\u00e9chargement PostgreSQL pour t\u00e9l\u00e9charger le SGBD PostgreSQL. Allez sur Installation de PostgreSQL et suivez les instructions pour l'installer. Cela installera le serveur de base de donn\u00e9es et quelques autres outils pour g\u00e9rer les bases de donn\u00e9es. Le plus important pour l'instant, la commande psql et l'application PgAdmin seront install\u00e9s en m\u00eame temps que le serveur. N'oubliez pas de saisir un mot de passe pour l'utilisateur postgres. Si cela ne demande pas de mot de passe, il devra \u00eatre d\u00e9fini depuis la ligne de commande. Vous devrez utiliser la commande psql pour changer le mot de passe de l'utilisateur postgres . Sinon, il faudra recommencer l'installation.","title":"Pour Windows/Mac"},{"location":"1.%20Introduction/PostgreSQL/04-Configuration/#pour-linux","text":"Suivez ce guide pour installer PostgreSQL sur Ubuntu : PostgreSQL sur Ubuntu . La proc\u00e9dure est tr\u00e8s similaire pour d'autres distributions de Linux. Installez PgAdmin depuis ici , ou par le gestionnaire de paquets de votre distribution. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Pour Linux"},{"location":"2.%20Le%20mod%C3%A8le%20relationnel/01-Pr%C3%A9sentation/","text":"Pr\u00e9sentation Le mod\u00e8le relationnel est un cadre conceptuel pour organiser et g\u00e9rer des donn\u00e9es sous forme de tables, \u00e9galement appel\u00e9es relations. Ce mod\u00e8le a \u00e9t\u00e9 introduit par Edgar F. Codd en 1970 et est devenu la base des syst\u00e8mes de gestion de bases de donn\u00e9es relationnelles (SGBDR), tels que PostgreSQL. Dans ce mod\u00e8le, les donn\u00e9es sont repr\u00e9sent\u00e9es par des tuples (lignes) dans des relations (tables), et les op\u00e9rations sur les donn\u00e9es sont effectu\u00e9es \u00e0 l'aide d'un langage de requ\u00eate structur\u00e9 comme SQL (Structured Query Language). Lexique Relation (Table) : Une relation est une table \u00e0 deux dimensions compos\u00e9e de lignes et de colonnes. Chaque table repr\u00e9sente une entit\u00e9 ou un concept du monde r\u00e9el. Attribut (Colonne) : Un attribut est une colonne dans une table. Chaque attribut a un nom et un type de donn\u00e9es (par exemple, entier, texte, date). Tuple (Ligne) : Un tuple est une ligne dans une table. Chaque tuple repr\u00e9sente un enregistrement unique d'une entit\u00e9. Domaine : Un domaine est l'ensemble des valeurs possibles qu'un attribut peut prendre. Par exemple, le domaine d'un attribut \"\u00e2ge\" pourrait \u00eatre les entiers de 0 \u00e0 120. Cl\u00e9 Primaire : Une cl\u00e9 primaire est un attribut ou un ensemble d'attributs qui identifie de mani\u00e8re unique chaque tuple dans une relation. Par exemple, un num\u00e9ro de s\u00e9curit\u00e9 sociale peut \u00eatre une cl\u00e9 primaire pour une table de personnes. Cl\u00e9 \u00c9trang\u00e8re : Une cl\u00e9 \u00e9trang\u00e8re est un attribut ou un ensemble d'attributs dans une table qui fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire d'une autre table. Cela cr\u00e9e une relation entre les deux tables. Sch\u00e9ma de Relation : Le sch\u00e9ma de relation est la structure ou la d\u00e9finition d'une relation, incluant les noms des attributs et leurs types de donn\u00e9es. Int\u00e9grit\u00e9 R\u00e9f\u00e9rentielle : L'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle est une contrainte qui assure que les valeurs des cl\u00e9s \u00e9trang\u00e8res correspondent \u00e0 des valeurs existantes de cl\u00e9s primaires dans les tables r\u00e9f\u00e9renc\u00e9es. Exemples Exemple 1 : Table des \u00c9tudiants ID_\u00c9tudiant Nom Pr\u00e9nom \u00c2ge D\u00e9partement 1 Dupont Jean 20 Informatique 2 Martin Sophie 22 Math\u00e9matiques 3 Durand Pierre 21 Physique Relation : \u00c9tudiants Attributs : ID_\u00c9tudiant , Nom , Pr\u00e9nom , \u00c2ge , D\u00e9partement Cl\u00e9 Primaire : ID_\u00c9tudiant Exemple 2 : Table des Cours Code_Cours Nom_Cours Cr\u00e9dit CS101 Introduction \u00e0 CS 3 MA101 Calcul I 4 PH101 Physique G\u00e9n\u00e9rale 4 Relation : Cours Attributs : Code_Cours , Nom_Cours , Cr\u00e9dit Cl\u00e9 Primaire : Code_Cours Exemple 3 : Table des Inscriptions ID_\u00c9tudiant Code_Cours 1 CS101 2 MA101 3 PH101 1 MA101 Relation : Inscriptions Attributs : ID_\u00c9tudiant , Code_Cours Cl\u00e9 Primaire : (ID_\u00c9tudiant, Code_Cours) Cl\u00e9 \u00c9trang\u00e8re : ID_\u00c9tudiant r\u00e9f\u00e8re \u00e0 \u00c9tudiants(ID_\u00c9tudiant) , Code_Cours r\u00e9f\u00e8re \u00e0 Cours(Code_Cours) Ces exemples montrent comment les donn\u00e9es peuvent \u00eatre organis\u00e9es et interconnect\u00e9es dans le mod\u00e8le relationnel, facilitant ainsi la gestion et l'interrogation des informations de mani\u00e8re efficace et coh\u00e9rente. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Pr\u00e9sentation"},{"location":"2.%20Le%20mod%C3%A8le%20relationnel/01-Pr%C3%A9sentation/#presentation","text":"Le mod\u00e8le relationnel est un cadre conceptuel pour organiser et g\u00e9rer des donn\u00e9es sous forme de tables, \u00e9galement appel\u00e9es relations. Ce mod\u00e8le a \u00e9t\u00e9 introduit par Edgar F. Codd en 1970 et est devenu la base des syst\u00e8mes de gestion de bases de donn\u00e9es relationnelles (SGBDR), tels que PostgreSQL. Dans ce mod\u00e8le, les donn\u00e9es sont repr\u00e9sent\u00e9es par des tuples (lignes) dans des relations (tables), et les op\u00e9rations sur les donn\u00e9es sont effectu\u00e9es \u00e0 l'aide d'un langage de requ\u00eate structur\u00e9 comme SQL (Structured Query Language).","title":"Pr\u00e9sentation"},{"location":"2.%20Le%20mod%C3%A8le%20relationnel/01-Pr%C3%A9sentation/#lexique","text":"Relation (Table) : Une relation est une table \u00e0 deux dimensions compos\u00e9e de lignes et de colonnes. Chaque table repr\u00e9sente une entit\u00e9 ou un concept du monde r\u00e9el. Attribut (Colonne) : Un attribut est une colonne dans une table. Chaque attribut a un nom et un type de donn\u00e9es (par exemple, entier, texte, date). Tuple (Ligne) : Un tuple est une ligne dans une table. Chaque tuple repr\u00e9sente un enregistrement unique d'une entit\u00e9. Domaine : Un domaine est l'ensemble des valeurs possibles qu'un attribut peut prendre. Par exemple, le domaine d'un attribut \"\u00e2ge\" pourrait \u00eatre les entiers de 0 \u00e0 120. Cl\u00e9 Primaire : Une cl\u00e9 primaire est un attribut ou un ensemble d'attributs qui identifie de mani\u00e8re unique chaque tuple dans une relation. Par exemple, un num\u00e9ro de s\u00e9curit\u00e9 sociale peut \u00eatre une cl\u00e9 primaire pour une table de personnes. Cl\u00e9 \u00c9trang\u00e8re : Une cl\u00e9 \u00e9trang\u00e8re est un attribut ou un ensemble d'attributs dans une table qui fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire d'une autre table. Cela cr\u00e9e une relation entre les deux tables. Sch\u00e9ma de Relation : Le sch\u00e9ma de relation est la structure ou la d\u00e9finition d'une relation, incluant les noms des attributs et leurs types de donn\u00e9es. Int\u00e9grit\u00e9 R\u00e9f\u00e9rentielle : L'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle est une contrainte qui assure que les valeurs des cl\u00e9s \u00e9trang\u00e8res correspondent \u00e0 des valeurs existantes de cl\u00e9s primaires dans les tables r\u00e9f\u00e9renc\u00e9es.","title":"Lexique"},{"location":"2.%20Le%20mod%C3%A8le%20relationnel/01-Pr%C3%A9sentation/#exemples","text":"","title":"Exemples"},{"location":"2.%20Le%20mod%C3%A8le%20relationnel/01-Pr%C3%A9sentation/#exemple-1-table-des-etudiants","text":"ID_\u00c9tudiant Nom Pr\u00e9nom \u00c2ge D\u00e9partement 1 Dupont Jean 20 Informatique 2 Martin Sophie 22 Math\u00e9matiques 3 Durand Pierre 21 Physique Relation : \u00c9tudiants Attributs : ID_\u00c9tudiant , Nom , Pr\u00e9nom , \u00c2ge , D\u00e9partement Cl\u00e9 Primaire : ID_\u00c9tudiant","title":"Exemple 1 : Table des \u00c9tudiants"},{"location":"2.%20Le%20mod%C3%A8le%20relationnel/01-Pr%C3%A9sentation/#exemple-2-table-des-cours","text":"Code_Cours Nom_Cours Cr\u00e9dit CS101 Introduction \u00e0 CS 3 MA101 Calcul I 4 PH101 Physique G\u00e9n\u00e9rale 4 Relation : Cours Attributs : Code_Cours , Nom_Cours , Cr\u00e9dit Cl\u00e9 Primaire : Code_Cours","title":"Exemple 2 : Table des Cours"},{"location":"2.%20Le%20mod%C3%A8le%20relationnel/01-Pr%C3%A9sentation/#exemple-3-table-des-inscriptions","text":"ID_\u00c9tudiant Code_Cours 1 CS101 2 MA101 3 PH101 1 MA101 Relation : Inscriptions Attributs : ID_\u00c9tudiant , Code_Cours Cl\u00e9 Primaire : (ID_\u00c9tudiant, Code_Cours) Cl\u00e9 \u00c9trang\u00e8re : ID_\u00c9tudiant r\u00e9f\u00e8re \u00e0 \u00c9tudiants(ID_\u00c9tudiant) , Code_Cours r\u00e9f\u00e8re \u00e0 Cours(Code_Cours) Ces exemples montrent comment les donn\u00e9es peuvent \u00eatre organis\u00e9es et interconnect\u00e9es dans le mod\u00e8le relationnel, facilitant ainsi la gestion et l'interrogation des informations de mani\u00e8re efficace et coh\u00e9rente. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Exemple 3 : Table des Inscriptions"},{"location":"2.%20Le%20mod%C3%A8le%20relationnel/02-DEA/","text":"Introduction aux Diagrammes Entit\u00e9-Association Un diagramme entit\u00e9-association (E-A) est un outil graphique utilis\u00e9 pour mod\u00e9liser les donn\u00e9es et les associations entre elles dans un syst\u00e8me d'information. Il est couramment utilis\u00e9 dans la conception de bases de donn\u00e9es pour repr\u00e9senter les entit\u00e9s, leurs attributs et les associations entre ces entit\u00e9s. Ce type de diagramme aide \u00e0 visualiser la structure de la base de donn\u00e9es et \u00e0 comprendre comment les donn\u00e9es sont interconnect\u00e9es. Composants d'un Diagramme Entit\u00e9-Association Entit\u00e9s : Repr\u00e9sent\u00e9es par des entitys, les entit\u00e9s sont des objets ou concepts du monde r\u00e9el ayant une existence ind\u00e9pendante. Par exemple, dans une base de donn\u00e9es universitaire, des entit\u00e9s peuvent \u00eatre \u00c9tudiant, Cours, et Instructeur. Attributs : Repr\u00e9sent\u00e9s par des ovales, les attributs sont des propri\u00e9t\u00e9s ou caract\u00e9ristiques des entit\u00e9s. Par exemple, un \u00c9tudiant peut avoir des attributs comme ID_\u00c9tudiant, Nom, et Date_Naissance. Associations : Repr\u00e9sent\u00e9es par des losanges, les associations d\u00e9crivent comment les entit\u00e9s sont li\u00e9es entre elles. Par exemple, une relation Inscription peut lier les entit\u00e9s \u00c9tudiant et Cours. Cardinalit\u00e9 : La cardinalit\u00e9 sp\u00e9cifie le nombre d'occurrences d'une entit\u00e9 qui peuvent \u00eatre associ\u00e9es \u00e0 une occurrence d'une autre entit\u00e9. Les types de cardinalit\u00e9 courants sont : Un \u00e0 Un (1:1) Un \u00e0 Plusieurs (1:N) Plusieurs \u00e0 Plusieurs (M:N) Exemple de Diagramme Entit\u00e9-Association Voici un exemple de diagramme E-A pour une base de donn\u00e9es universitaire, au format PlantUML. Code PlantUML @startuml entity \u00c9tudiant { +ID_\u00c9tudiant : int +Nom : string +Pr\u00e9nom : string +Date_Naissance : date } entity Cours { +Code_Cours : string +Nom_Cours : string +Cr\u00e9dits : int } entity Instructeur { +ID_Instructeur : int +Nom : string +Email : string } entity Inscription { +ID_\u00c9tudiant : int +Code_Cours : string +Date_Inscription : date } entity Offre_Cours { +ID_Offre : int +Code_Cours : string +ID_Instructeur : int +Semestre : string +Ann\u00e9e : int } \u00c9tudiant \"1\" -- \"0..*\" Inscription : inscrit Cours \"1\" -- \"0..*\" Inscription : concerne Instructeur \"1\" -- \"0..*\" Offre_Cours : enseigne Cours \"1\" -- \"0..*\" Offre_Cours : offert @enduml Explication du Diagramme \u00c9tudiant : Entit\u00e9 repr\u00e9sentant un \u00e9tudiant, avec des attributs comme ID_\u00c9tudiant, Nom, Pr\u00e9nom, et Date_Naissance. Cours : Entit\u00e9 repr\u00e9sentant un cours, avec des attributs comme Code_Cours, Nom_Cours, et Cr\u00e9dits. Instructeur : Entit\u00e9 repr\u00e9sentant un instructeur, avec des attributs comme ID_Instructeur, Nom, et Email. Inscription : Relation entre \u00c9tudiant et Cours, avec des attributs comme ID_\u00c9tudiant, Code_Cours, et Date_Inscription. Offre_Cours : Relation entre Cours et Instructeur, avec des attributs comme ID_Offre, Code_Cours, ID_Instructeur, Semestre, et Ann\u00e9e. Conclusion Les diagrammes entit\u00e9-association sont des outils pr\u00e9cieux pour la mod\u00e9lisation des bases de donn\u00e9es. Ils permettent de repr\u00e9senter visuellement les entit\u00e9s, leurs attributs et les Associations entre elles, facilitant ainsi la compr\u00e9hension et la conception de la structure de la base de donn\u00e9es. Utiliser des outils comme PlantUML pour cr\u00e9er ces diagrammes peut aider \u00e0 standardiser et \u00e0 automatiser le processus de mod\u00e9lisation. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Introduction aux Diagrammes Entit\u00e9-Association"},{"location":"2.%20Le%20mod%C3%A8le%20relationnel/02-DEA/#introduction-aux-diagrammes-entite-association","text":"Un diagramme entit\u00e9-association (E-A) est un outil graphique utilis\u00e9 pour mod\u00e9liser les donn\u00e9es et les associations entre elles dans un syst\u00e8me d'information. Il est couramment utilis\u00e9 dans la conception de bases de donn\u00e9es pour repr\u00e9senter les entit\u00e9s, leurs attributs et les associations entre ces entit\u00e9s. Ce type de diagramme aide \u00e0 visualiser la structure de la base de donn\u00e9es et \u00e0 comprendre comment les donn\u00e9es sont interconnect\u00e9es.","title":"Introduction aux Diagrammes Entit\u00e9-Association"},{"location":"2.%20Le%20mod%C3%A8le%20relationnel/02-DEA/#composants-dun-diagramme-entite-association","text":"Entit\u00e9s : Repr\u00e9sent\u00e9es par des entitys, les entit\u00e9s sont des objets ou concepts du monde r\u00e9el ayant une existence ind\u00e9pendante. Par exemple, dans une base de donn\u00e9es universitaire, des entit\u00e9s peuvent \u00eatre \u00c9tudiant, Cours, et Instructeur. Attributs : Repr\u00e9sent\u00e9s par des ovales, les attributs sont des propri\u00e9t\u00e9s ou caract\u00e9ristiques des entit\u00e9s. Par exemple, un \u00c9tudiant peut avoir des attributs comme ID_\u00c9tudiant, Nom, et Date_Naissance. Associations : Repr\u00e9sent\u00e9es par des losanges, les associations d\u00e9crivent comment les entit\u00e9s sont li\u00e9es entre elles. Par exemple, une relation Inscription peut lier les entit\u00e9s \u00c9tudiant et Cours. Cardinalit\u00e9 : La cardinalit\u00e9 sp\u00e9cifie le nombre d'occurrences d'une entit\u00e9 qui peuvent \u00eatre associ\u00e9es \u00e0 une occurrence d'une autre entit\u00e9. Les types de cardinalit\u00e9 courants sont : Un \u00e0 Un (1:1) Un \u00e0 Plusieurs (1:N) Plusieurs \u00e0 Plusieurs (M:N)","title":"Composants d'un Diagramme Entit\u00e9-Association"},{"location":"2.%20Le%20mod%C3%A8le%20relationnel/02-DEA/#exemple-de-diagramme-entite-association","text":"Voici un exemple de diagramme E-A pour une base de donn\u00e9es universitaire, au format PlantUML. Code PlantUML @startuml entity \u00c9tudiant { +ID_\u00c9tudiant : int +Nom : string +Pr\u00e9nom : string +Date_Naissance : date } entity Cours { +Code_Cours : string +Nom_Cours : string +Cr\u00e9dits : int } entity Instructeur { +ID_Instructeur : int +Nom : string +Email : string } entity Inscription { +ID_\u00c9tudiant : int +Code_Cours : string +Date_Inscription : date } entity Offre_Cours { +ID_Offre : int +Code_Cours : string +ID_Instructeur : int +Semestre : string +Ann\u00e9e : int } \u00c9tudiant \"1\" -- \"0..*\" Inscription : inscrit Cours \"1\" -- \"0..*\" Inscription : concerne Instructeur \"1\" -- \"0..*\" Offre_Cours : enseigne Cours \"1\" -- \"0..*\" Offre_Cours : offert @enduml","title":"Exemple de Diagramme Entit\u00e9-Association"},{"location":"2.%20Le%20mod%C3%A8le%20relationnel/02-DEA/#explication-du-diagramme","text":"\u00c9tudiant : Entit\u00e9 repr\u00e9sentant un \u00e9tudiant, avec des attributs comme ID_\u00c9tudiant, Nom, Pr\u00e9nom, et Date_Naissance. Cours : Entit\u00e9 repr\u00e9sentant un cours, avec des attributs comme Code_Cours, Nom_Cours, et Cr\u00e9dits. Instructeur : Entit\u00e9 repr\u00e9sentant un instructeur, avec des attributs comme ID_Instructeur, Nom, et Email. Inscription : Relation entre \u00c9tudiant et Cours, avec des attributs comme ID_\u00c9tudiant, Code_Cours, et Date_Inscription. Offre_Cours : Relation entre Cours et Instructeur, avec des attributs comme ID_Offre, Code_Cours, ID_Instructeur, Semestre, et Ann\u00e9e.","title":"Explication du Diagramme"},{"location":"2.%20Le%20mod%C3%A8le%20relationnel/02-DEA/#conclusion","text":"Les diagrammes entit\u00e9-association sont des outils pr\u00e9cieux pour la mod\u00e9lisation des bases de donn\u00e9es. Ils permettent de repr\u00e9senter visuellement les entit\u00e9s, leurs attributs et les Associations entre elles, facilitant ainsi la compr\u00e9hension et la conception de la structure de la base de donn\u00e9es. Utiliser des outils comme PlantUML pour cr\u00e9er ces diagrammes peut aider \u00e0 standardiser et \u00e0 automatiser le processus de mod\u00e9lisation. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Conclusion"},{"location":"3.%20SQL/01-intro/","text":"1 - Introduction \u00e0 SQL SQL (Structured Query Language) est un langage de programmation standardis\u00e9 utilis\u00e9 pour g\u00e9rer et manipuler des bases de donn\u00e9es relationnelles. Il permet d'effectuer diverses op\u00e9rations telles que la cr\u00e9ation, la modification, la suppression et la r\u00e9cup\u00e9ration de donn\u00e9es dans une base de donn\u00e9es. SQL est essentiel pour interagir avec les syst\u00e8mes de gestion de bases de donn\u00e9es relationnelles (SGBDR) comme PostgreSQL, MySQL, Oracle, et SQL Server. Historique de SQL SQL a \u00e9t\u00e9 d\u00e9velopp\u00e9 dans les ann\u00e9es 1970 par IBM dans le cadre du projet System R, qui visait \u00e0 d\u00e9montrer la faisabilit\u00e9 des bases de donn\u00e9es relationnelles. Le langage a \u00e9t\u00e9 initialement appel\u00e9 SEQUEL (Structured English Query Language) avant d'\u00eatre renomm\u00e9 SQL. En 1986, l'American National Standards Institute (ANSI) a publi\u00e9 la premi\u00e8re norme SQL, suivie par l'International Organization for Standardization (ISO) en 1987. Depuis lors, SQL a \u00e9volu\u00e9 avec plusieurs r\u00e9visions et extensions pour r\u00e9pondre aux besoins croissants des bases de donn\u00e9es modernes. Survol des Standards ISO Les standards ISO pour SQL d\u00e9finissent les sp\u00e9cifications et les fonctionnalit\u00e9s du langage afin d'assurer l'interop\u00e9rabilit\u00e9 entre diff\u00e9rents syst\u00e8mes de bases de donn\u00e9es. Voici quelques-unes des versions cl\u00e9s : SQL-86 : La premi\u00e8re norme SQL publi\u00e9e par ANSI en 1986 et adopt\u00e9e par ISO en 1987. SQL-89 : Une r\u00e9vision mineure de SQL-86, introduisant quelques am\u00e9liorations et corrections. SQL-92 : Une version majeure qui a ajout\u00e9 de nombreuses fonctionnalit\u00e9s, y compris les sous-requ\u00eates, les jointures externes et les contraintes d'int\u00e9grit\u00e9. SQL:1999 (SQL3) : Introduction des types de donn\u00e9es utilisateur d\u00e9finis, des proc\u00e9dures stock\u00e9es, et du langage de requ\u00eate r\u00e9cursif. SQL:2003 : Ajout des fonctions XML, des tables d\u00e9riv\u00e9es et des types de donn\u00e9es fen\u00eatr\u00e9s. SQL:2008 : Am\u00e9liorations des fonctionnalit\u00e9s existantes et ajout de nouvelles, telles que les expressions de table communes (CTE). SQL:2011 : Introduction des fonctionnalit\u00e9s de traitement des donn\u00e9es temporelles. SQL:2016 : Ajout de fonctionnalit\u00e9s JSON et de nouvelles extensions pour les types de donn\u00e9es g\u00e9ospatiales. Principes d'un Langage Non-Procedural SQL est un langage non-proc\u00e9dural, ce qui signifie que l'utilisateur sp\u00e9cifie ce qu'il veut obtenir sans d\u00e9tailler comment le syst\u00e8me doit l'obtenir. Voici quelques principes cl\u00e9s : D\u00e9claration des Intentions : En SQL, vous d\u00e9clarez vos intentions en termes de r\u00e9sultats souhait\u00e9s. Par exemple, une requ\u00eate SELECT indique quelles colonnes et quelles lignes vous voulez r\u00e9cup\u00e9rer, mais pas comment les r\u00e9cup\u00e9rer. Abstraction de l'Impl\u00e9mentation : Les d\u00e9tails de l'impl\u00e9mentation, comme les algorithmes de tri ou les chemins d'acc\u00e8s aux donn\u00e9es, sont g\u00e9r\u00e9s par le SGBDR. L'utilisateur n'a pas besoin de conna\u00eetre ces d\u00e9tails. Optimisation Automatique : Les SGBDR optimisent automatiquement les requ\u00eates pour am\u00e9liorer les performances. L'utilisateur se concentre sur la logique de la requ\u00eate plut\u00f4t que sur l'optimisation. Facilit\u00e9 d'Utilisation : Le langage non-proc\u00e9dural est g\u00e9n\u00e9ralement plus facile \u00e0 apprendre et \u00e0 utiliser pour les utilisateurs finaux, car il se concentre sur les r\u00e9sultats plut\u00f4t que sur les processus. Portabilit\u00e9 : Les requ\u00eates SQL sont portables entre diff\u00e9rents syst\u00e8mes de bases de donn\u00e9es, tant qu'elles respectent les standards ISO, ce qui facilite la migration et l'interop\u00e9rabilit\u00e9. Exemple de Requ\u00eate SQL SELECT Nom, Pr\u00e9nom, \u00c2ge FROM \u00c9tudiants WHERE D\u00e9partement = 'Informatique'; Cette requ\u00eate s\u00e9lectionne les colonnes Nom, Pr\u00e9nom et \u00c2ge de la table \u00c9tudiants pour les \u00e9tudiants appartenant au d\u00e9partement d'Informatique, sans sp\u00e9cifier comment le SGBDR doit acc\u00e9der aux donn\u00e9es ou les trier. En r\u00e9sum\u00e9, SQL est un langage puissant et flexible pour interagir avec les bases de donn\u00e9es relationnelles, offrant une abstraction qui permet aux utilisateurs de se concentrer sur les r\u00e9sultats souhait\u00e9s plut\u00f4t que sur les d\u00e9tails d'impl\u00e9mentation. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"1 - Introduction \u00e0 SQL"},{"location":"3.%20SQL/01-intro/#1-introduction-a-sql","text":"SQL (Structured Query Language) est un langage de programmation standardis\u00e9 utilis\u00e9 pour g\u00e9rer et manipuler des bases de donn\u00e9es relationnelles. Il permet d'effectuer diverses op\u00e9rations telles que la cr\u00e9ation, la modification, la suppression et la r\u00e9cup\u00e9ration de donn\u00e9es dans une base de donn\u00e9es. SQL est essentiel pour interagir avec les syst\u00e8mes de gestion de bases de donn\u00e9es relationnelles (SGBDR) comme PostgreSQL, MySQL, Oracle, et SQL Server.","title":"1 - Introduction \u00e0 SQL"},{"location":"3.%20SQL/01-intro/#historique-de-sql","text":"SQL a \u00e9t\u00e9 d\u00e9velopp\u00e9 dans les ann\u00e9es 1970 par IBM dans le cadre du projet System R, qui visait \u00e0 d\u00e9montrer la faisabilit\u00e9 des bases de donn\u00e9es relationnelles. Le langage a \u00e9t\u00e9 initialement appel\u00e9 SEQUEL (Structured English Query Language) avant d'\u00eatre renomm\u00e9 SQL. En 1986, l'American National Standards Institute (ANSI) a publi\u00e9 la premi\u00e8re norme SQL, suivie par l'International Organization for Standardization (ISO) en 1987. Depuis lors, SQL a \u00e9volu\u00e9 avec plusieurs r\u00e9visions et extensions pour r\u00e9pondre aux besoins croissants des bases de donn\u00e9es modernes.","title":"Historique de SQL"},{"location":"3.%20SQL/01-intro/#survol-des-standards-iso","text":"Les standards ISO pour SQL d\u00e9finissent les sp\u00e9cifications et les fonctionnalit\u00e9s du langage afin d'assurer l'interop\u00e9rabilit\u00e9 entre diff\u00e9rents syst\u00e8mes de bases de donn\u00e9es. Voici quelques-unes des versions cl\u00e9s : SQL-86 : La premi\u00e8re norme SQL publi\u00e9e par ANSI en 1986 et adopt\u00e9e par ISO en 1987. SQL-89 : Une r\u00e9vision mineure de SQL-86, introduisant quelques am\u00e9liorations et corrections. SQL-92 : Une version majeure qui a ajout\u00e9 de nombreuses fonctionnalit\u00e9s, y compris les sous-requ\u00eates, les jointures externes et les contraintes d'int\u00e9grit\u00e9. SQL:1999 (SQL3) : Introduction des types de donn\u00e9es utilisateur d\u00e9finis, des proc\u00e9dures stock\u00e9es, et du langage de requ\u00eate r\u00e9cursif. SQL:2003 : Ajout des fonctions XML, des tables d\u00e9riv\u00e9es et des types de donn\u00e9es fen\u00eatr\u00e9s. SQL:2008 : Am\u00e9liorations des fonctionnalit\u00e9s existantes et ajout de nouvelles, telles que les expressions de table communes (CTE). SQL:2011 : Introduction des fonctionnalit\u00e9s de traitement des donn\u00e9es temporelles. SQL:2016 : Ajout de fonctionnalit\u00e9s JSON et de nouvelles extensions pour les types de donn\u00e9es g\u00e9ospatiales.","title":"Survol des Standards ISO"},{"location":"3.%20SQL/01-intro/#principes-dun-langage-non-procedural","text":"SQL est un langage non-proc\u00e9dural, ce qui signifie que l'utilisateur sp\u00e9cifie ce qu'il veut obtenir sans d\u00e9tailler comment le syst\u00e8me doit l'obtenir. Voici quelques principes cl\u00e9s : D\u00e9claration des Intentions : En SQL, vous d\u00e9clarez vos intentions en termes de r\u00e9sultats souhait\u00e9s. Par exemple, une requ\u00eate SELECT indique quelles colonnes et quelles lignes vous voulez r\u00e9cup\u00e9rer, mais pas comment les r\u00e9cup\u00e9rer. Abstraction de l'Impl\u00e9mentation : Les d\u00e9tails de l'impl\u00e9mentation, comme les algorithmes de tri ou les chemins d'acc\u00e8s aux donn\u00e9es, sont g\u00e9r\u00e9s par le SGBDR. L'utilisateur n'a pas besoin de conna\u00eetre ces d\u00e9tails. Optimisation Automatique : Les SGBDR optimisent automatiquement les requ\u00eates pour am\u00e9liorer les performances. L'utilisateur se concentre sur la logique de la requ\u00eate plut\u00f4t que sur l'optimisation. Facilit\u00e9 d'Utilisation : Le langage non-proc\u00e9dural est g\u00e9n\u00e9ralement plus facile \u00e0 apprendre et \u00e0 utiliser pour les utilisateurs finaux, car il se concentre sur les r\u00e9sultats plut\u00f4t que sur les processus. Portabilit\u00e9 : Les requ\u00eates SQL sont portables entre diff\u00e9rents syst\u00e8mes de bases de donn\u00e9es, tant qu'elles respectent les standards ISO, ce qui facilite la migration et l'interop\u00e9rabilit\u00e9.","title":"Principes d'un Langage Non-Procedural"},{"location":"3.%20SQL/01-intro/#exemple-de-requete-sql","text":"SELECT Nom, Pr\u00e9nom, \u00c2ge FROM \u00c9tudiants WHERE D\u00e9partement = 'Informatique'; Cette requ\u00eate s\u00e9lectionne les colonnes Nom, Pr\u00e9nom et \u00c2ge de la table \u00c9tudiants pour les \u00e9tudiants appartenant au d\u00e9partement d'Informatique, sans sp\u00e9cifier comment le SGBDR doit acc\u00e9der aux donn\u00e9es ou les trier. En r\u00e9sum\u00e9, SQL est un langage puissant et flexible pour interagir avec les bases de donn\u00e9es relationnelles, offrant une abstraction qui permet aux utilisateurs de se concentrer sur les r\u00e9sultats souhait\u00e9s plut\u00f4t que sur les d\u00e9tails d'impl\u00e9mentation. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Exemple de Requ\u00eate SQL"},{"location":"3.%20SQL/02a-bases-contacts/","text":"2a - Base de Donn\u00e9es de Contacts Pensez \u00e0 une base de donn\u00e9es de contacts sur un t\u00e9l\u00e9phone 2 tables : contact(CONTACT_ID, name, phone, address, email) call(CALL_ID, phone, date, time, contact_id*) Cr\u00e9ation de la Base de Donn\u00e9es de Contacts 1- Ex\u00e9cutez le fichier contact_create.sql pour cr\u00e9er la base de donn\u00e9es les commandes SQL incluses dans ce fichier seront expliqu\u00e9es plus tard ouvrez le fichier dans DataGrip et ex\u00e9cutez-le dans une session existante ou cr\u00e9ez une nouvelle session 2- Pour v\u00e9rifier les r\u00e9sultats, vous pouvez utiliser l'onglet Database Explorer ou ex\u00e9cuter les requ\u00eates suivantes : SELECT * FROM contacts.contact; SELECT * FROM contacts.call; 3- Pour \u00e9viter de pr\u00e9fixer les noms de tables avec le nom du sch\u00e9ma \u00e0 chaque fois, nous pouvons ex\u00e9cuter la commande suivante : SET search_path TO contacts; SELECT * FROM contact; SELECT * FROM call; Requ\u00eates sur une Seule Table 1- Trouver l'adresse email de John Doe SELECT email FROM contact WHERE name = 'John Doe'; 2- Trouver les contacts sans num\u00e9ro de t\u00e9l\u00e9phone SELECT * FROM contact WHERE phone IS NULL; 3- Trouver les contacts avec un num\u00e9ro de t\u00e9l\u00e9phone SELECT * FROM contact WHERE phone IS NOT NULL; Avec des Fonctions Agr\u00e9g\u00e9es 4- Compter le nombre de lignes dans la table call SELECT COUNT(*) FROM call; 5- Compter le nombre de lignes dans la table call avec des valeurs non nulles pour contact_id SELECT COUNT(contact_id) FROM call; 6- Compter le nombre de lignes dans la table call avec des valeurs nulles pour contact_id SELECT COUNT(*) FROM call WHERE contact_id IS NULL;","title":"2a - Base de Donn\u00e9es de Contacts"},{"location":"3.%20SQL/02a-bases-contacts/#2a-base-de-donnees-de-contacts","text":"Pensez \u00e0 une base de donn\u00e9es de contacts sur un t\u00e9l\u00e9phone 2 tables : contact(CONTACT_ID, name, phone, address, email) call(CALL_ID, phone, date, time, contact_id*)","title":"2a - Base de Donn\u00e9es de Contacts"},{"location":"3.%20SQL/02a-bases-contacts/#creation-de-la-base-de-donnees-de-contacts","text":"1- Ex\u00e9cutez le fichier contact_create.sql pour cr\u00e9er la base de donn\u00e9es les commandes SQL incluses dans ce fichier seront expliqu\u00e9es plus tard ouvrez le fichier dans DataGrip et ex\u00e9cutez-le dans une session existante ou cr\u00e9ez une nouvelle session 2- Pour v\u00e9rifier les r\u00e9sultats, vous pouvez utiliser l'onglet Database Explorer ou ex\u00e9cuter les requ\u00eates suivantes : SELECT * FROM contacts.contact; SELECT * FROM contacts.call; 3- Pour \u00e9viter de pr\u00e9fixer les noms de tables avec le nom du sch\u00e9ma \u00e0 chaque fois, nous pouvons ex\u00e9cuter la commande suivante : SET search_path TO contacts; SELECT * FROM contact; SELECT * FROM call;","title":"Cr\u00e9ation de la Base de Donn\u00e9es de Contacts"},{"location":"3.%20SQL/02a-bases-contacts/#requetes-sur-une-seule-table","text":"1- Trouver l'adresse email de John Doe SELECT email FROM contact WHERE name = 'John Doe'; 2- Trouver les contacts sans num\u00e9ro de t\u00e9l\u00e9phone SELECT * FROM contact WHERE phone IS NULL; 3- Trouver les contacts avec un num\u00e9ro de t\u00e9l\u00e9phone SELECT * FROM contact WHERE phone IS NOT NULL;","title":"Requ\u00eates sur une Seule Table"},{"location":"3.%20SQL/02a-bases-contacts/#avec-des-fonctions-agregees","text":"4- Compter le nombre de lignes dans la table call SELECT COUNT(*) FROM call; 5- Compter le nombre de lignes dans la table call avec des valeurs non nulles pour contact_id SELECT COUNT(contact_id) FROM call; 6- Compter le nombre de lignes dans la table call avec des valeurs nulles pour contact_id SELECT COUNT(*) FROM call WHERE contact_id IS NULL;","title":"Avec des Fonctions Agr\u00e9g\u00e9es"},{"location":"3.%20SQL/02b-bases-universit%C3%A9/","text":"2b - Base de Donn\u00e9es Universit\u00e9 Ex\u00e9cutez le fichier university_create.sql pour cr\u00e9er la base de donn\u00e9es Universitaire. set search_path to university; 1- Projection : choisir les colonnes \u00e0 inclure dans les r\u00e9sultats select name, email from student; 2- Supposons que l'universit\u00e9 facture 200$ par cr\u00e9dit pour un cours. Trouvez le prix pour chaque cours. - - price est un alias pour la colonne calcul\u00e9e select code, name, credits * 200 as price from course; 3- S\u00e9lection : filtrer les lignes \u00e0 inclure dans les r\u00e9sultats Conserver uniquement les offres de cours pour le semestre d'hiver 2020 select * from offering where semester = 'W' and year = 2020; 4- Tri : ordonner les instructeurs par leurs noms select iid, name, email from instructor order by name; select iid, name, email from instructor order by 2;","title":"2b - Base de Donn\u00e9es Universit\u00e9"},{"location":"3.%20SQL/02b-bases-universit%C3%A9/#2b-base-de-donnees-universite","text":"Ex\u00e9cutez le fichier university_create.sql pour cr\u00e9er la base de donn\u00e9es Universitaire. set search_path to university; 1- Projection : choisir les colonnes \u00e0 inclure dans les r\u00e9sultats select name, email from student; 2- Supposons que l'universit\u00e9 facture 200$ par cr\u00e9dit pour un cours. Trouvez le prix pour chaque cours. - - price est un alias pour la colonne calcul\u00e9e select code, name, credits * 200 as price from course; 3- S\u00e9lection : filtrer les lignes \u00e0 inclure dans les r\u00e9sultats Conserver uniquement les offres de cours pour le semestre d'hiver 2020 select * from offering where semester = 'W' and year = 2020; 4- Tri : ordonner les instructeurs par leurs noms select iid, name, email from instructor order by name; select iid, name, email from instructor order by 2;","title":"2b - Base de Donn\u00e9es Universit\u00e9"},{"location":"3.%20SQL/03a-jointures-contacts/","text":"3a - Requ\u00eates avec plus d'une table (Contacts) SET search_path TO contacts; Produit cart\u00e9sien Associer chaque ligne d'une table avec chaque ligne de l'autre table donne trop de lignes rarement utilis\u00e9 car il ne donne g\u00e9n\u00e9ralement pas d'informations utiles et il peut devenir tr\u00e8s inefficace si les tables impliqu\u00e9es sont grandes le nombre de lignes dans les r\u00e9sultats sera la multiplication du nombre de lignes dans chaque table impliqu\u00e9e SELECT * FROM call, contact; Jointure (avec produit cart\u00e9sien) Ne garder que les lignes correspondantes, en \"suivant\" la cl\u00e9 \u00e9trang\u00e8re de call \u00e0 contact ceci est l'ancienne mani\u00e8re de faire une jointure (un produit cart\u00e9sien suivi d'une condition WHERE ) SELECT * FROM call, contact WHERE call.contact_id = contact.contact_id; Jointures (avec JOIN ) Jointure Interne Une mani\u00e8re plus moderne d'exprimer une jointure en SQL il existe plusieurs types de jointures, le type le plus courant est une INNER JOIN SELECT * FROM call INNER JOIN contact ON call.contact_id = contact.contact_id; Jointure Naturelle Jointure sur des colonnes ayant les m\u00eames noms, en utilisant l'op\u00e9rateur =, et en supprimant les colonnes dupliqu\u00e9es notez que les colonnes sont dans un ordre diff\u00e9rent il n'est pas recommand\u00e9 (voire d\u00e9conseill\u00e9) d'utiliser les jointures naturelles car la condition de jointure n'est pas sp\u00e9cifi\u00e9e et pourrait avoir des cons\u00e9quences difficiles \u00e0 pr\u00e9voir, surtout \u00e0 long terme si la base de donn\u00e9es est modifi\u00e9e apr\u00e8s l'\u00e9criture des requ\u00eates SELECT * FROM call NATURAL JOIN contact; L'appel t\u00e9l\u00e9phonique avec l'ID 2 ne correspond \u00e0 aucun contact, il n'est donc pas list\u00e9 dans les r\u00e9sultats Chaque fois que nous utilisons = avec NULL , c'est toujours faux, donc l'appel 3 n'est pas dans les r\u00e9sultats Jointures Externes Utiliser une jointure externe gauche pour conserver les appels t\u00e9l\u00e9phoniques ne correspondant \u00e0 aucun contact c'est comme une jointure interne, mais les lignes \u00e0 gauche ne correspondant \u00e0 rien \u00e0 droite seront conserv\u00e9es SELECT * FROM call LEFT OUTER JOIN contact ON call.contact_id = contact.contact_id; Utiliser une jointure externe droite pour conserver les contacts ne correspondant \u00e0 aucun appel t\u00e9l\u00e9phonique SELECT * FROM call RIGHT OUTER JOIN contact ON call.contact_id = contact.contact_id; Ou une jointure externe compl\u00e8te pour conserver les lignes ne correspondant \u00e0 rien des deux c\u00f4t\u00e9s SELECT * FROM call FULL OUTER JOIN contact ON call.contact_id = contact.contact_id;","title":"3a - Requ\u00eates avec plus d'une table (Contacts)"},{"location":"3.%20SQL/03a-jointures-contacts/#3a-requetes-avec-plus-dune-table-contacts","text":"SET search_path TO contacts;","title":"3a - Requ\u00eates avec plus d'une table (Contacts)"},{"location":"3.%20SQL/03a-jointures-contacts/#produit-cartesien","text":"Associer chaque ligne d'une table avec chaque ligne de l'autre table donne trop de lignes rarement utilis\u00e9 car il ne donne g\u00e9n\u00e9ralement pas d'informations utiles et il peut devenir tr\u00e8s inefficace si les tables impliqu\u00e9es sont grandes le nombre de lignes dans les r\u00e9sultats sera la multiplication du nombre de lignes dans chaque table impliqu\u00e9e SELECT * FROM call, contact;","title":"Produit cart\u00e9sien"},{"location":"3.%20SQL/03a-jointures-contacts/#jointure-avec-produit-cartesien","text":"Ne garder que les lignes correspondantes, en \"suivant\" la cl\u00e9 \u00e9trang\u00e8re de call \u00e0 contact ceci est l'ancienne mani\u00e8re de faire une jointure (un produit cart\u00e9sien suivi d'une condition WHERE ) SELECT * FROM call, contact WHERE call.contact_id = contact.contact_id;","title":"Jointure (avec produit cart\u00e9sien)"},{"location":"3.%20SQL/03a-jointures-contacts/#jointures-avec-join","text":"","title":"Jointures (avec JOIN)"},{"location":"3.%20SQL/03a-jointures-contacts/#jointure-interne","text":"Une mani\u00e8re plus moderne d'exprimer une jointure en SQL il existe plusieurs types de jointures, le type le plus courant est une INNER JOIN SELECT * FROM call INNER JOIN contact ON call.contact_id = contact.contact_id;","title":"Jointure Interne"},{"location":"3.%20SQL/03a-jointures-contacts/#jointure-naturelle","text":"Jointure sur des colonnes ayant les m\u00eames noms, en utilisant l'op\u00e9rateur =, et en supprimant les colonnes dupliqu\u00e9es notez que les colonnes sont dans un ordre diff\u00e9rent il n'est pas recommand\u00e9 (voire d\u00e9conseill\u00e9) d'utiliser les jointures naturelles car la condition de jointure n'est pas sp\u00e9cifi\u00e9e et pourrait avoir des cons\u00e9quences difficiles \u00e0 pr\u00e9voir, surtout \u00e0 long terme si la base de donn\u00e9es est modifi\u00e9e apr\u00e8s l'\u00e9criture des requ\u00eates SELECT * FROM call NATURAL JOIN contact; L'appel t\u00e9l\u00e9phonique avec l'ID 2 ne correspond \u00e0 aucun contact, il n'est donc pas list\u00e9 dans les r\u00e9sultats Chaque fois que nous utilisons = avec NULL , c'est toujours faux, donc l'appel 3 n'est pas dans les r\u00e9sultats","title":"Jointure Naturelle"},{"location":"3.%20SQL/03a-jointures-contacts/#jointures-externes","text":"Utiliser une jointure externe gauche pour conserver les appels t\u00e9l\u00e9phoniques ne correspondant \u00e0 aucun contact c'est comme une jointure interne, mais les lignes \u00e0 gauche ne correspondant \u00e0 rien \u00e0 droite seront conserv\u00e9es SELECT * FROM call LEFT OUTER JOIN contact ON call.contact_id = contact.contact_id; Utiliser une jointure externe droite pour conserver les contacts ne correspondant \u00e0 aucun appel t\u00e9l\u00e9phonique SELECT * FROM call RIGHT OUTER JOIN contact ON call.contact_id = contact.contact_id; Ou une jointure externe compl\u00e8te pour conserver les lignes ne correspondant \u00e0 rien des deux c\u00f4t\u00e9s SELECT * FROM call FULL OUTER JOIN contact ON call.contact_id = contact.contact_id;","title":"Jointures Externes"},{"location":"3.%20SQL/03b-jointures-universit%C3%A9/","text":"3b - Requ\u00eates avec plus d'une table (Universit\u00e9) set search_path to university; Produit cart\u00e9sien 1- Associer chaque ligne de la premi\u00e8re table avec chaque ligne de la seconde select * from offering, instructor; Jointure 2- Comme le produit cart\u00e9sien, mais ne garder que les lignes correspondantes int\u00e9ressantes ici, ne garder que les identifiants d'instructeurs correspondants ( colonne iid ) select * from offering, instructor where offering.iid = instructor.iid; 3- Mani\u00e8re plus moderne d'\u00e9crire la m\u00eame requ\u00eate : utiliser une inner join select * from offering inner join instructor on offering.iid = instructor.iid; select * from offering as o inner join instructor as i on o.iid = i.iid; select semester, year, section, i.name as instructor_name, c.name as course_name from offering as o inner join instructor as i on o.iid = i.iid inner join course c on c.cid = o.cid; 4- (Presque) la m\u00eame requ\u00eate avec une natural join diff\u00e9rences : une seule colonne iid , et les colonnes dans un ordre diff\u00e9rent non recommand\u00e9 : le comportement d'une jointure naturelle peut \u00eatre impr\u00e9visible select * from offering natural join instructor; -- ne fonctionne pas select * from offering natural join instructor natural join course; 5- Obtenir les identifiants et les noms des instructeurs enseignant au semestre d'hiver 2020 il faut sp\u00e9cifier laquelle des deux colonnes iid nous voulons, m\u00eame si elles sont \u00e9gales select instructor.iid, name from offering inner join instructor on offering.iid = instructor.iid where semester = 'W' and year = 2020; 6- Utiliser distinct pour supprimer les doublons select distinct instructor.iid, name from offering inner join instructor on offering.iid = instructor.iid where semester = 'W' and year = 2020; 7- Obtenir les codes et les noms des cours offerts au semestre d'hiver 2020 select distinct course.code, course.name from course inner join offering on course.cid = offering.cid where semester = 'W' and year = 2020; 8- Obtenir les codes et les noms des cours offerts au semestre d'hiver 2020, ainsi que les noms des instructeurs premi\u00e8re tentative : pourquoi cela ne fonctionne-t-il pas ? select code, course.name, instructor.name from offering natural join instructor natural join course where semester = 'W' and year = 2020; --- deuxi\u00e8me tentative select distinct code, course.name, instructor.name from offering inner join instructor on offering.iid = instructor.iid inner join course on offering.cid = course.cid where semester = 'W' and year = 2020; 9- Qu'en est-il des offres sans instructeur ? Le iid dans offering peut \u00eatre nul, mais pas le cid si iid est nul dans offering, il ne correspondra \u00e0 rien dans instructor jointures externes : conserver les lignes qui ne correspondent pas select o.oid, o.iid, i.iid from offering as o inner join instructor as i on o.iid = i.iid; select o.oid, o.iid, i.iid from offering o left outer join instructor i on o.iid = i.iid; select o.oid, o.iid, i.iid from offering o right outer join instructor i on o.iid = i.iid; select o.oid, o.iid, i.iid from offering o full outer join instructor i on o.iid = i.iid; 10- Obtenir les identifiants des cours offerts en 2020, ainsi que les noms des instructeurs select distinct cid, instructor.name as instructor_name from offering left join instructor on offering.iid = instructor.iid where year = 2020; 11- Obtenir les codes et les noms des cours offerts en 2020, ainsi que le semestre et les noms des instructeurs select distinct code, course.name as course_name, semester, instructor.name as instructor_name from (offering left join instructor on offering.iid = instructor.iid) right join course on offering.cid = course.cid where year = 2020; 12- Trouver les offres sans instructeur select * from offering where iid is null; 13- Trouver les \u00e9tudiants non inscrits \u00e0 un cours select s.* from student s left join enrollment e on s.sid = e.sid where oid is null; 14- Trouver les cours qui n'ont jamais \u00e9t\u00e9 offerts select c.* from course c left join offering o on c.cid = o.cid where oid is null; 15- Trouver les offres dans lesquelles aucun \u00e9tudiant n'est inscrit select o.* from offering o left join enrollment e on o.oid = e.oid where e.oid is null;","title":"3b - Requ\u00eates avec plus d'une table (Universit\u00e9)"},{"location":"3.%20SQL/03b-jointures-universit%C3%A9/#3b-requetes-avec-plus-dune-table-universite","text":"set search_path to university;","title":"3b - Requ\u00eates avec plus d'une table (Universit\u00e9)"},{"location":"3.%20SQL/03b-jointures-universit%C3%A9/#produit-cartesien","text":"1- Associer chaque ligne de la premi\u00e8re table avec chaque ligne de la seconde select * from offering, instructor;","title":"Produit cart\u00e9sien"},{"location":"3.%20SQL/03b-jointures-universit%C3%A9/#jointure","text":"2- Comme le produit cart\u00e9sien, mais ne garder que les lignes correspondantes int\u00e9ressantes ici, ne garder que les identifiants d'instructeurs correspondants ( colonne iid ) select * from offering, instructor where offering.iid = instructor.iid; 3- Mani\u00e8re plus moderne d'\u00e9crire la m\u00eame requ\u00eate : utiliser une inner join select * from offering inner join instructor on offering.iid = instructor.iid; select * from offering as o inner join instructor as i on o.iid = i.iid; select semester, year, section, i.name as instructor_name, c.name as course_name from offering as o inner join instructor as i on o.iid = i.iid inner join course c on c.cid = o.cid; 4- (Presque) la m\u00eame requ\u00eate avec une natural join diff\u00e9rences : une seule colonne iid , et les colonnes dans un ordre diff\u00e9rent non recommand\u00e9 : le comportement d'une jointure naturelle peut \u00eatre impr\u00e9visible select * from offering natural join instructor; -- ne fonctionne pas select * from offering natural join instructor natural join course; 5- Obtenir les identifiants et les noms des instructeurs enseignant au semestre d'hiver 2020 il faut sp\u00e9cifier laquelle des deux colonnes iid nous voulons, m\u00eame si elles sont \u00e9gales select instructor.iid, name from offering inner join instructor on offering.iid = instructor.iid where semester = 'W' and year = 2020; 6- Utiliser distinct pour supprimer les doublons select distinct instructor.iid, name from offering inner join instructor on offering.iid = instructor.iid where semester = 'W' and year = 2020; 7- Obtenir les codes et les noms des cours offerts au semestre d'hiver 2020 select distinct course.code, course.name from course inner join offering on course.cid = offering.cid where semester = 'W' and year = 2020; 8- Obtenir les codes et les noms des cours offerts au semestre d'hiver 2020, ainsi que les noms des instructeurs premi\u00e8re tentative : pourquoi cela ne fonctionne-t-il pas ? select code, course.name, instructor.name from offering natural join instructor natural join course where semester = 'W' and year = 2020; --- deuxi\u00e8me tentative select distinct code, course.name, instructor.name from offering inner join instructor on offering.iid = instructor.iid inner join course on offering.cid = course.cid where semester = 'W' and year = 2020; 9- Qu'en est-il des offres sans instructeur ? Le iid dans offering peut \u00eatre nul, mais pas le cid si iid est nul dans offering, il ne correspondra \u00e0 rien dans instructor jointures externes : conserver les lignes qui ne correspondent pas select o.oid, o.iid, i.iid from offering as o inner join instructor as i on o.iid = i.iid; select o.oid, o.iid, i.iid from offering o left outer join instructor i on o.iid = i.iid; select o.oid, o.iid, i.iid from offering o right outer join instructor i on o.iid = i.iid; select o.oid, o.iid, i.iid from offering o full outer join instructor i on o.iid = i.iid; 10- Obtenir les identifiants des cours offerts en 2020, ainsi que les noms des instructeurs select distinct cid, instructor.name as instructor_name from offering left join instructor on offering.iid = instructor.iid where year = 2020; 11- Obtenir les codes et les noms des cours offerts en 2020, ainsi que le semestre et les noms des instructeurs select distinct code, course.name as course_name, semester, instructor.name as instructor_name from (offering left join instructor on offering.iid = instructor.iid) right join course on offering.cid = course.cid where year = 2020; 12- Trouver les offres sans instructeur select * from offering where iid is null; 13- Trouver les \u00e9tudiants non inscrits \u00e0 un cours select s.* from student s left join enrollment e on s.sid = e.sid where oid is null; 14- Trouver les cours qui n'ont jamais \u00e9t\u00e9 offerts select c.* from course c left join offering o on c.cid = o.cid where oid is null; 15- Trouver les offres dans lesquelles aucun \u00e9tudiant n'est inscrit select o.* from offering o left join enrollment e on o.oid = e.oid where e.oid is null;","title":"Jointure"},{"location":"3.%20SQL/04a-groupes-contacts/","text":"4a - Groupement et Agr\u00e9gats (Contacts) SET search_path TO contacts; 1- Compter le nombre de lignes dans la table call SELECT COUNT(*) FROM call; 2- Compter le nombre d'appels pour chaque num\u00e9ro de t\u00e9l\u00e9phone dans la table call , et renommer la colonne count en quelque chose de plus appropri\u00e9. SELECT phone, COUNT(*) AS n_calls FROM call GROUP BY phone; 3- Compter le nombre d'appels pour chaque num\u00e9ro de t\u00e9l\u00e9phone dans la table call , et trier les r\u00e9sultats par le plus grand nombre d'appels en premier. SELECT phone, COUNT(*) AS n_calls FROM call GROUP BY phone ORDER BY 2 DESC; 4- Compter le nombre d'appels pour chaque num\u00e9ro de t\u00e9l\u00e9phone dans la table call , et ne garder que les num\u00e9ros de t\u00e9l\u00e9phone avec plus d'un appel. utiliser HAVING avec une condition HAVING est similaire \u00e0 WHERE , mais il est ex\u00e9cut\u00e9 apr\u00e8s le GROUP BY , tandis que le WHERE est ex\u00e9cut\u00e9 apr\u00e8s le FROM , mais avant le GROUP BY m\u00eame si SELECT est \u00e9crit en premier, il est en fait ex\u00e9cut\u00e9 apr\u00e8s HAVING , mais avant ORDER BY (si pr\u00e9sent) SELECT phone, COUNT(*) AS n_calls FROM call GROUP BY phone HAVING COUNT(*) > 1; 5- Nous pouvons grouper non seulement les lignes d'une table, mais aussi tout tableau de r\u00e9sultats de la partie FROM de la requ\u00eate cette requ\u00eate calcule le nombre d'appels pour chaque contact (non pas pour chaque num\u00e9ro de t\u00e9l\u00e9phone dans call , mais pour chaque contact_id dans contact ) notez que les contacts sans aucun appel sont list\u00e9s avec un compte de 0 parce que nous utilisons une jointure externe gauche, donc les contacts ne correspondant \u00e0 rien dans call , en d'autres termes, les contacts sans appels associ\u00e9s, seront conserv\u00e9s dans les r\u00e9sultats SELECT contact.contact_id, COUNT(call_id) AS n_calls FROM contact LEFT OUTER JOIN call ON contact.contact_id = call.contact_id GROUP BY contact.contact_id ORDER BY n_calls DESC;","title":"4a - Groupement et Agr\u00e9gats (Contacts)"},{"location":"3.%20SQL/04a-groupes-contacts/#4a-groupement-et-agregats-contacts","text":"SET search_path TO contacts; 1- Compter le nombre de lignes dans la table call SELECT COUNT(*) FROM call; 2- Compter le nombre d'appels pour chaque num\u00e9ro de t\u00e9l\u00e9phone dans la table call , et renommer la colonne count en quelque chose de plus appropri\u00e9. SELECT phone, COUNT(*) AS n_calls FROM call GROUP BY phone; 3- Compter le nombre d'appels pour chaque num\u00e9ro de t\u00e9l\u00e9phone dans la table call , et trier les r\u00e9sultats par le plus grand nombre d'appels en premier. SELECT phone, COUNT(*) AS n_calls FROM call GROUP BY phone ORDER BY 2 DESC; 4- Compter le nombre d'appels pour chaque num\u00e9ro de t\u00e9l\u00e9phone dans la table call , et ne garder que les num\u00e9ros de t\u00e9l\u00e9phone avec plus d'un appel. utiliser HAVING avec une condition HAVING est similaire \u00e0 WHERE , mais il est ex\u00e9cut\u00e9 apr\u00e8s le GROUP BY , tandis que le WHERE est ex\u00e9cut\u00e9 apr\u00e8s le FROM , mais avant le GROUP BY m\u00eame si SELECT est \u00e9crit en premier, il est en fait ex\u00e9cut\u00e9 apr\u00e8s HAVING , mais avant ORDER BY (si pr\u00e9sent) SELECT phone, COUNT(*) AS n_calls FROM call GROUP BY phone HAVING COUNT(*) > 1; 5- Nous pouvons grouper non seulement les lignes d'une table, mais aussi tout tableau de r\u00e9sultats de la partie FROM de la requ\u00eate cette requ\u00eate calcule le nombre d'appels pour chaque contact (non pas pour chaque num\u00e9ro de t\u00e9l\u00e9phone dans call , mais pour chaque contact_id dans contact ) notez que les contacts sans aucun appel sont list\u00e9s avec un compte de 0 parce que nous utilisons une jointure externe gauche, donc les contacts ne correspondant \u00e0 rien dans call , en d'autres termes, les contacts sans appels associ\u00e9s, seront conserv\u00e9s dans les r\u00e9sultats SELECT contact.contact_id, COUNT(call_id) AS n_calls FROM contact LEFT OUTER JOIN call ON contact.contact_id = call.contact_id GROUP BY contact.contact_id ORDER BY n_calls DESC;","title":"4a - Groupement et Agr\u00e9gats (Contacts)"},{"location":"3.%20SQL/04b-groupes-universit%C3%A9/","text":"4b - Groupement et Agr\u00e9gats (Universit\u00e9) set search_path to university; 1- Trouver le nombre d'offres de cours pour chaque ann\u00e9e select year, count(oid) from offering group by year; 2- M\u00eame r\u00e9sultat car oid ne peut pas \u00eatre nul select year, count(*) from offering group by year; 3- Similaire, mais r\u00e9sultats diff\u00e9rents \u00e0 cause des valeurs nulles select year, count(iid) from offering group by year; 4- Trouver le nombre d'offres de cours pour chaque instructeur select iid, count(*) from offering group by iid; ``` 5- Obtenir le nombre d'\u00e9tudiants inscrits dans chaque offre de cours ```sql select oid, count(sid) from enrollment group by oid; 6- Obtenir le nombre d'\u00e9tudiants inscrits dans chaque offre de cours avec les codes de cours, les noms et les sections select e.oid, code, name, section, count(sid) as n_students from enrollment e inner join offering o on e.oid = o.oid inner join course c on o.cid = c.cid group by e.oid, code, name, section; 7- Qu'en est-il des offres sans inscriptions ? select o.oid, code, name, section, count(sid) as n_students from enrollment e right join offering o on e.oid = o.oid inner join course c on o.cid = c.cid group by o.oid, code, name, section order by n_students desc; 8- Obtenir le nombre d'\u00e9tudiants inscrits dans chaque offre de cours avec les codes de cours, les noms et les sections, mais seulement pour les offres de cours avec moins de 3 inscriptions select o.oid, code, name, section, count(sid) as n_students from enrollment e right join offering o on e.oid = o.oid inner join course c on o.cid = c.cid group by o.oid, code, name, section having count(sid) < 3; 9- M\u00eame chose, mais avec moins d'une inscription select o.oid, code, name, section, count(sid) as n_students from enrollment e right join offering o on e.oid = o.oid inner join course c on o.cid = c.cid group by o.oid, code, name, section having count(sid) < 1; -- meilleure r\u00e9ponse select o.oid, code, name, section from enrollment e right join offering o on e.oid = o.oid inner join course c on o.cid = c.cid where e.oid is null; Exercices Obtenir le nombre d'offres de cours pour chaque instructeur Obtenir le nombre d'offres de cours pour l'instructeur avec l'ID 1, pour chaque ann\u00e9e Obtenir le nombre d'offres de cours pour chaque instructeur pour chaque ann\u00e9e que faire des instructeurs sans aucune offre de cours ? Obtenir le nombre d'offres de cours pour chaque instructeur pour chaque semestre et chaque ann\u00e9e que faire des semestres sans aucune offre de cours ? que faire des semestres sans offres de cours pour certains instructeurs ? par exemple, de nombreux instructeurs enseignent uniquement aux semestres d'automne et d'hiver, mais pas aux semestres d'\u00e9t\u00e9 ; devons-nous lister ces semestres sans cours pour chaque instructeur avec un compte de 0 ?","title":"4b - Groupement et Agr\u00e9gats (Universit\u00e9)"},{"location":"3.%20SQL/04b-groupes-universit%C3%A9/#4b-groupement-et-agregats-universite","text":"set search_path to university; 1- Trouver le nombre d'offres de cours pour chaque ann\u00e9e select year, count(oid) from offering group by year; 2- M\u00eame r\u00e9sultat car oid ne peut pas \u00eatre nul select year, count(*) from offering group by year; 3- Similaire, mais r\u00e9sultats diff\u00e9rents \u00e0 cause des valeurs nulles select year, count(iid) from offering group by year; 4- Trouver le nombre d'offres de cours pour chaque instructeur select iid, count(*) from offering group by iid; ``` 5- Obtenir le nombre d'\u00e9tudiants inscrits dans chaque offre de cours ```sql select oid, count(sid) from enrollment group by oid; 6- Obtenir le nombre d'\u00e9tudiants inscrits dans chaque offre de cours avec les codes de cours, les noms et les sections select e.oid, code, name, section, count(sid) as n_students from enrollment e inner join offering o on e.oid = o.oid inner join course c on o.cid = c.cid group by e.oid, code, name, section; 7- Qu'en est-il des offres sans inscriptions ? select o.oid, code, name, section, count(sid) as n_students from enrollment e right join offering o on e.oid = o.oid inner join course c on o.cid = c.cid group by o.oid, code, name, section order by n_students desc; 8- Obtenir le nombre d'\u00e9tudiants inscrits dans chaque offre de cours avec les codes de cours, les noms et les sections, mais seulement pour les offres de cours avec moins de 3 inscriptions select o.oid, code, name, section, count(sid) as n_students from enrollment e right join offering o on e.oid = o.oid inner join course c on o.cid = c.cid group by o.oid, code, name, section having count(sid) < 3; 9- M\u00eame chose, mais avec moins d'une inscription select o.oid, code, name, section, count(sid) as n_students from enrollment e right join offering o on e.oid = o.oid inner join course c on o.cid = c.cid group by o.oid, code, name, section having count(sid) < 1; -- meilleure r\u00e9ponse select o.oid, code, name, section from enrollment e right join offering o on e.oid = o.oid inner join course c on o.cid = c.cid where e.oid is null;","title":"4b - Groupement et Agr\u00e9gats (Universit\u00e9)"},{"location":"3.%20SQL/04b-groupes-universit%C3%A9/#exercices","text":"Obtenir le nombre d'offres de cours pour chaque instructeur Obtenir le nombre d'offres de cours pour l'instructeur avec l'ID 1, pour chaque ann\u00e9e Obtenir le nombre d'offres de cours pour chaque instructeur pour chaque ann\u00e9e que faire des instructeurs sans aucune offre de cours ? Obtenir le nombre d'offres de cours pour chaque instructeur pour chaque semestre et chaque ann\u00e9e que faire des semestres sans aucune offre de cours ? que faire des semestres sans offres de cours pour certains instructeurs ? par exemple, de nombreux instructeurs enseignent uniquement aux semestres d'automne et d'hiver, mais pas aux semestres d'\u00e9t\u00e9 ; devons-nous lister ces semestres sans cours pour chaque instructeur avec un compte de 0 ?","title":"Exercices"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/","text":"Requ\u00eates SQL imbriqu\u00e9es Une sous-requ\u00eate est une requ\u00eate \u00e0 l'int\u00e9rieur d'une autre requ\u00eate (ou d'une autre sous-requ\u00eate). Nous pouvons avoir plusieurs niveaux de sous-requ\u00eates. Parfois, nous faisons r\u00e9f\u00e9rence aux sous-requ\u00eates comme des requ\u00eates internes et aux requ\u00eates englobantes comme des requ\u00eates externes . Base de Donn\u00e9es Universitaire set search_path to university; Sous-requ\u00eates Non Corr\u00e9l\u00e9es Aussi appel\u00e9es sous-requ\u00eates simples . Les sous-requ\u00eates corr\u00e9l\u00e9es seront abord\u00e9es plus tard. Les sous-requ\u00eates non corr\u00e9l\u00e9es sont ind\u00e9pendantes de leurs requ\u00eates externes (englobantes). Elles peuvent s'ex\u00e9cuter seules. Elles ne d\u00e9pendent pas de quelque chose d\u00e9fini dans les requ\u00eates externes. Exemples : avec 2 sous-requ\u00eates non corr\u00e9l\u00e9es 1- Trouver les \u00e9tudiants et les instructeurs avec une adresse email @example.com select name, email from student where email like '%@example.com' union select name, email from instructor where email like '%@example.com'; 2- V\u00e9rifier s'il y a des \u00e9tudiants et des instructeurs avec la m\u00eame adresse email select email from student intersect select email from instructor; 3- Trouver les cours qui n'ont jamais \u00e9t\u00e9 offerts select cid from course except select cid from offering; select c.cid from course c left join offering o on c.cid = o.cid where o.oid is null; 4- Trouver les \u00e9tudiants non inscrits \u00e0 un cours select sid from student except select sid from enrollment; 5- Trouver les offres de cours dans lesquelles aucun \u00e9tudiant n'est inscrit select oid from offering except select oid from enrollment; Sous-requ\u00eates Scalaires Les sous-requ\u00eates scalaires sont le type le plus simple de sous-requ\u00eates. Elles renvoient toujours exactement 1 ligne contenant exactement 1 colonne. Elles sont souvent (mais pas toujours) obtenues en calculant une fonction d'agr\u00e9gat. Exemples 1- Trouver le nombre d'\u00e9tudiants avec une adresse email @example.com select count(sid) as n_students from student where email like '%@example.com'; 2- Trouver les cours qui ont \u00e9t\u00e9 offerts plus souvent que le cours DB a) Trouver le nombre de fois que DB a \u00e9t\u00e9 offert select count(o.cid) from course c left join offering o on c.cid = o.cid where c.code = 'DB'; b) Ins\u00e9rer le r\u00e9sultat pr\u00e9c\u00e9dent dans la clause HAVING d'une requ\u00eate calculant le nombre de fois que chaque cours a \u00e9t\u00e9 offert. Il pourrait \u00eatre pr\u00e9f\u00e9rable de commencer avec un nombre fixe (par exemple 3) au lieu d'ins\u00e9rer imm\u00e9diatement la premi\u00e8re requ\u00eate dans la seconde select c.cid, c.code from course c left join offering o on c.cid = o.cid group by c.cid, c.code having count(o.oid) > 3; select c.cid, c.code from course c left join offering o on c.cid = o.cid group by c.cid, c.code having count(o.oid) > (select count(o.cid) from course c left join offering o on c.cid = o.cid where c.code = 'DB'); 3- Trouver le nombre moyen de fois que chaque cours a \u00e9t\u00e9 offert. Commencer par trouver le nombre de fois que chaque cours a \u00e9t\u00e9 offert, puis prendre la moyenne select c.cid, c.code, count(o.oid) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid; -- ne fonctionnera pas select c.cid, c.code, avg(count(o.oid)) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid; select round(avg(n_offerings), 2) as avg_n_offerings from (select count(o.oid) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid) as T; with T as (select count(o.oid) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid) select round(avg(n_offerings), 2) as avg_n_offerings from T; 4- Trouver les cours qui ont \u00e9t\u00e9 offerts plus souvent que la moyenne (nombre de fois que chaque cours a \u00e9t\u00e9 offert) select c.cid, c.code from course c left join offering o on c.cid = o.cid group by c.cid having count(o.oid) > (select avg(n_offerings) as avg_n_offerings from (select count(o.oid) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid) as T); Format de Requ\u00eate SQL with Afin d'exprimer plus facilement des requ\u00eates avec plusieurs niveaux de sous-requ\u00eates, nous pouvons utiliser le style de requ\u00eate with ... select ... . Nous d\u00e9finissons (en quelque sorte) des tables temporaires avant que la requ\u00eate principale select ne commence. Ensuite, nous utilisons les tables temporaires dans la requ\u00eate principale select comme si elles \u00e9taient des tables stock\u00e9es dans la base de donn\u00e9es. with T2 as (select avg(n_offerings) as avg_n_offerings from (select c.cid, c.code, count(o.oid) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid) as T1) select c.cid, c.code from course c left join offering o on c.cid = o.cid group by c.cid having count(o.oid) > (select * from T2); with n_offerings_per_course as (select c.cid, c.code, count(o.oid) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid) select cid, code from n_offerings_per_course where n_offerings > (select avg(n_offerings) as avg_n_offerings from n_offerings_per_course); Ne pas sur-utiliser la syntaxe with Par exemple, ne r\u00e9\u00e9crivez pas cette requ\u00eate sql select name, email from student where email like '%@example.com' union select name, email from instructor where email like '%@example.com'; comme sql with students_example as (select name, email from student where email like '%@example.com'), instructor_example as (select name, email from instructor where email like '%@example.com') select * from students_example union select * from instructor_example; Bien que cette requ\u00eate soit techniquement correcte et \u00e9quivalente \u00e0 la requ\u00eate originale, l'utilisation de with pour d\u00e9finir 2 tables temporaires est excessive ici et r\u00e9duit en fait la lisibilit\u00e9. Utilisez with uniquement lorsque les sous-requ\u00eates sont compliqu\u00e9es ou lorsqu'il y a plusieurs niveaux de sous-requ\u00eates. Nous pouvons \u00e9galement utiliser with recursive pour \u00e9crire des requ\u00eates r\u00e9cursives. Valeurs NULL en SQL SQL utilise une logique \u00e0 3 valeurs au lieu de la logique bool\u00e9enne (une logique \u00e0 2 valeurs). Les 3 valeurs sont true , false et null (ou T , F et N dans le tableau ci-dessous)... Les 2 premi\u00e8res valeurs ont le sens habituel, tandis que null peut avoir diff\u00e9rentes significations : inconnu non applicable n'a pas d'importance Les op\u00e9rateurs logiques doivent \u00eatre mis \u00e0 jour pour tenir compte des valeurs null . A B NOT A A OR B A AND B T T F T T T F F T F T N F T N F T T T F F F T F F F N T N F N T N T N N F N N F N N N N N Sous-requ\u00eates Non-Scalaires Si une (sous-)requ\u00eate renvoie plus d'une ligne et/ou plus d'une colonne, alors ce n'est pas une sous-requ\u00eate scalaire. Tenter d'utiliser les op\u00e9rateurs de comparaison ou arithm\u00e9tiques normaux avec des sous-requ\u00eates non-scalaires \u00e9chouera s'il y a plus d'une ligne. Certains SGBD, comme PostgreSQL, permettent \u00e0 certains op\u00e9rateurs de fonctionner avec des sous-requ\u00eates donnant exactement 1 ligne mais plusieurs colonnes. PostgreSQL est un ORDBMS, donc il est plus flexible avec les types de donn\u00e9es. Il verra la seule ligne avec plusieurs colonnes comme un seul objet avec plusieurs champs. En g\u00e9n\u00e9ral, nous devons utiliser des op\u00e9rateurs sp\u00e9ciaux pour traiter les sous-requ\u00eates non-scalaires : IN , NOT IN , EXISTS , NOT EXISTS , ANY , ALL IN expression IN (sub-query) c'est la m\u00eame chose que $\\in$ en notation math\u00e9matique (sauf que nous devons g\u00e9rer les valeurs null ) la sous-requ\u00eate doit renvoyer exactement 1 colonne true si l'expression est \u00e9gale \u00e0 1 des lignes dans les r\u00e9sultats de la sous-requ\u00eate false si l'expression n'est pas null et qu'il n'y a pas de valeurs null dans la sous-requ\u00eate et que l'expression n'est \u00e9gale \u00e0 aucune ligne de la sous-requ\u00eate null si l'expression est null ou si l'expression n'est \u00e9gale \u00e0 aucune ligne de la sous-requ\u00eate et qu'il y a au moins 1 valeur null dans la sous-requ\u00eate Parce que SQL utilise une logique \u00e0 3 valeurs, \u00e9valuer IN est plus compliqu\u00e9 Rappelez-vous que si nous voulons savoir si une valeur de colonne est null , nous ne pouvons pas utiliser l'op\u00e9rateur d'\u00e9galit\u00e9 = car il renverra toujours null null signifie inconnu dans ce cas, donc nous ne savons pas comment comparer des valeurs \u00e0 une valeur inconnue Nous devons donc utiliser is null au lieu de = null ... L'op\u00e9rateur IN compare les valeurs avec = , donc d\u00e8s qu'il compare avec un null , il \u00e9valuera \u00e0 null Donc si l'expression est \u00e9gale \u00e0 null , IN \u00e9valuera \u00e0 null Si l'expression n'est pas null , alors elle comparera l'expression avec des valeurs non-nulles d'abord dans la sous-requ\u00eate si elle trouve une correspondance, alors la valeur de IN sera vraie si nous ne trouvons pas de correspondance, alors elle v\u00e9rifiera si la sous-requ\u00eate contient des valeurs null si non, alors nous savons avec certitude que l'expression n'est pas dans la sous-requ\u00eate, donc la valeur de IN sera false s'il y a des valeurs null , alors nous ne savons pas avec certitude si l'expression est dans la sous-requ\u00eate parce que nous avons des valeurs inconnues ( null ), donc la valeur de IN est null Cet exemple fonctionne comme pr\u00e9vu -- notez que (1, 2, 3) n'est pas vraiment une sous-requ\u00eate, mais agit comme une sous-requ\u00eate -- il est utilis\u00e9 pour simplifier l'exemple select * from course where cid in (1, 2, 3); -- notez que (2, 3, 4, null) n'est pas vraiment une sous-requ\u00eate, mais agit comme une sous-requ\u00eate -- il est utilis\u00e9 pour simplifier l'exemple select * from course where cid in (2, 3, 4, null); Cet exemple est \u00e9quivalent et montre comment les op\u00e9rateurs IN sont \u00e9valu\u00e9s en interne select * from course where cid = 2 or cid = 3 or cid = 4 or cid = null; Cela fonctionne pour les cours avec une valeur cid de 2, 3 ou 4 parce qu'au moins 1 des comparaisons sera vraie et nous obtiendrons quelque chose comme T OR F OR F OR N , ce qui est vrai Mais pour les cours avec un cid non inclus dans l'ensemble fourni, nous obtiendrons null parce que F OR F OR F OR N est N Cela ne cr\u00e9e pas de probl\u00e8me car les lignes avec une condition where seront supprim\u00e9es Mais si nous nions IN pour obtenir un op\u00e9rateur NOT IN , nous aurons des ennuis select * from course where cid not in (2, 3, 4, null); select * from course where cid not in (select cid from offering); select * from course except select c.* from course c inner join offering o on c.cid = o.cid; select c.* from course c left join offering o on c.cid = o.cid where o.oid is null; select * from instructor where iid not in (select iid from offering); Nous n'obtenons rien Mais le cours avec cid = 1 n'est pas dans la sous-requ\u00eate, alors pourquoi ne l'obtenons-nous pas ? C'est \u00e0 cause de la valeur null 1 in (2, 3, 4, null) \u00e9value \u00e0 null et 1 not in (2, 3, 4, null) \u00e9value \u00e0 not null , ce qui est null Donc les requ\u00eates NOT IN sont dangereuses \u00e0 cause des valeurs null La requ\u00eate suivante est correcte parce que nous savons avec certitude que cid dans course ne peut pas \u00eatre null Donc nous pouvons trouver les cours qui n'ont jamais \u00e9t\u00e9 offerts de cette mani\u00e8re --insert into course(name, code, credits) --values ('Data Structures', 'DS', 3); -- delete from course where code = 'DS'; select * from course where cid not in (select cid from offering); Mais essayer de faire quelque chose de similaire pour les instructeurs cr\u00e9era des probl\u00e8mes car iid dans offering peut \u00eatre null Nous devons explicitement exclure les valeurs null dans la sous-requ\u00eate pour que la requ\u00eate renvoie les r\u00e9sultats corrects --insert into instructor(name, email, department) --values ('John', 'john@bbb.com', 'ECE'); -- delete from instructor where name = 'John'; select * from instructor where iid not in (select iid from offering); select * from instructor where iid not in (select iid from offering where iid is not null); Recommandation : ne pas utiliser NOT IN Recommandation : utiliser une left join \u00e0 la place Non seulement la jointure gauche (ou les jointures externes en g\u00e9n\u00e9ral) vous oblige \u00e0 penser aux valeurs null (et \u00e0 les g\u00e9rer correctement), mais en termes de performance, les jointures gauches seront g\u00e9n\u00e9ralement plus efficaces. Utiliser des jointures gauches \u00e9vite de traiter avec la logique \u00e0 3 valeurs de SQL. select i.* from instructor i left join offering o on i.iid = o.iid where o.iid is null; ANY et ALL ANY et ALL sont utilis\u00e9s comme modificateurs d'op\u00e9rateurs (g\u00e9n\u00e9ralement des op\u00e9rateurs de comparaison) expression operator ANY (sub-query) true lorsqu'il existe une ligne $r$ dans la sous-requ\u00eate telle que expression operator r est vrai false lorsque pour toutes les lignes r dans la sous-requ\u00eate, expression operator r est faux et qu'il n'y a pas de valeurs null dans la sous-requ\u00eate... null lorsque pour toutes les lignes r dans la sous-requ\u00eate, expression operator r est faux et qu'il y a au moins 1 valeur null dans la sous-requ\u00eate IN est \u00e9quivalent \u00e0 =ANY expression operator ALL (sub-query) true lorsque pour toutes les lignes $r$ dans la sous-requ\u00eate, expression operator r est vrai false lorsque expression operator r est faux pour au moins 1 ligne dans la sous-requ\u00eate null lorsque pour toutes les lignes $r$ dans la sous-requ\u00eate, expression operator r n'est pas faux et qu'il y a au moins 1 valeur null dans la sous-requ\u00eate NOT IN est \u00e9quivalent \u00e0 <> ALL","title":"Requ\u00eates SQL imbriqu\u00e9es"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/#requetes-sql-imbriquees","text":"Une sous-requ\u00eate est une requ\u00eate \u00e0 l'int\u00e9rieur d'une autre requ\u00eate (ou d'une autre sous-requ\u00eate). Nous pouvons avoir plusieurs niveaux de sous-requ\u00eates. Parfois, nous faisons r\u00e9f\u00e9rence aux sous-requ\u00eates comme des requ\u00eates internes et aux requ\u00eates englobantes comme des requ\u00eates externes .","title":"Requ\u00eates SQL imbriqu\u00e9es"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/#base-de-donnees-universitaire","text":"set search_path to university;","title":"Base de Donn\u00e9es Universitaire"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/#sous-requetes-non-correlees","text":"Aussi appel\u00e9es sous-requ\u00eates simples . Les sous-requ\u00eates corr\u00e9l\u00e9es seront abord\u00e9es plus tard. Les sous-requ\u00eates non corr\u00e9l\u00e9es sont ind\u00e9pendantes de leurs requ\u00eates externes (englobantes). Elles peuvent s'ex\u00e9cuter seules. Elles ne d\u00e9pendent pas de quelque chose d\u00e9fini dans les requ\u00eates externes.","title":"Sous-requ\u00eates Non Corr\u00e9l\u00e9es"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/#exemples-avec-2-sous-requetes-non-correlees","text":"1- Trouver les \u00e9tudiants et les instructeurs avec une adresse email @example.com select name, email from student where email like '%@example.com' union select name, email from instructor where email like '%@example.com'; 2- V\u00e9rifier s'il y a des \u00e9tudiants et des instructeurs avec la m\u00eame adresse email select email from student intersect select email from instructor; 3- Trouver les cours qui n'ont jamais \u00e9t\u00e9 offerts select cid from course except select cid from offering; select c.cid from course c left join offering o on c.cid = o.cid where o.oid is null; 4- Trouver les \u00e9tudiants non inscrits \u00e0 un cours select sid from student except select sid from enrollment; 5- Trouver les offres de cours dans lesquelles aucun \u00e9tudiant n'est inscrit select oid from offering except select oid from enrollment;","title":"Exemples : avec 2 sous-requ\u00eates non corr\u00e9l\u00e9es"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/#sous-requetes-scalaires","text":"Les sous-requ\u00eates scalaires sont le type le plus simple de sous-requ\u00eates. Elles renvoient toujours exactement 1 ligne contenant exactement 1 colonne. Elles sont souvent (mais pas toujours) obtenues en calculant une fonction d'agr\u00e9gat.","title":"Sous-requ\u00eates Scalaires"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/#exemples","text":"1- Trouver le nombre d'\u00e9tudiants avec une adresse email @example.com select count(sid) as n_students from student where email like '%@example.com'; 2- Trouver les cours qui ont \u00e9t\u00e9 offerts plus souvent que le cours DB a) Trouver le nombre de fois que DB a \u00e9t\u00e9 offert select count(o.cid) from course c left join offering o on c.cid = o.cid where c.code = 'DB'; b) Ins\u00e9rer le r\u00e9sultat pr\u00e9c\u00e9dent dans la clause HAVING d'une requ\u00eate calculant le nombre de fois que chaque cours a \u00e9t\u00e9 offert. Il pourrait \u00eatre pr\u00e9f\u00e9rable de commencer avec un nombre fixe (par exemple 3) au lieu d'ins\u00e9rer imm\u00e9diatement la premi\u00e8re requ\u00eate dans la seconde select c.cid, c.code from course c left join offering o on c.cid = o.cid group by c.cid, c.code having count(o.oid) > 3; select c.cid, c.code from course c left join offering o on c.cid = o.cid group by c.cid, c.code having count(o.oid) > (select count(o.cid) from course c left join offering o on c.cid = o.cid where c.code = 'DB'); 3- Trouver le nombre moyen de fois que chaque cours a \u00e9t\u00e9 offert. Commencer par trouver le nombre de fois que chaque cours a \u00e9t\u00e9 offert, puis prendre la moyenne select c.cid, c.code, count(o.oid) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid; -- ne fonctionnera pas select c.cid, c.code, avg(count(o.oid)) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid; select round(avg(n_offerings), 2) as avg_n_offerings from (select count(o.oid) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid) as T; with T as (select count(o.oid) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid) select round(avg(n_offerings), 2) as avg_n_offerings from T; 4- Trouver les cours qui ont \u00e9t\u00e9 offerts plus souvent que la moyenne (nombre de fois que chaque cours a \u00e9t\u00e9 offert) select c.cid, c.code from course c left join offering o on c.cid = o.cid group by c.cid having count(o.oid) > (select avg(n_offerings) as avg_n_offerings from (select count(o.oid) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid) as T);","title":"Exemples"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/#format-de-requete-sql-with","text":"Afin d'exprimer plus facilement des requ\u00eates avec plusieurs niveaux de sous-requ\u00eates, nous pouvons utiliser le style de requ\u00eate with ... select ... . Nous d\u00e9finissons (en quelque sorte) des tables temporaires avant que la requ\u00eate principale select ne commence. Ensuite, nous utilisons les tables temporaires dans la requ\u00eate principale select comme si elles \u00e9taient des tables stock\u00e9es dans la base de donn\u00e9es. with T2 as (select avg(n_offerings) as avg_n_offerings from (select c.cid, c.code, count(o.oid) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid) as T1) select c.cid, c.code from course c left join offering o on c.cid = o.cid group by c.cid having count(o.oid) > (select * from T2); with n_offerings_per_course as (select c.cid, c.code, count(o.oid) as n_offerings from course c left join offering o on c.cid = o.cid group by c.cid) select cid, code from n_offerings_per_course where n_offerings > (select avg(n_offerings) as avg_n_offerings from n_offerings_per_course); Ne pas sur-utiliser la syntaxe with Par exemple, ne r\u00e9\u00e9crivez pas cette requ\u00eate sql select name, email from student where email like '%@example.com' union select name, email from instructor where email like '%@example.com'; comme sql with students_example as (select name, email from student where email like '%@example.com'), instructor_example as (select name, email from instructor where email like '%@example.com') select * from students_example union select * from instructor_example; Bien que cette requ\u00eate soit techniquement correcte et \u00e9quivalente \u00e0 la requ\u00eate originale, l'utilisation de with pour d\u00e9finir 2 tables temporaires est excessive ici et r\u00e9duit en fait la lisibilit\u00e9. Utilisez with uniquement lorsque les sous-requ\u00eates sont compliqu\u00e9es ou lorsqu'il y a plusieurs niveaux de sous-requ\u00eates. Nous pouvons \u00e9galement utiliser with recursive pour \u00e9crire des requ\u00eates r\u00e9cursives.","title":"Format de Requ\u00eate SQL with"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/#valeurs-null-en-sql","text":"SQL utilise une logique \u00e0 3 valeurs au lieu de la logique bool\u00e9enne (une logique \u00e0 2 valeurs). Les 3 valeurs sont true , false et null (ou T , F et N dans le tableau ci-dessous)... Les 2 premi\u00e8res valeurs ont le sens habituel, tandis que null peut avoir diff\u00e9rentes significations : inconnu non applicable n'a pas d'importance Les op\u00e9rateurs logiques doivent \u00eatre mis \u00e0 jour pour tenir compte des valeurs null . A B NOT A A OR B A AND B T T F T T T F F T F T N F T N F T T T F F F T F F F N T N F N T N T N N F N N F N N N N N","title":"Valeurs NULL en SQL"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/#sous-requetes-non-scalaires","text":"Si une (sous-)requ\u00eate renvoie plus d'une ligne et/ou plus d'une colonne, alors ce n'est pas une sous-requ\u00eate scalaire. Tenter d'utiliser les op\u00e9rateurs de comparaison ou arithm\u00e9tiques normaux avec des sous-requ\u00eates non-scalaires \u00e9chouera s'il y a plus d'une ligne. Certains SGBD, comme PostgreSQL, permettent \u00e0 certains op\u00e9rateurs de fonctionner avec des sous-requ\u00eates donnant exactement 1 ligne mais plusieurs colonnes. PostgreSQL est un ORDBMS, donc il est plus flexible avec les types de donn\u00e9es. Il verra la seule ligne avec plusieurs colonnes comme un seul objet avec plusieurs champs. En g\u00e9n\u00e9ral, nous devons utiliser des op\u00e9rateurs sp\u00e9ciaux pour traiter les sous-requ\u00eates non-scalaires : IN , NOT IN , EXISTS , NOT EXISTS , ANY , ALL","title":"Sous-requ\u00eates Non-Scalaires"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/#in","text":"expression IN (sub-query) c'est la m\u00eame chose que $\\in$ en notation math\u00e9matique (sauf que nous devons g\u00e9rer les valeurs null ) la sous-requ\u00eate doit renvoyer exactement 1 colonne true si l'expression est \u00e9gale \u00e0 1 des lignes dans les r\u00e9sultats de la sous-requ\u00eate false si l'expression n'est pas null et qu'il n'y a pas de valeurs null dans la sous-requ\u00eate et que l'expression n'est \u00e9gale \u00e0 aucune ligne de la sous-requ\u00eate null si l'expression est null ou si l'expression n'est \u00e9gale \u00e0 aucune ligne de la sous-requ\u00eate et qu'il y a au moins 1 valeur null dans la sous-requ\u00eate Parce que SQL utilise une logique \u00e0 3 valeurs, \u00e9valuer IN est plus compliqu\u00e9 Rappelez-vous que si nous voulons savoir si une valeur de colonne est null , nous ne pouvons pas utiliser l'op\u00e9rateur d'\u00e9galit\u00e9 = car il renverra toujours null null signifie inconnu dans ce cas, donc nous ne savons pas comment comparer des valeurs \u00e0 une valeur inconnue Nous devons donc utiliser is null au lieu de = null ... L'op\u00e9rateur IN compare les valeurs avec = , donc d\u00e8s qu'il compare avec un null , il \u00e9valuera \u00e0 null Donc si l'expression est \u00e9gale \u00e0 null , IN \u00e9valuera \u00e0 null Si l'expression n'est pas null , alors elle comparera l'expression avec des valeurs non-nulles d'abord dans la sous-requ\u00eate si elle trouve une correspondance, alors la valeur de IN sera vraie si nous ne trouvons pas de correspondance, alors elle v\u00e9rifiera si la sous-requ\u00eate contient des valeurs null si non, alors nous savons avec certitude que l'expression n'est pas dans la sous-requ\u00eate, donc la valeur de IN sera false s'il y a des valeurs null , alors nous ne savons pas avec certitude si l'expression est dans la sous-requ\u00eate parce que nous avons des valeurs inconnues ( null ), donc la valeur de IN est null Cet exemple fonctionne comme pr\u00e9vu -- notez que (1, 2, 3) n'est pas vraiment une sous-requ\u00eate, mais agit comme une sous-requ\u00eate -- il est utilis\u00e9 pour simplifier l'exemple select * from course where cid in (1, 2, 3); -- notez que (2, 3, 4, null) n'est pas vraiment une sous-requ\u00eate, mais agit comme une sous-requ\u00eate -- il est utilis\u00e9 pour simplifier l'exemple select * from course where cid in (2, 3, 4, null); Cet exemple est \u00e9quivalent et montre comment les op\u00e9rateurs IN sont \u00e9valu\u00e9s en interne select * from course where cid = 2 or cid = 3 or cid = 4 or cid = null; Cela fonctionne pour les cours avec une valeur cid de 2, 3 ou 4 parce qu'au moins 1 des comparaisons sera vraie et nous obtiendrons quelque chose comme T OR F OR F OR N , ce qui est vrai Mais pour les cours avec un cid non inclus dans l'ensemble fourni, nous obtiendrons null parce que F OR F OR F OR N est N Cela ne cr\u00e9e pas de probl\u00e8me car les lignes avec une condition where seront supprim\u00e9es Mais si nous nions IN pour obtenir un op\u00e9rateur NOT IN , nous aurons des ennuis select * from course where cid not in (2, 3, 4, null); select * from course where cid not in (select cid from offering); select * from course except select c.* from course c inner join offering o on c.cid = o.cid; select c.* from course c left join offering o on c.cid = o.cid where o.oid is null; select * from instructor where iid not in (select iid from offering); Nous n'obtenons rien Mais le cours avec cid = 1 n'est pas dans la sous-requ\u00eate, alors pourquoi ne l'obtenons-nous pas ? C'est \u00e0 cause de la valeur null 1 in (2, 3, 4, null) \u00e9value \u00e0 null et 1 not in (2, 3, 4, null) \u00e9value \u00e0 not null , ce qui est null Donc les requ\u00eates NOT IN sont dangereuses \u00e0 cause des valeurs null La requ\u00eate suivante est correcte parce que nous savons avec certitude que cid dans course ne peut pas \u00eatre null Donc nous pouvons trouver les cours qui n'ont jamais \u00e9t\u00e9 offerts de cette mani\u00e8re --insert into course(name, code, credits) --values ('Data Structures', 'DS', 3); -- delete from course where code = 'DS'; select * from course where cid not in (select cid from offering); Mais essayer de faire quelque chose de similaire pour les instructeurs cr\u00e9era des probl\u00e8mes car iid dans offering peut \u00eatre null Nous devons explicitement exclure les valeurs null dans la sous-requ\u00eate pour que la requ\u00eate renvoie les r\u00e9sultats corrects --insert into instructor(name, email, department) --values ('John', 'john@bbb.com', 'ECE'); -- delete from instructor where name = 'John'; select * from instructor where iid not in (select iid from offering); select * from instructor where iid not in (select iid from offering where iid is not null);","title":"IN"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/#recommandation-ne-pas-utiliser-not-in","text":"","title":"Recommandation : ne pas utiliser NOT IN"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/#recommandation-utiliser-une-left-join-a-la-place","text":"Non seulement la jointure gauche (ou les jointures externes en g\u00e9n\u00e9ral) vous oblige \u00e0 penser aux valeurs null (et \u00e0 les g\u00e9rer correctement), mais en termes de performance, les jointures gauches seront g\u00e9n\u00e9ralement plus efficaces. Utiliser des jointures gauches \u00e9vite de traiter avec la logique \u00e0 3 valeurs de SQL. select i.* from instructor i left join offering o on i.iid = o.iid where o.iid is null;","title":"Recommandation : utiliser une left join \u00e0 la place"},{"location":"3.%20SQL/05-imbriqu%C3%A9es/#any-et-all","text":"ANY et ALL sont utilis\u00e9s comme modificateurs d'op\u00e9rateurs (g\u00e9n\u00e9ralement des op\u00e9rateurs de comparaison) expression operator ANY (sub-query) true lorsqu'il existe une ligne $r$ dans la sous-requ\u00eate telle que expression operator r est vrai false lorsque pour toutes les lignes r dans la sous-requ\u00eate, expression operator r est faux et qu'il n'y a pas de valeurs null dans la sous-requ\u00eate... null lorsque pour toutes les lignes r dans la sous-requ\u00eate, expression operator r est faux et qu'il y a au moins 1 valeur null dans la sous-requ\u00eate IN est \u00e9quivalent \u00e0 =ANY expression operator ALL (sub-query) true lorsque pour toutes les lignes $r$ dans la sous-requ\u00eate, expression operator r est vrai false lorsque expression operator r est faux pour au moins 1 ligne dans la sous-requ\u00eate null lorsque pour toutes les lignes $r$ dans la sous-requ\u00eate, expression operator r n'est pas faux et qu'il y a au moins 1 valeur null dans la sous-requ\u00eate NOT IN est \u00e9quivalent \u00e0 <> ALL","title":"ANY et ALL"},{"location":"3.%20SQL/06-r%C3%A9cursives/","text":"Requ\u00eates r\u00e9cursives Syntaxe PostgreSQL Syntaxe de base ( https://www.postgresqltutorial.com/postgresql-recursive-query/ ) : WITH RECURSIVE cte_name AS (CTE_query_definition -- terme non r\u00e9cursif UNION [ALL] CTE_query_definition -- terme r\u00e9cursif ) SELECT * FROM cte_name; CTE : common table expression (expression de table commune) \u00c9tant donn\u00e9 que les requ\u00eates r\u00e9cursives sont (bien s\u00fbr) r\u00e9cursives, nous avons besoin d'un cas de base , appel\u00e9 ici un terme non r\u00e9cursif Ensuite, nous avons besoin d'un ou plusieurs termes r\u00e9cursifs with recursive fonctionne, au d\u00e9but, un peu comme les requ\u00eates with ( sans recursive ) Il \u00e9valuera d'abord le terme non r\u00e9cursif pour initialiser l'ensemble des r\u00e9sultats Ensuite, il commencera \u00e0 \u00e9valuer le terme r\u00e9cursif plusieurs fois, en boucle, jusqu'\u00e0 ce qu'aucune nouvelle ligne ne soit ajout\u00e9e aux r\u00e9sultats chaque fois qu'il \u00e9value le terme r\u00e9cursif, il essaiera d'ajouter de nouvelles lignes \u00e0 l'ensemble des r\u00e9sultats le terme r\u00e9cursif est corr\u00e9l\u00e9 au cte_name Exemple sur la base de donn\u00e9es du blog Nous voulons trouver toutes les r\u00e9ponses \u00e0 un commentaire donn\u00e9 de mani\u00e8re r\u00e9cursive nous ne voulons pas seulement les r\u00e9ponses directes, mais aussi toutes les r\u00e9ponses des r\u00e9ponses Premi\u00e8re tentative pour r\u00e9cup\u00e9rer uniquement les r\u00e9ponses directes : set search_path to blog3; select comment_id, contents, reply_to_id, user_id from comment where blogpost_id = 1 and reply_to_id is null; Pour obtenir les r\u00e9ponses aux r\u00e9ponses, nous devons utiliser la syntaxe with recursive d\u00e9crite ci-dessus : with recursive replies as (select comment_id, contents, reply_to_id, user_id from comment where reply_to_id = 1 union select comment.comment_id, comment.contents, comment.reply_to_id, comment.user_id from comment inner join replies on replies.comment_id = comment.reply_to_id) select * from replies; Si nous devons inclure le commentaire original avec lequel nous commen\u00e7ons dans le r\u00e9sultat, nous avons besoin d'un terme non r\u00e9cursif l\u00e9g\u00e8rement diff\u00e9rent utiliser comment_id = 1 au lieu de reply_to_id = 1 Si nous devons inclure les commentaires commen\u00e7ant par un article de blog, nous avons besoin d'un terme non r\u00e9cursif l\u00e9g\u00e8rement diff\u00e9rent... utiliser blogpost_id = 1 au lieu de reply_to_id = 1 with recursive replies as (select comment_id, contents, reply_to_id, user_id from comment where blogpost_id = 1 union select comment.comment_id, comment.contents, comment.reply_to_id, comment.user_id from comment inner join replies on replies.comment_id = comment.reply_to_id) select * from replies;","title":"Requ\u00eates r\u00e9cursives"},{"location":"3.%20SQL/06-r%C3%A9cursives/#requetes-recursives","text":"","title":"Requ\u00eates r\u00e9cursives"},{"location":"3.%20SQL/06-r%C3%A9cursives/#syntaxe-postgresql","text":"Syntaxe de base ( https://www.postgresqltutorial.com/postgresql-recursive-query/ ) : WITH RECURSIVE cte_name AS (CTE_query_definition -- terme non r\u00e9cursif UNION [ALL] CTE_query_definition -- terme r\u00e9cursif ) SELECT * FROM cte_name; CTE : common table expression (expression de table commune) \u00c9tant donn\u00e9 que les requ\u00eates r\u00e9cursives sont (bien s\u00fbr) r\u00e9cursives, nous avons besoin d'un cas de base , appel\u00e9 ici un terme non r\u00e9cursif Ensuite, nous avons besoin d'un ou plusieurs termes r\u00e9cursifs with recursive fonctionne, au d\u00e9but, un peu comme les requ\u00eates with ( sans recursive ) Il \u00e9valuera d'abord le terme non r\u00e9cursif pour initialiser l'ensemble des r\u00e9sultats Ensuite, il commencera \u00e0 \u00e9valuer le terme r\u00e9cursif plusieurs fois, en boucle, jusqu'\u00e0 ce qu'aucune nouvelle ligne ne soit ajout\u00e9e aux r\u00e9sultats chaque fois qu'il \u00e9value le terme r\u00e9cursif, il essaiera d'ajouter de nouvelles lignes \u00e0 l'ensemble des r\u00e9sultats le terme r\u00e9cursif est corr\u00e9l\u00e9 au cte_name","title":"Syntaxe PostgreSQL"},{"location":"3.%20SQL/06-r%C3%A9cursives/#exemple-sur-la-base-de-donnees-du-blog","text":"Nous voulons trouver toutes les r\u00e9ponses \u00e0 un commentaire donn\u00e9 de mani\u00e8re r\u00e9cursive nous ne voulons pas seulement les r\u00e9ponses directes, mais aussi toutes les r\u00e9ponses des r\u00e9ponses Premi\u00e8re tentative pour r\u00e9cup\u00e9rer uniquement les r\u00e9ponses directes : set search_path to blog3; select comment_id, contents, reply_to_id, user_id from comment where blogpost_id = 1 and reply_to_id is null; Pour obtenir les r\u00e9ponses aux r\u00e9ponses, nous devons utiliser la syntaxe with recursive d\u00e9crite ci-dessus : with recursive replies as (select comment_id, contents, reply_to_id, user_id from comment where reply_to_id = 1 union select comment.comment_id, comment.contents, comment.reply_to_id, comment.user_id from comment inner join replies on replies.comment_id = comment.reply_to_id) select * from replies; Si nous devons inclure le commentaire original avec lequel nous commen\u00e7ons dans le r\u00e9sultat, nous avons besoin d'un terme non r\u00e9cursif l\u00e9g\u00e8rement diff\u00e9rent utiliser comment_id = 1 au lieu de reply_to_id = 1 Si nous devons inclure les commentaires commen\u00e7ant par un article de blog, nous avons besoin d'un terme non r\u00e9cursif l\u00e9g\u00e8rement diff\u00e9rent... utiliser blogpost_id = 1 au lieu de reply_to_id = 1 with recursive replies as (select comment_id, contents, reply_to_id, user_id from comment where blogpost_id = 1 union select comment.comment_id, comment.contents, comment.reply_to_id, comment.user_id from comment inner join replies on replies.comment_id = comment.reply_to_id) select * from replies;","title":"Exemple sur la base de donn\u00e9es du blog"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/","text":"Mod\u00e9lisation Entit\u00e9-Association Mod\u00e8le de donn\u00e9es relationnel (ou mod\u00e8le relationnel ) Mod\u00e8le Entit\u00e9-Association (ou Mod\u00e8le EA ) Exemples Mod\u00e8le Relationnel Relation (table) : table \u00e0 deux dimensions, ensemble (et non liste) de tuples Attributs : colonnes de la table, champs Sch\u00e9ma : Movies(title, year, length, filmType) Tuples : lignes dans la table, enregistrements Domaines : types Exemple de Table (Base de Donn\u00e9es Monde ) Table : country (donn\u00e9es d'exemple, tri\u00e9es par nom de pays) Terminologie Entit\u00e9 : Quelque chose d'int\u00e9r\u00eat pour la communaut\u00e9 des utilisateurs de la base de donn\u00e9es. clients, pi\u00e8ces, localisations g\u00e9ographiques Colonne : Un \u00e9l\u00e9ment de donn\u00e9es individuel stock\u00e9 dans une table. Ligne : Un ensemble de colonnes qui, ensemble, d\u00e9crivent compl\u00e8tement une entit\u00e9 ou une action sur une entit\u00e9. Aussi appel\u00e9 un enregistrement. Table : Un ensemble de lignes, conserv\u00e9es soit en m\u00e9moire (non persistante) soit sur un stockage permanent (persistant). Ensemble de r\u00e9sultats : Un autre nom pour une table non persistante, g\u00e9n\u00e9ralement le r\u00e9sultat d'une requ\u00eate SQL. Cl\u00e9 primaire : Une ou plusieurs colonnes pouvant \u00eatre utilis\u00e9es comme identifiant unique pour chaque ligne d'une table. Cl\u00e9 \u00e9trang\u00e8re : Une ou plusieurs colonnes pouvant \u00eatre utilis\u00e9es ensemble pour identifier une ligne unique dans une autre table. \u00c9tapes pour cr\u00e9er une nouvelle base de donn\u00e9es Mod\u00e8les Conceptuels et Logiques : mod\u00e9liser (ou concevoir) la base de donn\u00e9es au niveau conceptuel et logique nous pouvons utiliser la notation traditionnelle ERD , ou la notation UML , ou d'autres notations notation.md le mod\u00e8le conceptuel est tr\u00e8s g\u00e9n\u00e9ral, comme une premi\u00e8re \u00e9bauche, se concentrant uniquement sur les entit\u00e9s et les relations le mod\u00e8le logique ajoute des types de donn\u00e9es et des contraintes au mod\u00e8le conceptuel Mod\u00e8le de Donn\u00e9es Relationnel , aussi appel\u00e9 Mod\u00e8le Physique : convertir le mod\u00e8le logique en mod\u00e8le de donn\u00e9es relationnel nous pourrions utiliser d'autres mod\u00e8les de donn\u00e9es, tels que le mod\u00e8le objet-relationnel ou d'autres mod\u00e8les non relationnels (OO, NoSQL, ...) le mod\u00e8le relationnel est le mod\u00e8le le plus courant, et il ne peut pas \u00eatre ignor\u00e9 lors de l'apprentissage des bases de donn\u00e9es Cr\u00e9ation d'Instance de Base de Donn\u00e9es : g\u00e9n\u00e9rer les instructions SQL n\u00e9cessaires CREATE TABLE et autres pour cr\u00e9er une instance de base de donn\u00e9es, et la remplir avec des donn\u00e9es Une fois la base de donn\u00e9es cr\u00e9\u00e9e, vous pouvez commencer \u00e0 l'utiliser ( instructions SELECT , mises \u00e0 jour de donn\u00e9es, ...) Mod\u00e8le Entit\u00e9-Association (EA) Notation Traditionnelle Ensembles d'entit\u00e9s : rectangles Ensembles de relations : losanges Attributs : ovales Fl\u00e8ches pour connecter les ensembles de relations aux ensembles d'entit\u00e9s : triangle noir plein : au plus 1 triangle rond ouvert ou triangle transparent : exactement 1 pas de fl\u00e8ches : plusieurs Cl\u00e9s primaires : noms d'attributs soulign\u00e9s Notation UML notation.md Entit\u00e9s : rectangles Relations : lignes entre les entit\u00e9s, \u00e9ventuellement avec des \u00e9tiquettes et des fl\u00e8ches directionnelles \u00e0 c\u00f4t\u00e9 des \u00e9tiquettes Attributs : dans les rectangles des entit\u00e9s, sous les noms des entit\u00e9s Cardinalit\u00e9s pour connecter les relations aux entit\u00e9s : au plus 1 : 0..1 exactement 1 : 1 ou 1..1 plusieurs : * au moins 1 : 1..* Cl\u00e9s primaires : attributs avec la contrainte <<pk>> Cl\u00e9s \u00e9trang\u00e8res (dans les diagrammes physiques uniquement) : attributs avec la contrainte <<fk>> Contrainte de non-nullit\u00e9 : cercle avant le nom de l'attribut Base de Donn\u00e9es de Contacts Notation Traditionnelle Autre Notation Traditionnelle Notation UML Les Entit\u00e9s Faibles dans le Mod\u00e8le Entit\u00e9-Association D\u00e9finition Dans le mod\u00e8le entit\u00e9-association (E-A), une entit\u00e9 faible est une entit\u00e9 qui ne peut pas \u00eatre identifi\u00e9e de mani\u00e8re unique par ses propres attributs seuls. Elle d\u00e9pend d'une autre entit\u00e9, appel\u00e9e entit\u00e9 forte , pour son identification. Une entit\u00e9 faible est souvent utilis\u00e9e pour repr\u00e9senter des objets qui n'ont pas de signification ind\u00e9pendante sans leur entit\u00e9 forte associ\u00e9e. Caract\u00e9ristiques des Entit\u00e9s Faibles D\u00e9pendance d'Existence : Une entit\u00e9 faible ne peut pas exister sans son entit\u00e9 forte correspondante. Cl\u00e9 Partielle : L'identification d'une entit\u00e9 faible n\u00e9cessite une cl\u00e9 partielle (un ensemble d'attributs propres \u00e0 l'entit\u00e9 faible) en combinaison avec la cl\u00e9 primaire de l'entit\u00e9 forte. Relation d'Identification : Une relation sp\u00e9ciale, souvent appel\u00e9e relation d'identification, relie l'entit\u00e9 faible \u00e0 son entit\u00e9 forte. Exemple Consid\u00e9rons une base de donn\u00e9es pour une biblioth\u00e8que. Nous avons deux entit\u00e9s : Biblioth\u00e8que et Livre . Biblioth\u00e8que (entit\u00e9 forte) : Identifi\u00e9e par un attribut unique, comme ID_Biblioth\u00e8que . Livre (entit\u00e9 faible) : Identifi\u00e9 par une combinaison de ID_Biblioth\u00e8que et Num\u00e9ro_Livre . Un livre n'a pas de signification sans la biblioth\u00e8que \u00e0 laquelle il appartient. Comparaison avec la Conception Orient\u00e9e Objet (OO) en UML En conception orient\u00e9e objet avec UML (Unified Modeling Language), les concepts d'entit\u00e9s faibles et fortes peuvent \u00eatre compar\u00e9s aux relations de composition et d'agr\u00e9gation. Composition : Similaire aux entit\u00e9s faibles, une classe composante ne peut pas exister ind\u00e9pendamment de la classe composite. Par exemple, une classe Page peut \u00eatre une composante d'une classe Livre , et une page n'a pas de sens sans le livre auquel elle appartient. Agr\u00e9gation : Contrairement aux entit\u00e9s faibles, une classe agr\u00e9g\u00e9e peut exister ind\u00e9pendamment de la classe agr\u00e9gante. Par exemple, une classe Auteur peut \u00eatre associ\u00e9e \u00e0 plusieurs Livres , mais elle peut exister ind\u00e9pendamment de ces livres. Illustration UML En UML, une composition est repr\u00e9sent\u00e9e par un losange rempli \u00e0 l'extr\u00e9mit\u00e9 de l'association, tandis qu'une agr\u00e9gation est repr\u00e9sent\u00e9e par un losange vide. Composition : Code @startuml Livre *-- Page @enduml Agr\u00e9gation : Code @startuml Auteur o-- Livre @enduml Conclusion Les entit\u00e9s faibles sont un concept crucial dans le mod\u00e8le entit\u00e9-association pour mod\u00e9liser des objets d\u00e9pendants d'autres objets pour leur identification. En comparaison, la conception orient\u00e9e objet utilise des relations de composition pour repr\u00e9senter des d\u00e9pendances similaires, mais permet \u00e9galement des relations plus l\u00e2ches avec l'agr\u00e9gation. Comprendre ces concepts est essentiel pour concevoir des bases de donn\u00e9es relationnelles robustes et bien structur\u00e9es.","title":"Mod\u00e9lisation Entit\u00e9-Association"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#modelisation-entite-association","text":"Mod\u00e8le de donn\u00e9es relationnel (ou mod\u00e8le relationnel ) Mod\u00e8le Entit\u00e9-Association (ou Mod\u00e8le EA ) Exemples","title":"Mod\u00e9lisation Entit\u00e9-Association"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#modele-relationnel","text":"Relation (table) : table \u00e0 deux dimensions, ensemble (et non liste) de tuples Attributs : colonnes de la table, champs Sch\u00e9ma : Movies(title, year, length, filmType) Tuples : lignes dans la table, enregistrements Domaines : types","title":"Mod\u00e8le Relationnel"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#exemple-de-table-base-de-donnees-monde","text":"","title":"Exemple de Table (Base de Donn\u00e9es Monde)"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#table-country-donnees-dexemple-triees-par-nom-de-pays","text":"","title":"Table : country (donn\u00e9es d'exemple, tri\u00e9es par nom de pays)"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#terminologie","text":"Entit\u00e9 : Quelque chose d'int\u00e9r\u00eat pour la communaut\u00e9 des utilisateurs de la base de donn\u00e9es. clients, pi\u00e8ces, localisations g\u00e9ographiques Colonne : Un \u00e9l\u00e9ment de donn\u00e9es individuel stock\u00e9 dans une table. Ligne : Un ensemble de colonnes qui, ensemble, d\u00e9crivent compl\u00e8tement une entit\u00e9 ou une action sur une entit\u00e9. Aussi appel\u00e9 un enregistrement. Table : Un ensemble de lignes, conserv\u00e9es soit en m\u00e9moire (non persistante) soit sur un stockage permanent (persistant). Ensemble de r\u00e9sultats : Un autre nom pour une table non persistante, g\u00e9n\u00e9ralement le r\u00e9sultat d'une requ\u00eate SQL. Cl\u00e9 primaire : Une ou plusieurs colonnes pouvant \u00eatre utilis\u00e9es comme identifiant unique pour chaque ligne d'une table. Cl\u00e9 \u00e9trang\u00e8re : Une ou plusieurs colonnes pouvant \u00eatre utilis\u00e9es ensemble pour identifier une ligne unique dans une autre table.","title":"Terminologie"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#etapes-pour-creer-une-nouvelle-base-de-donnees","text":"Mod\u00e8les Conceptuels et Logiques : mod\u00e9liser (ou concevoir) la base de donn\u00e9es au niveau conceptuel et logique nous pouvons utiliser la notation traditionnelle ERD , ou la notation UML , ou d'autres notations notation.md le mod\u00e8le conceptuel est tr\u00e8s g\u00e9n\u00e9ral, comme une premi\u00e8re \u00e9bauche, se concentrant uniquement sur les entit\u00e9s et les relations le mod\u00e8le logique ajoute des types de donn\u00e9es et des contraintes au mod\u00e8le conceptuel Mod\u00e8le de Donn\u00e9es Relationnel , aussi appel\u00e9 Mod\u00e8le Physique : convertir le mod\u00e8le logique en mod\u00e8le de donn\u00e9es relationnel nous pourrions utiliser d'autres mod\u00e8les de donn\u00e9es, tels que le mod\u00e8le objet-relationnel ou d'autres mod\u00e8les non relationnels (OO, NoSQL, ...) le mod\u00e8le relationnel est le mod\u00e8le le plus courant, et il ne peut pas \u00eatre ignor\u00e9 lors de l'apprentissage des bases de donn\u00e9es Cr\u00e9ation d'Instance de Base de Donn\u00e9es : g\u00e9n\u00e9rer les instructions SQL n\u00e9cessaires CREATE TABLE et autres pour cr\u00e9er une instance de base de donn\u00e9es, et la remplir avec des donn\u00e9es Une fois la base de donn\u00e9es cr\u00e9\u00e9e, vous pouvez commencer \u00e0 l'utiliser ( instructions SELECT , mises \u00e0 jour de donn\u00e9es, ...)","title":"\u00c9tapes pour cr\u00e9er une nouvelle base de donn\u00e9es"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#modele-entite-association-ea","text":"","title":"Mod\u00e8le Entit\u00e9-Association (EA)"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#notation-traditionnelle","text":"Ensembles d'entit\u00e9s : rectangles Ensembles de relations : losanges Attributs : ovales Fl\u00e8ches pour connecter les ensembles de relations aux ensembles d'entit\u00e9s : triangle noir plein : au plus 1 triangle rond ouvert ou triangle transparent : exactement 1 pas de fl\u00e8ches : plusieurs Cl\u00e9s primaires : noms d'attributs soulign\u00e9s","title":"Notation Traditionnelle"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#notation-uml","text":"notation.md Entit\u00e9s : rectangles Relations : lignes entre les entit\u00e9s, \u00e9ventuellement avec des \u00e9tiquettes et des fl\u00e8ches directionnelles \u00e0 c\u00f4t\u00e9 des \u00e9tiquettes Attributs : dans les rectangles des entit\u00e9s, sous les noms des entit\u00e9s Cardinalit\u00e9s pour connecter les relations aux entit\u00e9s : au plus 1 : 0..1 exactement 1 : 1 ou 1..1 plusieurs : * au moins 1 : 1..* Cl\u00e9s primaires : attributs avec la contrainte <<pk>> Cl\u00e9s \u00e9trang\u00e8res (dans les diagrammes physiques uniquement) : attributs avec la contrainte <<fk>> Contrainte de non-nullit\u00e9 : cercle avant le nom de l'attribut","title":"Notation UML"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#base-de-donnees-de-contacts","text":"","title":"Base de Donn\u00e9es de Contacts"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#notation-traditionnelle_1","text":"","title":"Notation Traditionnelle"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#autre-notation-traditionnelle","text":"","title":"Autre Notation Traditionnelle"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#notation-uml_1","text":"","title":"Notation UML"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#les-entites-faibles-dans-le-modele-entite-association","text":"","title":"Les Entit\u00e9s Faibles dans le Mod\u00e8le Entit\u00e9-Association"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#definition","text":"Dans le mod\u00e8le entit\u00e9-association (E-A), une entit\u00e9 faible est une entit\u00e9 qui ne peut pas \u00eatre identifi\u00e9e de mani\u00e8re unique par ses propres attributs seuls. Elle d\u00e9pend d'une autre entit\u00e9, appel\u00e9e entit\u00e9 forte , pour son identification. Une entit\u00e9 faible est souvent utilis\u00e9e pour repr\u00e9senter des objets qui n'ont pas de signification ind\u00e9pendante sans leur entit\u00e9 forte associ\u00e9e.","title":"D\u00e9finition"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#caracteristiques-des-entites-faibles","text":"D\u00e9pendance d'Existence : Une entit\u00e9 faible ne peut pas exister sans son entit\u00e9 forte correspondante. Cl\u00e9 Partielle : L'identification d'une entit\u00e9 faible n\u00e9cessite une cl\u00e9 partielle (un ensemble d'attributs propres \u00e0 l'entit\u00e9 faible) en combinaison avec la cl\u00e9 primaire de l'entit\u00e9 forte. Relation d'Identification : Une relation sp\u00e9ciale, souvent appel\u00e9e relation d'identification, relie l'entit\u00e9 faible \u00e0 son entit\u00e9 forte.","title":"Caract\u00e9ristiques des Entit\u00e9s Faibles"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#exemple","text":"Consid\u00e9rons une base de donn\u00e9es pour une biblioth\u00e8que. Nous avons deux entit\u00e9s : Biblioth\u00e8que et Livre . Biblioth\u00e8que (entit\u00e9 forte) : Identifi\u00e9e par un attribut unique, comme ID_Biblioth\u00e8que . Livre (entit\u00e9 faible) : Identifi\u00e9 par une combinaison de ID_Biblioth\u00e8que et Num\u00e9ro_Livre . Un livre n'a pas de signification sans la biblioth\u00e8que \u00e0 laquelle il appartient.","title":"Exemple"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#comparaison-avec-la-conception-orientee-objet-oo-en-uml","text":"En conception orient\u00e9e objet avec UML (Unified Modeling Language), les concepts d'entit\u00e9s faibles et fortes peuvent \u00eatre compar\u00e9s aux relations de composition et d'agr\u00e9gation. Composition : Similaire aux entit\u00e9s faibles, une classe composante ne peut pas exister ind\u00e9pendamment de la classe composite. Par exemple, une classe Page peut \u00eatre une composante d'une classe Livre , et une page n'a pas de sens sans le livre auquel elle appartient. Agr\u00e9gation : Contrairement aux entit\u00e9s faibles, une classe agr\u00e9g\u00e9e peut exister ind\u00e9pendamment de la classe agr\u00e9gante. Par exemple, une classe Auteur peut \u00eatre associ\u00e9e \u00e0 plusieurs Livres , mais elle peut exister ind\u00e9pendamment de ces livres.","title":"Comparaison avec la Conception Orient\u00e9e Objet (OO) en UML"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#illustration-uml","text":"En UML, une composition est repr\u00e9sent\u00e9e par un losange rempli \u00e0 l'extr\u00e9mit\u00e9 de l'association, tandis qu'une agr\u00e9gation est repr\u00e9sent\u00e9e par un losange vide. Composition : Code @startuml Livre *-- Page @enduml Agr\u00e9gation : Code @startuml Auteur o-- Livre @enduml","title":"Illustration UML"},{"location":"4.%20Mod%C3%A9lisation/01-mod%C3%A9lisation-EA/#conclusion","text":"Les entit\u00e9s faibles sont un concept crucial dans le mod\u00e8le entit\u00e9-association pour mod\u00e9liser des objets d\u00e9pendants d'autres objets pour leur identification. En comparaison, la conception orient\u00e9e objet utilise des relations de composition pour repr\u00e9senter des d\u00e9pendances similaires, mais permet \u00e9galement des relations plus l\u00e2ches avec l'agr\u00e9gation. Comprendre ces concepts est essentiel pour concevoir des bases de donn\u00e9es relationnelles robustes et bien structur\u00e9es.","title":"Conclusion"},{"location":"4.%20Mod%C3%A9lisation/02-notation/","text":"Diff\u00e9rentes notations pour les DEA Notation traditionnelle du diagramme entit\u00e9-association Remarque : il est difficile d'inclure des losanges pour les associations avec PlantUML, mais nous pouvons nommer les associations avec une \u00e9tiquette. Les \u00e9tiquettes ne sont pas utilis\u00e9es dans le premier diagramme en raison des bo\u00eetes de notes proches des associations. Le deuxi\u00e8me diagramme montre les \u00e9tiquettes des associations au lieu des bo\u00eetes de notes. Nous incluons g\u00e9n\u00e9ralement des bo\u00eetes de notes uniquement dans certains cas, pas sur toutes les associations. Il est souvent recommand\u00e9 de nommer les associations pour clarifier leur objectif ou leur signification, non seulement en utilisant la notation traditionnelle ERD, mais aussi avec d'autres notations. Diagramme avec \u00e9tiquettes Code @startuml T1 -- T2 note on link: plusieurs-\u00e0-plusieurs\\nentre T1 et T2 T2 --> T3 note on link: plusieurs-\u00e0-un\\nentre T2 et T3 T3 --|> T4 note on link: plusieurs-\u00e0-exactement-un\\nentre T3 et T4 T2 <-> T5 note on link: un-\u00e0-un\\nentre T2 et T5 T5 <|--|> T6 note on link: exactement-un-\u00e0-exactement-un\\nentre T5 et T6 @enduml Diagramme sans \u00e9tiquettes Nous pouvons inclure < ou > dans les \u00e9tiquettes pour aider \u00e0 lire l'association plus facilement. Ce n'est pas tr\u00e8s utile dans cet exemple g\u00e9n\u00e9rique, mais ce sera utile dans les exemples sp\u00e9cifiques. Code @startuml T1 -- T2: rel_1 T2 --> T3: rel_2 > T3 --|> T4: rel_3 > T2 <-> T5: < rel_4 T5 <|--|> T6: rel_5 @enduml Utilisation des cardinalit\u00e9s (ou multiplicit\u00e9s) \u00e0 la place Remarques : * peut \u00eatre remplac\u00e9 par n , ou parfois m . C'est la notation pr\u00e9f\u00e9r\u00e9e, avec des \u00e9tiquettes ajout\u00e9es sur les associations si n\u00e9cessaire. Code @startuml T1 \"*\" -- \"*\" T2 note on link: plusieurs-\u00e0-plusieurs\\nentre T1 et T2 T2 \"*\" -- \"0..1\" T3 note on link: plusieurs-\u00e0-un\\nentre T2 et T3 T3 \"*\" -- \"1\" T4 note on link: plusieurs-\u00e0-exactement-un\\nentre T3 et T4 T2 \"0..1\" - \"0..1\" T5 note on link: un-\u00e0-un\\nentre T2 et T5 T5 \"1\" -- \"1\" T6 note on link: exactement-un-\u00e0-exactement-un\\nentre T5 et T6 T3 \"1..*\" - \"1..*\" T6 note on link: au-moins-un-\u00e0-au-moins-un\\nentre T3 et T6 @enduml Notation en pied-de-corbeau Code @startuml T1 }o--o{ T2 note on link: plusieurs-\u00e0-plusieurs\\nentre T1 et T2 T2 }o--o| T3 note on link: plusieurs-\u00e0-un\\nentre T2 et T3 T3 }o--|| T4 note on link: plusieurs-\u00e0-exactement-un\\nentre T3 et T4 T2 |o-o| T5 note on link: un-\u00e0-un\\nentre T2 et T5 T5 ||--|| T6 note on link: exactement-un-\u00e0-exactement-un\\nentre T5 et T6 T3 }|-|{ T6 note on link: au-moins-un-\u00e0-au-moins-un\\nentre T3 et T6 @enduml Diff\u00e9rents types de diagrammes EA avec PlantUML Il existe diff\u00e9rents types de DEA : conceptuel logique physique Les mod\u00e8les conceptuels et logiques ne contiennent pas de cl\u00e9s \u00e9trang\u00e8res. Il y a des associations, qui seront \u00e9ventuellement converties en cl\u00e9s \u00e9trang\u00e8res, et peut-\u00eatre en tables, \u00e0 une \u00e9tape ult\u00e9rieure, g\u00e9n\u00e9ralement dans les mod\u00e8les physiques. Les mod\u00e8les conceptuels sont tr\u00e8s basiques, sans types de donn\u00e9es ni contraintes. Les types de donn\u00e9es et les contraintes sont g\u00e9n\u00e9ralement ajout\u00e9s aux mod\u00e8les logiques . Les associations sont traduites en tables et en cl\u00e9s \u00e9trang\u00e8res dans les mod\u00e8les physiques . Les diagrammes produits par Datagrip peuvent \u00eatre consid\u00e9r\u00e9s comme des mod\u00e8les physiques , r\u00e9tro-con\u00e7us \u00e0 partir d'une base de donn\u00e9es existante. Base de donn\u00e9es de contacts Diagramme de base (Conceptuel) Code @startuml entity Call { call_id -- phone datetime } entity Contact { contact_id -- name phone address email } Call \"*\" -- \"0..1\" Contact : \" \" @enduml Avec types de donn\u00e9es et contraintes (Logique) Le cercle avant un nom de colonne signifie obligatoire , et l'absence de ce cercle signifie optionnel . Code @startuml entity Call { * call_id : INT -- phone : VARCHAR datetime : DATETIME } entity Contact { * contact_id : INT -- name : VARCHAR phone : VARCHAR address : VARCHAR email : VARCHAR } Call \"*\" -- \"0..1\" Contact : \" \" @enduml","title":"Diff\u00e9rentes notations pour les DEA"},{"location":"4.%20Mod%C3%A9lisation/02-notation/#differentes-notations-pour-les-dea","text":"","title":"Diff\u00e9rentes notations pour les DEA"},{"location":"4.%20Mod%C3%A9lisation/02-notation/#notation-traditionnelle-du-diagramme-entite-association","text":"Remarque : il est difficile d'inclure des losanges pour les associations avec PlantUML, mais nous pouvons nommer les associations avec une \u00e9tiquette. Les \u00e9tiquettes ne sont pas utilis\u00e9es dans le premier diagramme en raison des bo\u00eetes de notes proches des associations. Le deuxi\u00e8me diagramme montre les \u00e9tiquettes des associations au lieu des bo\u00eetes de notes. Nous incluons g\u00e9n\u00e9ralement des bo\u00eetes de notes uniquement dans certains cas, pas sur toutes les associations. Il est souvent recommand\u00e9 de nommer les associations pour clarifier leur objectif ou leur signification, non seulement en utilisant la notation traditionnelle ERD, mais aussi avec d'autres notations.","title":"Notation traditionnelle du diagramme entit\u00e9-association"},{"location":"4.%20Mod%C3%A9lisation/02-notation/#diagramme-avec-etiquettes","text":"Code @startuml T1 -- T2 note on link: plusieurs-\u00e0-plusieurs\\nentre T1 et T2 T2 --> T3 note on link: plusieurs-\u00e0-un\\nentre T2 et T3 T3 --|> T4 note on link: plusieurs-\u00e0-exactement-un\\nentre T3 et T4 T2 <-> T5 note on link: un-\u00e0-un\\nentre T2 et T5 T5 <|--|> T6 note on link: exactement-un-\u00e0-exactement-un\\nentre T5 et T6 @enduml","title":"Diagramme avec \u00e9tiquettes"},{"location":"4.%20Mod%C3%A9lisation/02-notation/#diagramme-sans-etiquettes","text":"Nous pouvons inclure < ou > dans les \u00e9tiquettes pour aider \u00e0 lire l'association plus facilement. Ce n'est pas tr\u00e8s utile dans cet exemple g\u00e9n\u00e9rique, mais ce sera utile dans les exemples sp\u00e9cifiques. Code @startuml T1 -- T2: rel_1 T2 --> T3: rel_2 > T3 --|> T4: rel_3 > T2 <-> T5: < rel_4 T5 <|--|> T6: rel_5 @enduml","title":"Diagramme sans \u00e9tiquettes"},{"location":"4.%20Mod%C3%A9lisation/02-notation/#utilisation-des-cardinalites-ou-multiplicites-a-la-place","text":"Remarques : * peut \u00eatre remplac\u00e9 par n , ou parfois m . C'est la notation pr\u00e9f\u00e9r\u00e9e, avec des \u00e9tiquettes ajout\u00e9es sur les associations si n\u00e9cessaire. Code @startuml T1 \"*\" -- \"*\" T2 note on link: plusieurs-\u00e0-plusieurs\\nentre T1 et T2 T2 \"*\" -- \"0..1\" T3 note on link: plusieurs-\u00e0-un\\nentre T2 et T3 T3 \"*\" -- \"1\" T4 note on link: plusieurs-\u00e0-exactement-un\\nentre T3 et T4 T2 \"0..1\" - \"0..1\" T5 note on link: un-\u00e0-un\\nentre T2 et T5 T5 \"1\" -- \"1\" T6 note on link: exactement-un-\u00e0-exactement-un\\nentre T5 et T6 T3 \"1..*\" - \"1..*\" T6 note on link: au-moins-un-\u00e0-au-moins-un\\nentre T3 et T6 @enduml","title":"Utilisation des cardinalit\u00e9s (ou multiplicit\u00e9s) \u00e0 la place"},{"location":"4.%20Mod%C3%A9lisation/02-notation/#notation-en-pied-de-corbeau","text":"Code @startuml T1 }o--o{ T2 note on link: plusieurs-\u00e0-plusieurs\\nentre T1 et T2 T2 }o--o| T3 note on link: plusieurs-\u00e0-un\\nentre T2 et T3 T3 }o--|| T4 note on link: plusieurs-\u00e0-exactement-un\\nentre T3 et T4 T2 |o-o| T5 note on link: un-\u00e0-un\\nentre T2 et T5 T5 ||--|| T6 note on link: exactement-un-\u00e0-exactement-un\\nentre T5 et T6 T3 }|-|{ T6 note on link: au-moins-un-\u00e0-au-moins-un\\nentre T3 et T6 @enduml","title":"Notation en pied-de-corbeau"},{"location":"4.%20Mod%C3%A9lisation/02-notation/#differents-types-de-diagrammes-ea-avec-plantuml","text":"Il existe diff\u00e9rents types de DEA : conceptuel logique physique Les mod\u00e8les conceptuels et logiques ne contiennent pas de cl\u00e9s \u00e9trang\u00e8res. Il y a des associations, qui seront \u00e9ventuellement converties en cl\u00e9s \u00e9trang\u00e8res, et peut-\u00eatre en tables, \u00e0 une \u00e9tape ult\u00e9rieure, g\u00e9n\u00e9ralement dans les mod\u00e8les physiques. Les mod\u00e8les conceptuels sont tr\u00e8s basiques, sans types de donn\u00e9es ni contraintes. Les types de donn\u00e9es et les contraintes sont g\u00e9n\u00e9ralement ajout\u00e9s aux mod\u00e8les logiques . Les associations sont traduites en tables et en cl\u00e9s \u00e9trang\u00e8res dans les mod\u00e8les physiques . Les diagrammes produits par Datagrip peuvent \u00eatre consid\u00e9r\u00e9s comme des mod\u00e8les physiques , r\u00e9tro-con\u00e7us \u00e0 partir d'une base de donn\u00e9es existante.","title":"Diff\u00e9rents types de diagrammes EA avec PlantUML"},{"location":"4.%20Mod%C3%A9lisation/02-notation/#base-de-donnees-de-contacts","text":"","title":"Base de donn\u00e9es de contacts"},{"location":"4.%20Mod%C3%A9lisation/02-notation/#diagramme-de-base-conceptuel","text":"Code @startuml entity Call { call_id -- phone datetime } entity Contact { contact_id -- name phone address email } Call \"*\" -- \"0..1\" Contact : \" \" @enduml","title":"Diagramme de base (Conceptuel)"},{"location":"4.%20Mod%C3%A9lisation/02-notation/#avec-types-de-donnees-et-contraintes-logique","text":"Le cercle avant un nom de colonne signifie obligatoire , et l'absence de ce cercle signifie optionnel . Code @startuml entity Call { * call_id : INT -- phone : VARCHAR datetime : DATETIME } entity Contact { * contact_id : INT -- name : VARCHAR phone : VARCHAR address : VARCHAR email : VARCHAR } Call \"*\" -- \"0..1\" Contact : \" \" @enduml","title":"Avec types de donn\u00e9es et contraintes (Logique)"},{"location":"4.%20Mod%C3%A9lisation/03-exemples/","text":"Exemples Base de Donn\u00e9es Bancaire Simple L'application de base de donn\u00e9es appel\u00e9e BANK, qui suit les clients d'une banque et leurs comptes. Les clients sont identifi\u00e9s par leur nom, adresse, t\u00e9l\u00e9phone et ID client. Les comptes ont des num\u00e9ros, des types (par exemple, \u00e9pargne, courant) et des soldes. Enregistrer \u00e9galement le(s) client(s) qui poss\u00e8dent un compte. Une transaction a lieu sur un seul compte. Chaque transaction a un ID, un code, un montant, une date, une heure et une description. Traditionnelle UML Code @startuml entity Customer { customer_id -- name address phone } entity Account { number -- type balance } entity Transaction { transaction_id -- code amount date time description } Customer \"1..*\" -- \" * \" Account: > owns Transaction \" * \" -- \"1\" Account: > takes place @enduml Base de Donn\u00e9es d'un Coll\u00e8ge Dans cette base de donn\u00e9es, vous devez enregistrer les \u00e9tudiants, les enseignants, les cours, les notes et les conseillers \u00e9tudiants. Chaque \u00e9tudiant a un num\u00e9ro d'\u00e9tudiant, un nom et une adresse. Chaque enseignant a un num\u00e9ro d'employ\u00e9, un nom, un num\u00e9ro de bureau, un rang et un num\u00e9ro de t\u00e9l\u00e9phone. Pour chaque cours, son code, son nom et son nombre de cr\u00e9dits sont enregistr\u00e9s. Une note est donn\u00e9e \u00e0 un \u00e9tudiant par un enseignant pour un cours enseign\u00e9 pendant un semestre (A, B ou C) d'une ann\u00e9e particuli\u00e8re. Les conseillers des \u00e9tudiants sont des enseignants. Traditionnelle (avec association grade ) Traditionnelle (avec entit\u00e9 grade ) UML Base de Donn\u00e9es des Droits d'Auteur de Musique Vous \u00eates charg\u00e9 de concevoir une base de donn\u00e9es pour une agence de collecte de droits d'auteur de musique, incluant les informations suivantes : Un auteur a un num\u00e9ro d'auteur, un pr\u00e9nom, un nom de famille et une adresse. Les auteurs peuvent \u00eatre sign\u00e9s avec un \u00e9diteur. Les \u00e9diteurs signent de nombreux auteurs. Les \u00e9diteurs ont un code \u00e9diteur, un nom et une adresse. Les auteurs \u00e9crivent des \u0153uvres. Les \u0153uvres peuvent avoir plus d'un auteur. Chaque auteur \u00e9crit un pourcentage d'une \u0153uvre. Une \u0153uvre a un titre, une dur\u00e9e et une description. Les \u0153uvres sont interpr\u00e9t\u00e9es lors de concerts (ou spectacles de musique) par un groupe. Un concert a une date et un lieu. Traditionnelle UML Code @startuml entity Writer { number first name last name address } entity Work { id title duration description } entity Publisher { code name address } entity Act { id name address } entity Concert { id date venue } Writer \"*\" -- \"0..1\" Publisher: > signs contract entity writes { percentage } Writer \"1\" - \"*\" writes: \" \" writes \"*\" - \"1\" Work: \" \" entity performed { } Work \"1\" -- \"*\" performed Act \"1\" -- \"*\" performed Concert \"1\" -- \"*\" performed @enduml Appartements \u00e0 Louer Vous devez concevoir une base de donn\u00e9es pour g\u00e9rer les informations d'une entreprise g\u00e9rant un ensemble d'appartements \u00e0 louer. Cette entreprise g\u00e8re de nombreux b\u00e2timents, chacun compos\u00e9 d'au moins un appartement. Supposons qu'un appartement puisse \u00eatre identifi\u00e9 de mani\u00e8re unique par son num\u00e9ro dans son b\u00e2timent. Pour chaque appartement, il y a au moins un locataire, s'il est lou\u00e9. Le loyer mensuel et la date de fin de bail (si connue) doivent \u00eatre inclus. Pour chaque appartement disponible prochainement, la date de disponibilit\u00e9 et le loyer mensuel demand\u00e9 doivent \u00eatre inclus. Pour chaque locataire, le pr\u00e9nom, le nom de famille, le num\u00e9ro de t\u00e9l\u00e9phone \u00e0 domicile, le nom de son employeur et son num\u00e9ro de t\u00e9l\u00e9phone professionnel doivent \u00eatre inclus. Cette date de fin de bail n'est pas toujours le jour suivant la fin du bail pr\u00e9c\u00e9dent car un appartement pourrait \u00eatre indisponible pendant un certain temps en raison de r\u00e9novations, par exemple. En suivant un raisonnement similaire, le loyer mensuel demand\u00e9 n'est pas n\u00e9cessairement le m\u00eame que le loyer actuel. Entit\u00e9 Faible : Appartement Notation Traditionnelle Traditionnelle 1 Traditionnelle 2 UML Code @startuml skinparam linetype ortho skinparam classFontSize 20 skinparam classFontName Source Code Pro hide empty methods entity Apartment { * number: integer asking_rent: numeric(10, 2) available_on: date } entity Building { * building_id: integer <<generated>> <<pk>> -- name: text * address: text } Apartment \"1..*\" --* \"1\" Building : > located in @enduml Appartements \u00e0 Louer Diagramme Complet Traditionnelle UML Diagramme Am\u00e9lior\u00e9 Traditionnelle UML","title":"Exemples"},{"location":"4.%20Mod%C3%A9lisation/03-exemples/#exemples","text":"","title":"Exemples"},{"location":"4.%20Mod%C3%A9lisation/03-exemples/#base-de-donnees-bancaire-simple","text":"L'application de base de donn\u00e9es appel\u00e9e BANK, qui suit les clients d'une banque et leurs comptes. Les clients sont identifi\u00e9s par leur nom, adresse, t\u00e9l\u00e9phone et ID client. Les comptes ont des num\u00e9ros, des types (par exemple, \u00e9pargne, courant) et des soldes. Enregistrer \u00e9galement le(s) client(s) qui poss\u00e8dent un compte. Une transaction a lieu sur un seul compte. Chaque transaction a un ID, un code, un montant, une date, une heure et une description. Traditionnelle UML Code @startuml entity Customer { customer_id -- name address phone } entity Account { number -- type balance } entity Transaction { transaction_id -- code amount date time description } Customer \"1..*\" -- \" * \" Account: > owns Transaction \" * \" -- \"1\" Account: > takes place @enduml","title":"Base de Donn\u00e9es Bancaire Simple"},{"location":"4.%20Mod%C3%A9lisation/03-exemples/#base-de-donnees-dun-college","text":"Dans cette base de donn\u00e9es, vous devez enregistrer les \u00e9tudiants, les enseignants, les cours, les notes et les conseillers \u00e9tudiants. Chaque \u00e9tudiant a un num\u00e9ro d'\u00e9tudiant, un nom et une adresse. Chaque enseignant a un num\u00e9ro d'employ\u00e9, un nom, un num\u00e9ro de bureau, un rang et un num\u00e9ro de t\u00e9l\u00e9phone. Pour chaque cours, son code, son nom et son nombre de cr\u00e9dits sont enregistr\u00e9s. Une note est donn\u00e9e \u00e0 un \u00e9tudiant par un enseignant pour un cours enseign\u00e9 pendant un semestre (A, B ou C) d'une ann\u00e9e particuli\u00e8re. Les conseillers des \u00e9tudiants sont des enseignants. Traditionnelle (avec association grade ) Traditionnelle (avec entit\u00e9 grade ) UML","title":"Base de Donn\u00e9es d'un Coll\u00e8ge"},{"location":"4.%20Mod%C3%A9lisation/03-exemples/#base-de-donnees-des-droits-dauteur-de-musique","text":"Vous \u00eates charg\u00e9 de concevoir une base de donn\u00e9es pour une agence de collecte de droits d'auteur de musique, incluant les informations suivantes : Un auteur a un num\u00e9ro d'auteur, un pr\u00e9nom, un nom de famille et une adresse. Les auteurs peuvent \u00eatre sign\u00e9s avec un \u00e9diteur. Les \u00e9diteurs signent de nombreux auteurs. Les \u00e9diteurs ont un code \u00e9diteur, un nom et une adresse. Les auteurs \u00e9crivent des \u0153uvres. Les \u0153uvres peuvent avoir plus d'un auteur. Chaque auteur \u00e9crit un pourcentage d'une \u0153uvre. Une \u0153uvre a un titre, une dur\u00e9e et une description. Les \u0153uvres sont interpr\u00e9t\u00e9es lors de concerts (ou spectacles de musique) par un groupe. Un concert a une date et un lieu. Traditionnelle UML Code @startuml entity Writer { number first name last name address } entity Work { id title duration description } entity Publisher { code name address } entity Act { id name address } entity Concert { id date venue } Writer \"*\" -- \"0..1\" Publisher: > signs contract entity writes { percentage } Writer \"1\" - \"*\" writes: \" \" writes \"*\" - \"1\" Work: \" \" entity performed { } Work \"1\" -- \"*\" performed Act \"1\" -- \"*\" performed Concert \"1\" -- \"*\" performed @enduml","title":"Base de Donn\u00e9es des Droits d'Auteur de Musique"},{"location":"4.%20Mod%C3%A9lisation/03-exemples/#appartements-a-louer","text":"Vous devez concevoir une base de donn\u00e9es pour g\u00e9rer les informations d'une entreprise g\u00e9rant un ensemble d'appartements \u00e0 louer. Cette entreprise g\u00e8re de nombreux b\u00e2timents, chacun compos\u00e9 d'au moins un appartement. Supposons qu'un appartement puisse \u00eatre identifi\u00e9 de mani\u00e8re unique par son num\u00e9ro dans son b\u00e2timent. Pour chaque appartement, il y a au moins un locataire, s'il est lou\u00e9. Le loyer mensuel et la date de fin de bail (si connue) doivent \u00eatre inclus. Pour chaque appartement disponible prochainement, la date de disponibilit\u00e9 et le loyer mensuel demand\u00e9 doivent \u00eatre inclus. Pour chaque locataire, le pr\u00e9nom, le nom de famille, le num\u00e9ro de t\u00e9l\u00e9phone \u00e0 domicile, le nom de son employeur et son num\u00e9ro de t\u00e9l\u00e9phone professionnel doivent \u00eatre inclus. Cette date de fin de bail n'est pas toujours le jour suivant la fin du bail pr\u00e9c\u00e9dent car un appartement pourrait \u00eatre indisponible pendant un certain temps en raison de r\u00e9novations, par exemple. En suivant un raisonnement similaire, le loyer mensuel demand\u00e9 n'est pas n\u00e9cessairement le m\u00eame que le loyer actuel.","title":"Appartements \u00e0 Louer"},{"location":"4.%20Mod%C3%A9lisation/03-exemples/#entite-faible-appartement","text":"","title":"Entit\u00e9 Faible : Appartement"},{"location":"4.%20Mod%C3%A9lisation/03-exemples/#notation-traditionnelle","text":"Traditionnelle 1 Traditionnelle 2 UML Code @startuml skinparam linetype ortho skinparam classFontSize 20 skinparam classFontName Source Code Pro hide empty methods entity Apartment { * number: integer asking_rent: numeric(10, 2) available_on: date } entity Building { * building_id: integer <<generated>> <<pk>> -- name: text * address: text } Apartment \"1..*\" --* \"1\" Building : > located in @enduml","title":"Notation Traditionnelle"},{"location":"4.%20Mod%C3%A9lisation/03-exemples/#appartements-a-louer_1","text":"","title":"Appartements \u00e0 Louer"},{"location":"4.%20Mod%C3%A9lisation/03-exemples/#diagramme-complet","text":"Traditionnelle UML","title":"Diagramme Complet"},{"location":"4.%20Mod%C3%A9lisation/03-exemples/#diagramme-ameliore","text":"Traditionnelle UML","title":"Diagramme Am\u00e9lior\u00e9"},{"location":"4.%20Mod%C3%A9lisation/04-ea-vers-relationnel/","text":"Conversion d'un diagramme EA en sch\u00e9ma relationnel Sch\u00e9ma relationnel Sch\u00e9ma relationnel (mod\u00e8le de donn\u00e9es relationnel) : ensemble de sch\u00e9mas de tables Sch\u00e9ma de table : forme basique : nom de la table et ensemble de noms de colonnes employee(emp_id, name, address, dept_id) Sch\u00e9ma de table : forme d\u00e9taill\u00e9e : nom de la table et ensemble de noms de colonnes plus types de donn\u00e9es et cl\u00e9s primaires, et parfois d'autres contraintes telles que NOT NULL les colonnes faisant partie de la cl\u00e9 primaire sont soit soulign\u00e9es, soit en majuscules pour \u00e9viter des probl\u00e8mes avec certains SGBD, \u00e9crivez les noms des tables et des colonnes uniquement en minuscules dans les instructions CREATE TABLE les colonnes faisant partie d'une cl\u00e9 \u00e9trang\u00e8re sont suivies d'un * exemple : employee(EMP_ID integer, name text, address text, dept_id* integer) d'autres formes interm\u00e9diaires entre les deux pr\u00e9c\u00e9dentes sont \u00e9galement possibles Diagramme physique : \u00e0 partir d'un diagramme logique, convertir toutes les relations en cl\u00e9s \u00e9trang\u00e8res et entit\u00e9s suppl\u00e9mentaires (ou tables) si n\u00e9cessaire \u00c9tapes Chaque entit\u00e9 du diagramme ER sera une table dans le sch\u00e9ma relationnel tous les attributs de l'entit\u00e9 deviennent des colonnes dans le sch\u00e9ma de table les attributs de cl\u00e9 primaire deviennent des colonnes de cl\u00e9 primaire dans le sch\u00e9ma de table Chaque association plusieurs-\u00e0-plusieurs sera une table les attributs de l'association sont ajout\u00e9s au sch\u00e9ma de table ajouter une colonne de cl\u00e9 \u00e9trang\u00e8re (ou des colonnes) pour chaque table impliqu\u00e9e dans l'association choisir une cl\u00e9 primaire parmi les colonnes actuelles, ou ajouter de nouvelles colonnes de cl\u00e9 primaire (comme une colonne ID) Conseil : comptez le nombre d'entit\u00e9s dans le diagramme ER, ajoutez le nombre d'associations plusieurs-\u00e0-plusieurs, et ce nombre sera le nombre de tables dans le sch\u00e9ma relationnel Les associations plusieurs-\u00e0-un ne deviendront PAS des tables \u00e0 la place, ajoutez une colonne de cl\u00e9 \u00e9trang\u00e8re du c\u00f4t\u00e9 plusieurs r\u00e9f\u00e9rant la cl\u00e9 primaire du c\u00f4t\u00e9 un si le c\u00f4t\u00e9 un est en fait exactement un , alors rendez la colonne de cl\u00e9 \u00e9trang\u00e8re NOT NULL Les associations un-\u00e0-un ne deviendront PAS des tables traitez les associations un-\u00e0-un de mani\u00e8re similaire aux associations plusieurs-\u00e0-un, sauf que vous ne prenez qu'une des cl\u00e9s primaires comme cl\u00e9 \u00e9trang\u00e8re de l'autre c\u00f4t\u00e9 il n'y a pas de r\u00e8gle parfaite sur quel c\u00f4t\u00e9 choisir, cela d\u00e9pend du contexte si c'est une association exactement-un-\u00e0-au-plus-un, alors g\u00e9n\u00e9ralement la cl\u00e9 \u00e9trang\u00e8re sera du c\u00f4t\u00e9 au-plus-un (pointant vers le c\u00f4t\u00e9 exactement-un) Exemples Contacts R\u00e9ponse contact(CONTACT_ID, name, phone, address, email) call(CALL_ID, phone, date, time, contact_id*) Simple Bank R\u00e9ponse customer(ID, name, address, phone) account(NUMBER, type, balance) transaction(ID, code, amount, date, time, description, account_number*) customer_account(id*, number*) Coll\u00e8ge R\u00e9ponse Student(STUDENT_ID, name, phone, advisor_id*) Lecturer(LECTURER_ID, name, office, rank, phone) Course(CODE, name, credits) Grade(GRADE_ID, student_id* NOT NULL, lecturer_id* NOT NULL, course_code* NOT NULL, semester, year, result) Music R\u00e9ponse writer(WRITER_ID, first_name, last_name, address, pub_id*) work(WORK_ID, title, duration, description) publisher(PUB_ID, code, name, address) act(ACT_ID, name, address) concert(CONCERT_ID, date, venue) writer_work(WRITER_ID*, WORK_ID*, percentage) performance(PERFORMANCE_ID, act_id*, concert_id*, work_id*) Appartments R\u00e9ponse building(BUILDING_ID, name, address, managed) apartment(BUILDING_ID*, NUMBER, date_available, asking_rent, managed) tenant(TENANT_ID, first_name, last_name, employer, work_phone) lease(LEASE_ID, building_id*, apartment_number*, rent, end_of_lease) tenant_lease(tenant_id*, lease_id*)","title":"Conversion d'un diagramme EA en sch\u00e9ma relationnel"},{"location":"4.%20Mod%C3%A9lisation/04-ea-vers-relationnel/#conversion-dun-diagramme-ea-en-schema-relationnel","text":"","title":"Conversion d'un diagramme EA en sch\u00e9ma relationnel"},{"location":"4.%20Mod%C3%A9lisation/04-ea-vers-relationnel/#schema-relationnel","text":"Sch\u00e9ma relationnel (mod\u00e8le de donn\u00e9es relationnel) : ensemble de sch\u00e9mas de tables Sch\u00e9ma de table : forme basique : nom de la table et ensemble de noms de colonnes employee(emp_id, name, address, dept_id) Sch\u00e9ma de table : forme d\u00e9taill\u00e9e : nom de la table et ensemble de noms de colonnes plus types de donn\u00e9es et cl\u00e9s primaires, et parfois d'autres contraintes telles que NOT NULL les colonnes faisant partie de la cl\u00e9 primaire sont soit soulign\u00e9es, soit en majuscules pour \u00e9viter des probl\u00e8mes avec certains SGBD, \u00e9crivez les noms des tables et des colonnes uniquement en minuscules dans les instructions CREATE TABLE","title":"Sch\u00e9ma relationnel"},{"location":"4.%20Mod%C3%A9lisation/04-ea-vers-relationnel/#les-colonnes-faisant-partie-dune-cle-etrangere-sont-suivies-dun","text":"exemple : employee(EMP_ID integer, name text, address text, dept_id* integer) d'autres formes interm\u00e9diaires entre les deux pr\u00e9c\u00e9dentes sont \u00e9galement possibles Diagramme physique : \u00e0 partir d'un diagramme logique, convertir toutes les relations en cl\u00e9s \u00e9trang\u00e8res et entit\u00e9s suppl\u00e9mentaires (ou tables) si n\u00e9cessaire","title":"les colonnes faisant partie d'une cl\u00e9 \u00e9trang\u00e8re sont suivies d'un *"},{"location":"4.%20Mod%C3%A9lisation/04-ea-vers-relationnel/#etapes","text":"Chaque entit\u00e9 du diagramme ER sera une table dans le sch\u00e9ma relationnel tous les attributs de l'entit\u00e9 deviennent des colonnes dans le sch\u00e9ma de table les attributs de cl\u00e9 primaire deviennent des colonnes de cl\u00e9 primaire dans le sch\u00e9ma de table Chaque association plusieurs-\u00e0-plusieurs sera une table les attributs de l'association sont ajout\u00e9s au sch\u00e9ma de table ajouter une colonne de cl\u00e9 \u00e9trang\u00e8re (ou des colonnes) pour chaque table impliqu\u00e9e dans l'association choisir une cl\u00e9 primaire parmi les colonnes actuelles, ou ajouter de nouvelles colonnes de cl\u00e9 primaire (comme une colonne ID) Conseil : comptez le nombre d'entit\u00e9s dans le diagramme ER, ajoutez le nombre d'associations plusieurs-\u00e0-plusieurs, et ce nombre sera le nombre de tables dans le sch\u00e9ma relationnel Les associations plusieurs-\u00e0-un ne deviendront PAS des tables \u00e0 la place, ajoutez une colonne de cl\u00e9 \u00e9trang\u00e8re du c\u00f4t\u00e9 plusieurs r\u00e9f\u00e9rant la cl\u00e9 primaire du c\u00f4t\u00e9 un si le c\u00f4t\u00e9 un est en fait exactement un , alors rendez la colonne de cl\u00e9 \u00e9trang\u00e8re NOT NULL Les associations un-\u00e0-un ne deviendront PAS des tables traitez les associations un-\u00e0-un de mani\u00e8re similaire aux associations plusieurs-\u00e0-un, sauf que vous ne prenez qu'une des cl\u00e9s primaires comme cl\u00e9 \u00e9trang\u00e8re de l'autre c\u00f4t\u00e9 il n'y a pas de r\u00e8gle parfaite sur quel c\u00f4t\u00e9 choisir, cela d\u00e9pend du contexte si c'est une association exactement-un-\u00e0-au-plus-un, alors g\u00e9n\u00e9ralement la cl\u00e9 \u00e9trang\u00e8re sera du c\u00f4t\u00e9 au-plus-un (pointant vers le c\u00f4t\u00e9 exactement-un)","title":"\u00c9tapes"},{"location":"4.%20Mod%C3%A9lisation/04-ea-vers-relationnel/#exemples","text":"","title":"Exemples"},{"location":"4.%20Mod%C3%A9lisation/04-ea-vers-relationnel/#contacts","text":"R\u00e9ponse contact(CONTACT_ID, name, phone, address, email) call(CALL_ID, phone, date, time, contact_id*)","title":"Contacts"},{"location":"4.%20Mod%C3%A9lisation/04-ea-vers-relationnel/#simple-bank","text":"R\u00e9ponse customer(ID, name, address, phone) account(NUMBER, type, balance) transaction(ID, code, amount, date, time, description, account_number*) customer_account(id*, number*)","title":"Simple Bank"},{"location":"4.%20Mod%C3%A9lisation/04-ea-vers-relationnel/#college","text":"R\u00e9ponse Student(STUDENT_ID, name, phone, advisor_id*) Lecturer(LECTURER_ID, name, office, rank, phone) Course(CODE, name, credits) Grade(GRADE_ID, student_id* NOT NULL, lecturer_id* NOT NULL, course_code* NOT NULL, semester, year, result)","title":"Coll\u00e8ge"},{"location":"4.%20Mod%C3%A9lisation/04-ea-vers-relationnel/#music","text":"R\u00e9ponse writer(WRITER_ID, first_name, last_name, address, pub_id*) work(WORK_ID, title, duration, description) publisher(PUB_ID, code, name, address) act(ACT_ID, name, address) concert(CONCERT_ID, date, venue) writer_work(WRITER_ID*, WORK_ID*, percentage) performance(PERFORMANCE_ID, act_id*, concert_id*, work_id*)","title":"Music"},{"location":"4.%20Mod%C3%A9lisation/04-ea-vers-relationnel/#appartments","text":"R\u00e9ponse building(BUILDING_ID, name, address, managed) apartment(BUILDING_ID*, NUMBER, date_available, asking_rent, managed) tenant(TENANT_ID, first_name, last_name, employer, work_phone) lease(LEASE_ID, building_id*, apartment_number*, rent, end_of_lease) tenant_lease(tenant_id*, lease_id*)","title":"Appartments"},{"location":"5.%20SQL%20Avanc%C3%A9/01-vues/","text":"Vues Les vues sont essentiellement des tables virtuelles Elles sont une couche au-dessus d'autres tables Avec le contr\u00f4le d'acc\u00e8s, elles peuvent \u00eatre utilis\u00e9es pour assurer diff\u00e9rents niveaux de confidentialit\u00e9 et de s\u00e9curit\u00e9 Par exemple, le d\u00e9partement des ressources humaines a g\u00e9n\u00e9ralement besoin de conna\u00eetre les num\u00e9ros d'assurance sociale (NAS) de leurs employ\u00e9s pour les d\u00e9clarer aux diff\u00e9rents gouvernements pour les imp\u00f4ts, etc. Mais les services informatiques (sauf peut-\u00eatre les DBA de haut niveau), le marketing, etc. ne devraient pas avoir acc\u00e8s aux NAS L'acc\u00e8s \u00e0 la table de base des employ\u00e9s, avec les NAS, peut \u00eatre accord\u00e9 \u00e0 certains employ\u00e9s (ou \u00e0 certains r\u00f4les si l'on utilise le contr\u00f4le d'acc\u00e8s bas\u00e9 sur les r\u00f4les) Une vue au-dessus de la table des employ\u00e9s peut \u00eatre cr\u00e9\u00e9e sans les NAS, et l'acc\u00e8s \u00e0 d'autres employ\u00e9s peut \u00eatre accord\u00e9 sur la vue drop schema if exists company cascade; create schema company; set search_path to company; create table employee_priv ( eid integer generated always as identity primary key, sin CHAR(9) not null unique, name text not null, phone text ); insert into employee_priv(sin, name, phone) values ('123456789', 'Denis', '123-456-7890'), ('987654321', 'Jane', '987-654-3210'); select * from employee_priv; create or replace view employee AS select eid, name, phone from employee_priv; select * from employee; --drop role hr; --drop role itsupport; create role hr; create role itsupport; grant select, insert, update, delete on employee_priv to hr; grant select on employee to itsupport; La cr\u00e9ation d'utilisateurs et de r\u00f4les n'est pas compl\u00e8tement standardis\u00e9e dans tous les SGBDR Chaque SGBDR devrait avoir les commandes SQL grant et revoke PostgreSQL - create user PostgreSQL - alter user PostgreSQL - grant Les vues peuvent \u00eatre cr\u00e9\u00e9es sur des requ\u00eates couramment utilis\u00e9es, souvent incluant des jointures, pour simplifier l'\u00e9criture d'autres requ\u00eates set search_path to university; create or replace view studentcourse as select s.sid, s.name as student_name, c.code, c.name as course_name, o.semester, o.year from student s left join enrollment e on s.sid = e.sid inner join offering o on e.oid = o.oid inner join course c on o.cid = c.cid; select * from studentcourse; Nous pouvons restreindre les lignes de la vue \u00e0 un \u00e9tudiant sp\u00e9cifique, pour un semestre et une ann\u00e9e sp\u00e9cifiques cela pourrait \u00eatre utile lors de la cr\u00e9ation d'horaires select * from studentcourse where sid = 3 and semester = 'W' and year = 2020; Ind\u00e9pendance logique des donn\u00e9es Les vues peuvent \u00e9galement \u00eatre utilis\u00e9es pour minimiser l'impact des changements de sch\u00e9ma dans la base de donn\u00e9es Supposons qu'un sch\u00e9ma de table doive \u00eatre modifi\u00e9, \u00e9ventuellement parce qu'une table doit \u00eatre d\u00e9compos\u00e9e pour r\u00e9duire la redondance en raison d'une d\u00e9pendance fonctionnelle pr\u00e9c\u00e9demment inconnue Ensuite, toutes les requ\u00eates utilisant cette table doivent \u00eatre mises \u00e0 jour, ce qui pourrait \u00eatre difficile \u00e0 faire Une vue avec le m\u00eame nom et les m\u00eames colonnes peut \u00eatre cr\u00e9\u00e9e pour remplacer l'ancienne table cette vue serait d\u00e9finie sur les nouvelles tables rempla\u00e7ant l'ancienne table Les vues sont-elles modifiables ? La meilleure r\u00e9ponse est peut-\u00eatre, mais probablement pas (du moins pas en g\u00e9n\u00e9ral) Si nous voulons mettre \u00e0 jour le num\u00e9ro de t\u00e9l\u00e9phone d'un employ\u00e9, nous pourrions probablement le faire via la vue, car la vue a une correspondance directe avec exactement 1 table, moins la colonne NAS la mise \u00e0 jour peut \u00eatre redirig\u00e9e vers la table employee_priv Mais nous ne pouvons pas ins\u00e9rer une nouvelle ligne dans la vue des employ\u00e9s car la table employee_priv a la colonne NAS, qui ne peut pas \u00eatre null de plus, comme elle a la contrainte unique , nous ne pouvons pas la d\u00e9finir sur une valeur par d\u00e9faut en fait, nous pourrions la d\u00e9finir sur une valeur par d\u00e9faut pour au plus 1 employ\u00e9 De m\u00eame, essayer de mettre \u00e0 jour la vue studentcourse pourrait \u00eatre compliqu\u00e9 car elle provient de la jointure de 4 tables mettre \u00e0 jour 1 ligne dans studentcourse pourrait signifier que nous devons modifier plusieurs lignes dans 1 ou plusieurs tables sous-jacentes si nous essayons de changer l'inscription d'un \u00e9tudiant \u00e0 une offre de cours via la vue, nous devrons mettre \u00e0 jour la table d'inscription, qui n'appara\u00eet pas directement dans la vue (ses colonnes ne sont pas s\u00e9lectionn\u00e9es par la requ\u00eate de la vue) m\u00eame genre de probl\u00e8me pour l'insertion de lignes cela pourrait \u00eatre possible dans certains cas, mais il n'y a pas de moyen universel de le faire Il y a des probl\u00e8mes similaires avec la suppression de lignes via une vue c'est possible dans certains cas, mais pas tous","title":"Vues"},{"location":"5.%20SQL%20Avanc%C3%A9/01-vues/#vues","text":"Les vues sont essentiellement des tables virtuelles Elles sont une couche au-dessus d'autres tables Avec le contr\u00f4le d'acc\u00e8s, elles peuvent \u00eatre utilis\u00e9es pour assurer diff\u00e9rents niveaux de confidentialit\u00e9 et de s\u00e9curit\u00e9 Par exemple, le d\u00e9partement des ressources humaines a g\u00e9n\u00e9ralement besoin de conna\u00eetre les num\u00e9ros d'assurance sociale (NAS) de leurs employ\u00e9s pour les d\u00e9clarer aux diff\u00e9rents gouvernements pour les imp\u00f4ts, etc. Mais les services informatiques (sauf peut-\u00eatre les DBA de haut niveau), le marketing, etc. ne devraient pas avoir acc\u00e8s aux NAS L'acc\u00e8s \u00e0 la table de base des employ\u00e9s, avec les NAS, peut \u00eatre accord\u00e9 \u00e0 certains employ\u00e9s (ou \u00e0 certains r\u00f4les si l'on utilise le contr\u00f4le d'acc\u00e8s bas\u00e9 sur les r\u00f4les) Une vue au-dessus de la table des employ\u00e9s peut \u00eatre cr\u00e9\u00e9e sans les NAS, et l'acc\u00e8s \u00e0 d'autres employ\u00e9s peut \u00eatre accord\u00e9 sur la vue drop schema if exists company cascade; create schema company; set search_path to company; create table employee_priv ( eid integer generated always as identity primary key, sin CHAR(9) not null unique, name text not null, phone text ); insert into employee_priv(sin, name, phone) values ('123456789', 'Denis', '123-456-7890'), ('987654321', 'Jane', '987-654-3210'); select * from employee_priv; create or replace view employee AS select eid, name, phone from employee_priv; select * from employee; --drop role hr; --drop role itsupport; create role hr; create role itsupport; grant select, insert, update, delete on employee_priv to hr; grant select on employee to itsupport; La cr\u00e9ation d'utilisateurs et de r\u00f4les n'est pas compl\u00e8tement standardis\u00e9e dans tous les SGBDR Chaque SGBDR devrait avoir les commandes SQL grant et revoke PostgreSQL - create user PostgreSQL - alter user PostgreSQL - grant Les vues peuvent \u00eatre cr\u00e9\u00e9es sur des requ\u00eates couramment utilis\u00e9es, souvent incluant des jointures, pour simplifier l'\u00e9criture d'autres requ\u00eates set search_path to university; create or replace view studentcourse as select s.sid, s.name as student_name, c.code, c.name as course_name, o.semester, o.year from student s left join enrollment e on s.sid = e.sid inner join offering o on e.oid = o.oid inner join course c on o.cid = c.cid; select * from studentcourse; Nous pouvons restreindre les lignes de la vue \u00e0 un \u00e9tudiant sp\u00e9cifique, pour un semestre et une ann\u00e9e sp\u00e9cifiques cela pourrait \u00eatre utile lors de la cr\u00e9ation d'horaires select * from studentcourse where sid = 3 and semester = 'W' and year = 2020;","title":"Vues"},{"location":"5.%20SQL%20Avanc%C3%A9/01-vues/#independance-logique-des-donnees","text":"Les vues peuvent \u00e9galement \u00eatre utilis\u00e9es pour minimiser l'impact des changements de sch\u00e9ma dans la base de donn\u00e9es Supposons qu'un sch\u00e9ma de table doive \u00eatre modifi\u00e9, \u00e9ventuellement parce qu'une table doit \u00eatre d\u00e9compos\u00e9e pour r\u00e9duire la redondance en raison d'une d\u00e9pendance fonctionnelle pr\u00e9c\u00e9demment inconnue Ensuite, toutes les requ\u00eates utilisant cette table doivent \u00eatre mises \u00e0 jour, ce qui pourrait \u00eatre difficile \u00e0 faire Une vue avec le m\u00eame nom et les m\u00eames colonnes peut \u00eatre cr\u00e9\u00e9e pour remplacer l'ancienne table cette vue serait d\u00e9finie sur les nouvelles tables rempla\u00e7ant l'ancienne table","title":"Ind\u00e9pendance logique des donn\u00e9es"},{"location":"5.%20SQL%20Avanc%C3%A9/01-vues/#les-vues-sont-elles-modifiables","text":"La meilleure r\u00e9ponse est peut-\u00eatre, mais probablement pas (du moins pas en g\u00e9n\u00e9ral) Si nous voulons mettre \u00e0 jour le num\u00e9ro de t\u00e9l\u00e9phone d'un employ\u00e9, nous pourrions probablement le faire via la vue, car la vue a une correspondance directe avec exactement 1 table, moins la colonne NAS la mise \u00e0 jour peut \u00eatre redirig\u00e9e vers la table employee_priv Mais nous ne pouvons pas ins\u00e9rer une nouvelle ligne dans la vue des employ\u00e9s car la table employee_priv a la colonne NAS, qui ne peut pas \u00eatre null de plus, comme elle a la contrainte unique , nous ne pouvons pas la d\u00e9finir sur une valeur par d\u00e9faut en fait, nous pourrions la d\u00e9finir sur une valeur par d\u00e9faut pour au plus 1 employ\u00e9 De m\u00eame, essayer de mettre \u00e0 jour la vue studentcourse pourrait \u00eatre compliqu\u00e9 car elle provient de la jointure de 4 tables mettre \u00e0 jour 1 ligne dans studentcourse pourrait signifier que nous devons modifier plusieurs lignes dans 1 ou plusieurs tables sous-jacentes si nous essayons de changer l'inscription d'un \u00e9tudiant \u00e0 une offre de cours via la vue, nous devrons mettre \u00e0 jour la table d'inscription, qui n'appara\u00eet pas directement dans la vue (ses colonnes ne sont pas s\u00e9lectionn\u00e9es par la requ\u00eate de la vue) m\u00eame genre de probl\u00e8me pour l'insertion de lignes cela pourrait \u00eatre possible dans certains cas, mais il n'y a pas de moyen universel de le faire Il y a des probl\u00e8mes similaires avec la suppression de lignes via une vue c'est possible dans certains cas, mais pas tous","title":"Les vues sont-elles modifiables ?"},{"location":"5.%20SQL%20Avanc%C3%A9/02-contraintes-et-d%C3%A9clencheurs/","text":"Contraintes et D\u00e9clencheurs Les contraintes peuvent \u00eatre d\u00e9finies dans les instructions create table Ou ajout\u00e9es aux tables existantes avec les instructions alter table Diff\u00e9rents types de contraintes null ou not null Cl\u00e9 primaire Unique Cl\u00e9 \u00e9trang\u00e8re Check Domaine Assertion Contraintes null ou not null Une colonne peut permettre des valeurs null Ou les interdire avec not null Par d\u00e9faut : permettre des valeurs null Contraintes de cl\u00e9 primaire Une colonne ou un groupe de colonnes peut \u00eatre d\u00e9sign\u00e9 comme primary key ( cl\u00e9 primaire) Les colonnes de cl\u00e9 primaire ne peuvent pas \u00eatre null implicite not null pour chaque colonne de cl\u00e9 primaire Nous pouvons utiliser une contrainte de colonne si la cl\u00e9 primaire n'a qu'une seule colonne sid integer primary key Si la cl\u00e9 primaire a plus d'une colonne, nous devons utiliser une contrainte de table sp\u00e9cifi\u00e9e apr\u00e8s toutes les colonnes dans l'instruction create table primary key(eid, sid) Contraintes uniques Comme les cl\u00e9s primaires, mais pour les cl\u00e9s candidates (secondaires) D\u00e9finies de la m\u00eame mani\u00e8re, mais avec unique au lieu de primary key Exemple : ajout d'une contrainte unique \u00e0 la colonne code de la table course set search_path to university; -- alter table course drop constraint course_code_key; alter table course add unique (code); insert into course(name, code, credits) values ('Data Structures', 'DS', 3); -- delete from course where code = 'DS'; Contraintes de cl\u00e9 \u00e9trang\u00e8re R\u00e9f\u00e9rences \u00e0 d'autres tables Se r\u00e9f\u00e8re g\u00e9n\u00e9ralement aux cl\u00e9s primaires dans d'autres tables G\u00e9n\u00e9ralement cr\u00e9\u00e9es pour repr\u00e9senter des relations lors de la traduction d'un diagramme ER en sch\u00e9ma relationnel Une colonne ou un groupe de colonnes peut \u00eatre des r\u00e9f\u00e9rences \u00e0 une colonne ou un groupe de colonnes dans une autre table Nous pouvons utiliser une contrainte de colonne si la cl\u00e9 \u00e9trang\u00e8re n'a qu'une seule colonne sid integer references student(sid) Si la cl\u00e9 \u00e9trang\u00e8re a plus d'une colonne, nous devons utiliser une contrainte de table sp\u00e9cifi\u00e9e apr\u00e8s toutes les colonnes dans l'instruction create table foreign key(eid, sid) references enrollment(eid, sid) Politique des contraintes de cl\u00e9 \u00e9trang\u00e8re Lorsque nous ins\u00e9rons une nouvelle ligne dans une table avec une cl\u00e9 \u00e9trang\u00e8re, la valeur que nous sp\u00e9cifions pour la ou les colonnes de cl\u00e9 \u00e9trang\u00e8re doit exister dans l'autre table \u00e0 laquelle nous nous r\u00e9f\u00e9rons cela est souvent appel\u00e9 une contrainte d'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle cela correspond g\u00e9n\u00e9ralement \u00e0 une relation many-exactly-one ( plusieurs-exactement-un) exception : si nous permettons des valeurs null pour la ou les colonnes de cl\u00e9 \u00e9trang\u00e8re, alors les valeurs null n'ont pas besoin d'exister dans l'autre table et les valeurs null n'existeront g\u00e9n\u00e9ralement pas car la ou les colonnes auxquelles la cl\u00e9 \u00e9trang\u00e8re se r\u00e9f\u00e8re seront g\u00e9n\u00e9ralement des colonnes de cl\u00e9 primaire cela correspond g\u00e9n\u00e9ralement \u00e0 une relation many-at-most-one ( plusieurs-au-plus-un) Mais que se passe-t-il lorsque nous supprimons ou mettons \u00e0 jour une ligne dans la table \u00e0 laquelle la cl\u00e9 \u00e9trang\u00e8re se r\u00e9f\u00e8re ? Si la valeur \u00e0 laquelle la ou les colonnes de cl\u00e9 \u00e9trang\u00e8re se r\u00e9f\u00e8rent n'existe plus, que faisons-nous ? Dans les standards SQL, les actions valides sont RESTRICT , CASCADE , SET NULL , NO ACTION et SET DEFAULT Toutes les actions valides ne sont pas impl\u00e9ment\u00e9es dans tous les SGBDR La politique par d\u00e9faut des cl\u00e9s \u00e9trang\u00e8res est RESTRICT si l'ex\u00e9cution de la mise \u00e0 jour ou de la suppression laisserait des lignes \"orphelines\" (lignes qui se r\u00e9f\u00e8rent \u00e0 des valeurs inexistantes), alors bloquer la mise \u00e0 jour ou la suppression et renvoyer un message d'erreur NO ACTION est un synonyme de RESTRICT Si la politique CASCADE est d\u00e9finie alors les changements sont propag\u00e9s aux lignes d\u00e9pendant de la ligne originale si la ligne est supprim\u00e9e, alors les lignes d\u00e9pendant d'elle seront \u00e9galement supprim\u00e9es ( tr\u00e8s dangereux ) si la ligne est mise \u00e0 jour, alors les lignes d\u00e9pendant d'elle seront \u00e9galement mises \u00e0 jour Si la politique est d\u00e9finie sur SET NULL ou SET DEFAULT , elle remplacera les valeurs de la ou des colonnes de cl\u00e9 \u00e9trang\u00e8re par la valeur null ou par la valeur par d\u00e9faut, si possible Contraintes check V\u00e9rifie une expression avant d'effectuer une insertion ou une mise \u00e0 jour si l'expression est fausse, alors l'insertion ou la mise \u00e0 jour \u00e9chouera sinon, elle r\u00e9ussira attention : si l'expression \u00e9value \u00e0 null , alors l'insertion ou la mise \u00e0 jour r\u00e9ussira Si les contraintes check se r\u00e9f\u00e8rent \u00e0 une seule colonne, elles peuvent \u00eatre sp\u00e9cifi\u00e9es comme une contrainte de colonne score integer check(score >= 0 and score <= 100) Si les contraintes check se r\u00e9f\u00e8rent \u00e0 2 colonnes ou plus, elles doivent \u00eatre sp\u00e9cifi\u00e9es comme une contrainte de table check(end_date >= start_date) notez que si l'une des dates est null , l'expression sera null et la v\u00e9rification passera Contraintes de domaine Un domaine est utilis\u00e9 pour restreindre les valeurs possibles pour un type de donn\u00e9es Un domaine peut avoir une valeur par d\u00e9faut peut \u00eatre d\u00e9fini avec une contrainte null ou not null peut avoir une ou plusieurs contraintes check Un domaine peut \u00eatre utilis\u00e9 pour \u00e9viter de r\u00e9p\u00e9ter trop de contraintes, en particulier les contraintes check create domain score as integer check(score >= 0 and score <= 100) Assertions Contraintes g\u00e9n\u00e9rales qui peuvent s'appliquer \u00e0 plus d'une ligne d'une table ou \u00e0 des colonnes de plus d'une table Comme des contraintes check plus g\u00e9n\u00e9rales qui ne sont pas limit\u00e9es \u00e0 une seule ligne La plupart des SGBDR n'ont pas de support complet pour les assertions, voire aucun support pour les assertions D\u00e9clencheurs ( Triggers ) Les d\u00e9clencheurs sont utilis\u00e9s dans les bases de donn\u00e9es actives Ils sont similaires aux \u00e9v\u00e9nements dans une architecture orient\u00e9e \u00e9v\u00e9nements Un d\u00e9clencheur ex\u00e9cute g\u00e9n\u00e9ralement une fonction sur un \u00e9v\u00e9nement ou des \u00e9v\u00e9nements sp\u00e9cifiques La fonction qu'il ex\u00e9cute est similaire \u00e0 un gestionnaire d'\u00e9v\u00e9nements par exemple, dans une page HTML, vous pouvez associer une fonction JavaScript \u00e0 un \u00e9v\u00e9nement onclick sur un bouton Do something Les d\u00e9clencheurs suivent la structure ECA pour d\u00e9finir des r\u00e8gles actives E vent : signal (d\u00e9clencheur) invoquant la r\u00e8gle C ondition : test logique, d\u00e9termine si l'action sera ex\u00e9cut\u00e9e ou non A ction : code ou fonction (en SQL, PL/SQL, ou un autre langage support\u00e9) s'ex\u00e9cutant sur la base de donn\u00e9es Le support des d\u00e9clencheurs varie selon les SGBDR Quand utiliser les d\u00e9clencheurs Les d\u00e9clencheurs peuvent \u00eatre utilis\u00e9s pour imposer des contraintes qui ne peuvent pas \u00eatre impos\u00e9es autrement si les assertions ne sont pas support\u00e9es, alors une fonctionnalit\u00e9 similaire peut \u00eatre obtenue avec des d\u00e9clencheurs... mais les d\u00e9clencheurs sont plus puissants que les assertions Les d\u00e9clencheurs peuvent \u00eatre utilis\u00e9s pour la journalisation si vous voulez (ou devez) conserver des journaux de modifications, alors les d\u00e9clencheurs peuvent aider normalement, lorsque des insertions, mises \u00e0 jour et suppressions sont ex\u00e9cut\u00e9es sur la base de donn\u00e9es, aucune trace ne sera laiss\u00e9e cr\u00e9er des d\u00e9clencheurs pour ins\u00e9rer des donn\u00e9es dans une table de journal ou d'historique (ou des tables) plus de d\u00e9tails : https://en.wikipedia.org/wiki/Log_trigger Les d\u00e9clencheurs peuvent \u00eatre utilis\u00e9s pour de nombreuses autres choses pour g\u00e9n\u00e9rer/mettre \u00e0 jour des valeurs pour d'autres colonnes pour mettre \u00e0 jour une table de statistiques pour auditer des donn\u00e9es sensibles pour envoyer des emails aux DBA lors d'\u00e9v\u00e9nements critiques pour impl\u00e9menter d'autres r\u00e8gles m\u00e9tier De m\u00eame que la programmation \u00e9v\u00e9nementielle en JavaScript ou dans d'autres langages de programmation, des fonctions doivent \u00eatre associ\u00e9es \u00e0 certains \u00e9v\u00e9nements les \u00e9v\u00e9nements les plus courants sont : INSERT , UPDATE , et DELETE avec un modificateur (sp\u00e9cifi\u00e9 avant l'\u00e9v\u00e9nement) : BEFORE ou AFTER L'\u00e9v\u00e9nement peut \u00eatre d\u00e9clench\u00e9 pour chaque ligne ou pour l'ensemble de la d\u00e9claration une seule instruction INSERT , UPDATE , ou DELETE peut s'appliquer \u00e0 une ou plusieurs lignes par d\u00e9faut, nous obtenons un d\u00e9clencheur au niveau de la d\u00e9claration si nous sp\u00e9cifions FOR EACH ROW , alors nous obtenons un d\u00e9clencheur au niveau de la ligne Par exemple, apr\u00e8s avoir ins\u00e9r\u00e9 les informations d'un nouvel employ\u00e9 dans une table employee , nous pourrions vouloir cr\u00e9er automatiquement un compte pour permettre au nouvel employ\u00e9 de se connecter au syst\u00e8me de l'entreprise la cr\u00e9ation d'un tel compte n\u00e9cessiterait probablement l'insertion d'une ligne dans une table account nous avons donc besoin d'un d\u00e9clencheur AFTER INSERT pour cela notez que parfois, cette fonctionnalit\u00e9 est g\u00e9r\u00e9e par l'application frontale, et non par la base de donn\u00e9es Un autre exemple : nous pourrions avoir un d\u00e9clencheur BEFORE DELETE pour archiver les donn\u00e9es supprim\u00e9es importantes nous pourrions ins\u00e9rer les donn\u00e9es supprim\u00e9es dans une autre table nous pourrions \u00e9galement enregistrer qui a supprim\u00e9 les donn\u00e9es et quand elles ont \u00e9t\u00e9 supprim\u00e9es Malheureusement, les impl\u00e9mentations de d\u00e9clencheurs varient selon les SGBD Certains ne supportent que des sous-ensembles de la norme, d'autres y apportent de petites modifications Dans PostgreSQL, les d\u00e9clencheurs peuvent \u00eatre cr\u00e9\u00e9s avec la syntaxe ( simplifi\u00e9e) suivante : CREATE TRIGGER trigger_name {BEFORE | AFTER | INSTEAD OF} {event [OR ...]} ON table_name [FOR [EACH] {ROW | STATEMENT}] EXECUTE PROCEDURE trigger_function o\u00f9 event peut \u00eatre INSERT , UPDATE , DELETE ou TRUNCATE R\u00e9f\u00e9rez-vous \u00e0 ces liens pour plus de d\u00e9tails : https://www.postgresqltutorial.com/creating-first-trigger-postgresql/ https://www.postgresql.org/docs/14/sql-createtrigger.html https://www.postgresql.org/docs/14/triggers.html Sur MySQL/MariaDB, la syntaxe de base est : CREATE TRIGGER trigger_name {BEFORE | AFTER} {INSERT | UPDATE| DELETE } ON table_name FOR EACH ROW trigger_body; R\u00e9f\u00e9rez-vous \u00e0 ces liens pour plus de d\u00e9tails : https://www.mysqltutorial.org/create-the-first-trigger-in-mysql.aspx https://dev.mysql.com/doc/refman/8.0/en/create-trigger.html https://dev.mysql.com/doc/refman/8.0/en/trigger-syntax.html Sur Oracle, les d\u00e9clencheurs peuvent \u00eatre cr\u00e9\u00e9s en utilisant la syntaxe suivante : CREATE [OR REPLACE] TRIGGER trigger_name {BEFORE | AFTER } triggering_event ON table_name [FOR EACH ROW] [FOLLOWS | PRECEDES another_trigger] [ENABLE / DISABLE ] [WHEN condition] DECLARE declaration statements BEGIN executable statements EXCEPTION exception_handling statements END; https://www.oracletutorial.com/plsql-tutorial/oracle-trigger/ Pour bien utiliser les d\u00e9clencheurs, nous devons \u00e9crire des fonctions ou des proc\u00e9dures dans un certain langage de programmation PL/SQL (langage de programmation pour SQL) est support\u00e9 sous une certaine forme dans la plupart des bases de donn\u00e9es relationnelles ou un autre langage de programmation support\u00e9, tel que C PostgreSQL supporte les types d\u00e9finis par l'utilisateur (UDT) et les fonctions d\u00e9finies par l'utilisateur (UDF) Les UDF peuvent \u00eatre d\u00e9finies en PL/SQL ou en C Les UDF peuvent \u00eatre utilis\u00e9es pour les d\u00e9clencheurs d'autres langages de programmation supportent les langages de programmation de diff\u00e9rentes mani\u00e8res","title":"Contraintes et D\u00e9clencheurs"},{"location":"5.%20SQL%20Avanc%C3%A9/02-contraintes-et-d%C3%A9clencheurs/#contraintes-et-declencheurs","text":"Les contraintes peuvent \u00eatre d\u00e9finies dans les instructions create table Ou ajout\u00e9es aux tables existantes avec les instructions alter table Diff\u00e9rents types de contraintes null ou not null Cl\u00e9 primaire Unique Cl\u00e9 \u00e9trang\u00e8re Check Domaine Assertion","title":"Contraintes et D\u00e9clencheurs"},{"location":"5.%20SQL%20Avanc%C3%A9/02-contraintes-et-d%C3%A9clencheurs/#contraintes-null-ou-not-null","text":"Une colonne peut permettre des valeurs null Ou les interdire avec not null Par d\u00e9faut : permettre des valeurs null","title":"Contraintes null ou not null"},{"location":"5.%20SQL%20Avanc%C3%A9/02-contraintes-et-d%C3%A9clencheurs/#contraintes-de-cle-primaire","text":"Une colonne ou un groupe de colonnes peut \u00eatre d\u00e9sign\u00e9 comme primary key ( cl\u00e9 primaire) Les colonnes de cl\u00e9 primaire ne peuvent pas \u00eatre null implicite not null pour chaque colonne de cl\u00e9 primaire Nous pouvons utiliser une contrainte de colonne si la cl\u00e9 primaire n'a qu'une seule colonne sid integer primary key Si la cl\u00e9 primaire a plus d'une colonne, nous devons utiliser une contrainte de table sp\u00e9cifi\u00e9e apr\u00e8s toutes les colonnes dans l'instruction create table primary key(eid, sid)","title":"Contraintes de cl\u00e9 primaire"},{"location":"5.%20SQL%20Avanc%C3%A9/02-contraintes-et-d%C3%A9clencheurs/#contraintes-uniques","text":"Comme les cl\u00e9s primaires, mais pour les cl\u00e9s candidates (secondaires) D\u00e9finies de la m\u00eame mani\u00e8re, mais avec unique au lieu de primary key Exemple : ajout d'une contrainte unique \u00e0 la colonne code de la table course set search_path to university; -- alter table course drop constraint course_code_key; alter table course add unique (code); insert into course(name, code, credits) values ('Data Structures', 'DS', 3); -- delete from course where code = 'DS';","title":"Contraintes uniques"},{"location":"5.%20SQL%20Avanc%C3%A9/02-contraintes-et-d%C3%A9clencheurs/#contraintes-de-cle-etrangere","text":"R\u00e9f\u00e9rences \u00e0 d'autres tables Se r\u00e9f\u00e8re g\u00e9n\u00e9ralement aux cl\u00e9s primaires dans d'autres tables G\u00e9n\u00e9ralement cr\u00e9\u00e9es pour repr\u00e9senter des relations lors de la traduction d'un diagramme ER en sch\u00e9ma relationnel Une colonne ou un groupe de colonnes peut \u00eatre des r\u00e9f\u00e9rences \u00e0 une colonne ou un groupe de colonnes dans une autre table Nous pouvons utiliser une contrainte de colonne si la cl\u00e9 \u00e9trang\u00e8re n'a qu'une seule colonne sid integer references student(sid) Si la cl\u00e9 \u00e9trang\u00e8re a plus d'une colonne, nous devons utiliser une contrainte de table sp\u00e9cifi\u00e9e apr\u00e8s toutes les colonnes dans l'instruction create table foreign key(eid, sid) references enrollment(eid, sid)","title":"Contraintes de cl\u00e9 \u00e9trang\u00e8re"},{"location":"5.%20SQL%20Avanc%C3%A9/02-contraintes-et-d%C3%A9clencheurs/#politique-des-contraintes-de-cle-etrangere","text":"Lorsque nous ins\u00e9rons une nouvelle ligne dans une table avec une cl\u00e9 \u00e9trang\u00e8re, la valeur que nous sp\u00e9cifions pour la ou les colonnes de cl\u00e9 \u00e9trang\u00e8re doit exister dans l'autre table \u00e0 laquelle nous nous r\u00e9f\u00e9rons cela est souvent appel\u00e9 une contrainte d'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle cela correspond g\u00e9n\u00e9ralement \u00e0 une relation many-exactly-one ( plusieurs-exactement-un) exception : si nous permettons des valeurs null pour la ou les colonnes de cl\u00e9 \u00e9trang\u00e8re, alors les valeurs null n'ont pas besoin d'exister dans l'autre table et les valeurs null n'existeront g\u00e9n\u00e9ralement pas car la ou les colonnes auxquelles la cl\u00e9 \u00e9trang\u00e8re se r\u00e9f\u00e8re seront g\u00e9n\u00e9ralement des colonnes de cl\u00e9 primaire cela correspond g\u00e9n\u00e9ralement \u00e0 une relation many-at-most-one ( plusieurs-au-plus-un) Mais que se passe-t-il lorsque nous supprimons ou mettons \u00e0 jour une ligne dans la table \u00e0 laquelle la cl\u00e9 \u00e9trang\u00e8re se r\u00e9f\u00e8re ? Si la valeur \u00e0 laquelle la ou les colonnes de cl\u00e9 \u00e9trang\u00e8re se r\u00e9f\u00e8rent n'existe plus, que faisons-nous ? Dans les standards SQL, les actions valides sont RESTRICT , CASCADE , SET NULL , NO ACTION et SET DEFAULT Toutes les actions valides ne sont pas impl\u00e9ment\u00e9es dans tous les SGBDR La politique par d\u00e9faut des cl\u00e9s \u00e9trang\u00e8res est RESTRICT si l'ex\u00e9cution de la mise \u00e0 jour ou de la suppression laisserait des lignes \"orphelines\" (lignes qui se r\u00e9f\u00e8rent \u00e0 des valeurs inexistantes), alors bloquer la mise \u00e0 jour ou la suppression et renvoyer un message d'erreur NO ACTION est un synonyme de RESTRICT Si la politique CASCADE est d\u00e9finie alors les changements sont propag\u00e9s aux lignes d\u00e9pendant de la ligne originale si la ligne est supprim\u00e9e, alors les lignes d\u00e9pendant d'elle seront \u00e9galement supprim\u00e9es ( tr\u00e8s dangereux ) si la ligne est mise \u00e0 jour, alors les lignes d\u00e9pendant d'elle seront \u00e9galement mises \u00e0 jour Si la politique est d\u00e9finie sur SET NULL ou SET DEFAULT , elle remplacera les valeurs de la ou des colonnes de cl\u00e9 \u00e9trang\u00e8re par la valeur null ou par la valeur par d\u00e9faut, si possible","title":"Politique des contraintes de cl\u00e9 \u00e9trang\u00e8re"},{"location":"5.%20SQL%20Avanc%C3%A9/02-contraintes-et-d%C3%A9clencheurs/#contraintes-check","text":"V\u00e9rifie une expression avant d'effectuer une insertion ou une mise \u00e0 jour si l'expression est fausse, alors l'insertion ou la mise \u00e0 jour \u00e9chouera sinon, elle r\u00e9ussira attention : si l'expression \u00e9value \u00e0 null , alors l'insertion ou la mise \u00e0 jour r\u00e9ussira Si les contraintes check se r\u00e9f\u00e8rent \u00e0 une seule colonne, elles peuvent \u00eatre sp\u00e9cifi\u00e9es comme une contrainte de colonne score integer check(score >= 0 and score <= 100) Si les contraintes check se r\u00e9f\u00e8rent \u00e0 2 colonnes ou plus, elles doivent \u00eatre sp\u00e9cifi\u00e9es comme une contrainte de table check(end_date >= start_date) notez que si l'une des dates est null , l'expression sera null et la v\u00e9rification passera","title":"Contraintes check"},{"location":"5.%20SQL%20Avanc%C3%A9/02-contraintes-et-d%C3%A9clencheurs/#contraintes-de-domaine","text":"Un domaine est utilis\u00e9 pour restreindre les valeurs possibles pour un type de donn\u00e9es Un domaine peut avoir une valeur par d\u00e9faut peut \u00eatre d\u00e9fini avec une contrainte null ou not null peut avoir une ou plusieurs contraintes check Un domaine peut \u00eatre utilis\u00e9 pour \u00e9viter de r\u00e9p\u00e9ter trop de contraintes, en particulier les contraintes check create domain score as integer check(score >= 0 and score <= 100)","title":"Contraintes de domaine"},{"location":"5.%20SQL%20Avanc%C3%A9/02-contraintes-et-d%C3%A9clencheurs/#assertions","text":"Contraintes g\u00e9n\u00e9rales qui peuvent s'appliquer \u00e0 plus d'une ligne d'une table ou \u00e0 des colonnes de plus d'une table Comme des contraintes check plus g\u00e9n\u00e9rales qui ne sont pas limit\u00e9es \u00e0 une seule ligne La plupart des SGBDR n'ont pas de support complet pour les assertions, voire aucun support pour les assertions","title":"Assertions"},{"location":"5.%20SQL%20Avanc%C3%A9/02-contraintes-et-d%C3%A9clencheurs/#declencheurs-triggers","text":"Les d\u00e9clencheurs sont utilis\u00e9s dans les bases de donn\u00e9es actives Ils sont similaires aux \u00e9v\u00e9nements dans une architecture orient\u00e9e \u00e9v\u00e9nements Un d\u00e9clencheur ex\u00e9cute g\u00e9n\u00e9ralement une fonction sur un \u00e9v\u00e9nement ou des \u00e9v\u00e9nements sp\u00e9cifiques La fonction qu'il ex\u00e9cute est similaire \u00e0 un gestionnaire d'\u00e9v\u00e9nements par exemple, dans une page HTML, vous pouvez associer une fonction JavaScript \u00e0 un \u00e9v\u00e9nement onclick sur un bouton Do something Les d\u00e9clencheurs suivent la structure ECA pour d\u00e9finir des r\u00e8gles actives E vent : signal (d\u00e9clencheur) invoquant la r\u00e8gle C ondition : test logique, d\u00e9termine si l'action sera ex\u00e9cut\u00e9e ou non A ction : code ou fonction (en SQL, PL/SQL, ou un autre langage support\u00e9) s'ex\u00e9cutant sur la base de donn\u00e9es Le support des d\u00e9clencheurs varie selon les SGBDR","title":"D\u00e9clencheurs (Triggers)"},{"location":"5.%20SQL%20Avanc%C3%A9/02-contraintes-et-d%C3%A9clencheurs/#quand-utiliser-les-declencheurs","text":"Les d\u00e9clencheurs peuvent \u00eatre utilis\u00e9s pour imposer des contraintes qui ne peuvent pas \u00eatre impos\u00e9es autrement si les assertions ne sont pas support\u00e9es, alors une fonctionnalit\u00e9 similaire peut \u00eatre obtenue avec des d\u00e9clencheurs... mais les d\u00e9clencheurs sont plus puissants que les assertions Les d\u00e9clencheurs peuvent \u00eatre utilis\u00e9s pour la journalisation si vous voulez (ou devez) conserver des journaux de modifications, alors les d\u00e9clencheurs peuvent aider normalement, lorsque des insertions, mises \u00e0 jour et suppressions sont ex\u00e9cut\u00e9es sur la base de donn\u00e9es, aucune trace ne sera laiss\u00e9e cr\u00e9er des d\u00e9clencheurs pour ins\u00e9rer des donn\u00e9es dans une table de journal ou d'historique (ou des tables) plus de d\u00e9tails : https://en.wikipedia.org/wiki/Log_trigger Les d\u00e9clencheurs peuvent \u00eatre utilis\u00e9s pour de nombreuses autres choses pour g\u00e9n\u00e9rer/mettre \u00e0 jour des valeurs pour d'autres colonnes pour mettre \u00e0 jour une table de statistiques pour auditer des donn\u00e9es sensibles pour envoyer des emails aux DBA lors d'\u00e9v\u00e9nements critiques pour impl\u00e9menter d'autres r\u00e8gles m\u00e9tier De m\u00eame que la programmation \u00e9v\u00e9nementielle en JavaScript ou dans d'autres langages de programmation, des fonctions doivent \u00eatre associ\u00e9es \u00e0 certains \u00e9v\u00e9nements les \u00e9v\u00e9nements les plus courants sont : INSERT , UPDATE , et DELETE avec un modificateur (sp\u00e9cifi\u00e9 avant l'\u00e9v\u00e9nement) : BEFORE ou AFTER L'\u00e9v\u00e9nement peut \u00eatre d\u00e9clench\u00e9 pour chaque ligne ou pour l'ensemble de la d\u00e9claration une seule instruction INSERT , UPDATE , ou DELETE peut s'appliquer \u00e0 une ou plusieurs lignes par d\u00e9faut, nous obtenons un d\u00e9clencheur au niveau de la d\u00e9claration si nous sp\u00e9cifions FOR EACH ROW , alors nous obtenons un d\u00e9clencheur au niveau de la ligne Par exemple, apr\u00e8s avoir ins\u00e9r\u00e9 les informations d'un nouvel employ\u00e9 dans une table employee , nous pourrions vouloir cr\u00e9er automatiquement un compte pour permettre au nouvel employ\u00e9 de se connecter au syst\u00e8me de l'entreprise la cr\u00e9ation d'un tel compte n\u00e9cessiterait probablement l'insertion d'une ligne dans une table account nous avons donc besoin d'un d\u00e9clencheur AFTER INSERT pour cela notez que parfois, cette fonctionnalit\u00e9 est g\u00e9r\u00e9e par l'application frontale, et non par la base de donn\u00e9es Un autre exemple : nous pourrions avoir un d\u00e9clencheur BEFORE DELETE pour archiver les donn\u00e9es supprim\u00e9es importantes nous pourrions ins\u00e9rer les donn\u00e9es supprim\u00e9es dans une autre table nous pourrions \u00e9galement enregistrer qui a supprim\u00e9 les donn\u00e9es et quand elles ont \u00e9t\u00e9 supprim\u00e9es Malheureusement, les impl\u00e9mentations de d\u00e9clencheurs varient selon les SGBD Certains ne supportent que des sous-ensembles de la norme, d'autres y apportent de petites modifications Dans PostgreSQL, les d\u00e9clencheurs peuvent \u00eatre cr\u00e9\u00e9s avec la syntaxe ( simplifi\u00e9e) suivante : CREATE TRIGGER trigger_name {BEFORE | AFTER | INSTEAD OF} {event [OR ...]} ON table_name [FOR [EACH] {ROW | STATEMENT}] EXECUTE PROCEDURE trigger_function o\u00f9 event peut \u00eatre INSERT , UPDATE , DELETE ou TRUNCATE R\u00e9f\u00e9rez-vous \u00e0 ces liens pour plus de d\u00e9tails : https://www.postgresqltutorial.com/creating-first-trigger-postgresql/ https://www.postgresql.org/docs/14/sql-createtrigger.html https://www.postgresql.org/docs/14/triggers.html Sur MySQL/MariaDB, la syntaxe de base est : CREATE TRIGGER trigger_name {BEFORE | AFTER} {INSERT | UPDATE| DELETE } ON table_name FOR EACH ROW trigger_body; R\u00e9f\u00e9rez-vous \u00e0 ces liens pour plus de d\u00e9tails : https://www.mysqltutorial.org/create-the-first-trigger-in-mysql.aspx https://dev.mysql.com/doc/refman/8.0/en/create-trigger.html https://dev.mysql.com/doc/refman/8.0/en/trigger-syntax.html Sur Oracle, les d\u00e9clencheurs peuvent \u00eatre cr\u00e9\u00e9s en utilisant la syntaxe suivante : CREATE [OR REPLACE] TRIGGER trigger_name {BEFORE | AFTER } triggering_event ON table_name [FOR EACH ROW] [FOLLOWS | PRECEDES another_trigger] [ENABLE / DISABLE ] [WHEN condition] DECLARE declaration statements BEGIN executable statements EXCEPTION exception_handling statements END; https://www.oracletutorial.com/plsql-tutorial/oracle-trigger/ Pour bien utiliser les d\u00e9clencheurs, nous devons \u00e9crire des fonctions ou des proc\u00e9dures dans un certain langage de programmation PL/SQL (langage de programmation pour SQL) est support\u00e9 sous une certaine forme dans la plupart des bases de donn\u00e9es relationnelles ou un autre langage de programmation support\u00e9, tel que C PostgreSQL supporte les types d\u00e9finis par l'utilisateur (UDT) et les fonctions d\u00e9finies par l'utilisateur (UDF) Les UDF peuvent \u00eatre d\u00e9finies en PL/SQL ou en C Les UDF peuvent \u00eatre utilis\u00e9es pour les d\u00e9clencheurs d'autres langages de programmation supportent les langages de programmation de diff\u00e9rentes mani\u00e8res","title":"Quand utiliser les d\u00e9clencheurs"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/","text":"Mod\u00e8le objet-relationel ORDBMS : Object-Relational DBMS Contacts normalis\u00e9s contacts1 Sch\u00e9ma relationnel DROP SCHEMA IF EXISTS contacts1 CASCADE; CREATE SCHEMA contacts1; SET search_path TO contacts1; CREATE TABLE users ( uid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR(15) NOT NULL, email TEXT NOT NULL, firstname TEXT, lastname TEXT, emergency_contact TEXT ); INSERT INTO users (username, email, emergency_contact) VALUES ('denis', 'denis.rinfret@example.com', 'help@example.com'), ('minh', 'minh@example.com', 'contact@example.com'); SELECT * FROM users; uid username email firstname lastname emergency_contact 1 denis denis.rinfret@example.com None None help@example.com 2 minh minh@example.com None None contact@example.com Que devons-nous faire pour permettre \u00e0 un utilisateur d'avoir plus d'un contact ? Si le nombre de contacts est fixe, disons n contacts, alors nous pourrions avoir n colonnes de contacts, tant que n est petit. Mais si n n'est pas petit ou si n est inconnu, alors nous devons avoir une autre table, une table contacts, pour pr\u00e9server la premi\u00e8re forme normale. La premi\u00e8re forme normale stipule que chaque valeur de colonne doit \u00eatre atomique. contacts2 Sch\u00e9ma relationnel DROP SCHEMA IF EXISTS contacts2 CASCADE; CREATE SCHEMA contacts2; SET search_path TO contacts2; CREATE TABLE users ( uid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR(15) NOT NULL, email TEXT NOT NULL, firstname TEXT, lastname TEXT ); CREATE TABLE contacts ( cid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, email TEXT NOT NULL, uid INTEGER REFERENCES users (uid) ) INSERT INTO users (username, email) VALUES ('denis', 'denis.rinfret@example.com'), ('minh', 'minh@example.com'); INSERT INTO contacts (email, uid) VALUES ('help@example.com', 1), ('minh@example.com', 1), ('contact@example.com', 2), ('ha@example.com', 2); SELECT * FROM users; uid username email firstname lastname 1 denis denis.rinfret@example.com None None 2 minh minh@example.com None None SELECT * FROM contacts; cid email uid 1 help@example.com 1 2 minh@example.com 1 3 contact@example.com 2 4 ha@example.com 2 Jointure n\u00e9cessaire pour obtenir toutes les donn\u00e9es SELECT * FROM users u INNER JOIN contacts c ON u.uid = c.uid; uid username email firstname lastname cid email_1 uid_1 1 denis denis.rinfret@example.com None None 1 help@example.com 1 1 denis denis.rinfret@example.com None None 2 minh@example.com 1 2 minh minh@example.com None None 3 contact@example.com 2 2 minh minh@example.com None None 4 ha@example.com 2 Les jointures peuvent \u00eatre lentes. Mais sans normalisation, les donn\u00e9es peuvent \u00eatre redondantes et des anomalies peuvent appara\u00eetre. Une SGDB object-relationalle (SGBDOR, ou ORDBMS) peut aider. Contacts d\u00e9normalis\u00e9s contacts3 Sch\u00e9ma objet-relationnel DROP SCHEMA IF EXISTS contacts3 CASCADE; CREATE SCHEMA contacts3; SET search_path TO contacts3; CREATE TABLE users ( uid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR(15) NOT NULL, email TEXT NOT NULL, firstname TEXT, lastname TEXT, emergency_contacts TEXT[] ); INSERT INTO users (username, email, emergency_contacts) VALUES ('denis', 'denis.rinfret@example.com', ARRAY ['help@example.com', 'minh@example.com']), ('minh', 'minh@example.com', ARRAY ['contact@example.com', 'ha@example.com']); SELECT uid, emergency_contacts FROM users; uid emergency_contacts 1 [\"help@example.com\", \"minh@example.com\"] 2 [\"contact@example.com\", \"ha@example.com\"] SELECT uid, username, email, firstname, lastname, unnest(emergency_contacts) FROM users; uid username email firstname lastname unnest 1 denis denis.rinfret@example.com None None help@example.com 1 denis denis.rinfret@example.com None None minh@example.com 2 minh minh@example.com None None contact@example.com 2 minh minh@example.com None None ha@example.com Trouver les utilisateurs avec un courriel sp\u00e9cifique comme premier contact d'urgence SELECT uid, username, email FROM users WHERE emergency_contacts[1] = 'help@example.com'; uid username email 1 denis denis.rinfret@example.com Trouver un utilisateur avec un courriel sp\u00e9cifique comme contact d'urgence (n'importe quelle position) SELECT uid, username, email FROM users WHERE 'ha@example.com' = ANY (emergency_contacts); uid username email 2 minh minh@example.com Trouver les utilisateurs qui sont list\u00e9s comme contact d'urgence d'autres utilisateurs SELECT uid, username, email FROM users WHERE email IN (SELECT unnest(emergency_contacts) FROM users); uid username email 2 minh minh@example.com SELECT distinct uid, username, email FROM users INNER JOIN (SELECT unnest(emergency_contacts) AS emergency_email FROM users) AS all_contacts ON email = emergency_email; uid username email 2 minh minh@example.com Sans unnest ni sous-requ\u00eates SELECT u1.uid, u1.username, u1.email FROM users u1 INNER JOIN users u2 ON u1.email = ANY (u2.emergency_contacts); uid username email 2 minh minh@example.com Types d\u00e9finis par les utilisateurs User-Defined Types (UDT) contacts4 Sch\u00e9ma objet-relationnel DROP SCHEMA IF EXISTS contacts4 CASCADE; CREATE SCHEMA contacts4; SET search_path TO contacts4; CREATE TYPE contact_type AS ENUM ('emergency', 'friend', 'family', 'colleague'); CREATE TYPE contact AS ( email TEXT, type contact_type ); CREATE TABLE users ( uid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR(15) NOT NULL, email TEXT NOT NULL, firstname TEXT, lastname TEXT, contacts contact[] ); INSERT INTO users (username, email, contacts) VALUES ('denis', 'denis.rinfret@example.com', ARRAY [('help@example.com', 'emergency')::contact, ('minh@example.com', 'friend')::contact]), ('minh', 'minh@example.com', ARRAY [('contact@example.com', 'family')::contact, ('ha@example.com', 'colleague')::contact]); SELECT uid, contacts FROM users; uid contacts 1 {\"(help@example.com,emergency)\",\"(minh@example.com,friend)\"} 2 {\"(contact@example.com,family)\",\"(ha@example.com,colleague)\"} SELECT uid, username, email, (unnest(contacts)::contact).* FROM users; uid username email email_1 type 1 denis denis.rinfret@example.com help@example.com emergency 1 denis denis.rinfret@example.com minh@example.com friend 2 minh minh@example.com contact@example.com family 2 minh minh@example.com ha@example.com colleague SELECT uid, username, email, (unnest(contacts)::contact).email AS contact_email, (unnest(contacts)::contact).type AS contact_type FROM users; uid username email contact_email contact_type 1 denis denis.rinfret@example.com help@example.com emergency 1 denis denis.rinfret@example.com minh@example.com friend 2 minh minh@example.com contact@example.com family 2 minh minh@example.com ha@example.com colleague Trouver tous les contacts d'urgence d'un utilisateur SELECT * FROM (SELECT uid, username, email, (unnest(contacts)::contact).email AS contact_email, (unnest(contacts)::contact).type AS contact_type FROM users) AS temp WHERE contact_type = 'emergency'; uid username email contact_email contact_type 1 denis denis.rinfret@example.com help@example.com emergency Trouver les utilisateurs sans contacts d'urgence SELECT uid, username, email FROM users WHERE 'emergency' NOT IN (SELECT (unnest(contacts)::contact).type); uid username email 2 minh minh@example.com SELECT uid, username, email FROM users WHERE 'emergency' != ALL (SELECT (unnest(contacts)::contact).type); uid username email 2 minh minh@example.com JSONB \u00e0 la place de tableaux contacts5 Sch\u00e9ma objet-relationnel DROP SCHEMA IF EXISTS contacts5 CASCADE; CREATE SCHEMA contacts5; SET search_path TO contacts5; CREATE TABLE users ( uid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR(15) NOT NULL, email TEXT NOT NULL, firstname TEXT, lastname TEXT, contacts jsonb ); INSERT INTO users (username, email, contacts) VALUES ('denis', 'denis.rinfret@example.com', '{\"emergency\": \"help@example.com\", \"friend\": \"minh@example.com\"}'), ('minh', 'minh@example.com', '{\"family\": \"contact@example.com\", \"colleague\": \"ha@example.com\"}'); SELECT uid, contacts FROM users; uid contacts 1 {\"friend\": \"minh@example.com\", \"emergency\": \"help@example.com\"} 2 {\"family\": \"contact@example.com\", \"colleague\": \"ha@example.com\"} Trouver les utilisateurs avec au moins un contact d'urgence SELECT uid, username, email FROM users WHERE 'emergency' IN (SELECT jsonb_object_keys(contacts)); uid username email 1 denis denis.rinfret@example.com SELECT uid, username, email FROM users WHERE contacts ? 'emergency'; uid username email 1 denis denis.rinfret@example.com SELECT uid, username, email, contacts -> 'emergency' AS emergency FROM users WHERE contacts ? 'emergency'; uid username email emergency 1 denis denis.rinfret@example.com help@example.com Trouver les utilisateurs sans contacts d'urgence SELECT uid, username, email FROM users WHERE NOT (contacts ? 'emergency'); uid username email 2 minh minh@example.com Sch\u00e9ma relationnel avec les types de contact contacts6 Relational Schema DROP SCHEMA IF EXISTS contacts6 CASCADE; CREATE SCHEMA contacts6; SET search_path TO contacts6; CREATE TABLE users ( uid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR(15) NOT NULL, email TEXT NOT NULL, firstname TEXT, lastname TEXT ); CREATE TYPE contact_type AS ENUM ('emergency', 'friend', 'family', 'colleague'); CREATE TABLE contacts ( cid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, email TEXT NOT NULL, type contact_type NOT NULL, uid INTEGER REFERENCES users (uid) ); INSERT INTO users (username, email) VALUES ('denis', 'denis.rinfret@example.com'), ('minh', 'minh@example.com'); INSERT INTO contacts (email, type, uid) VALUES ('help@example.com', 'emergency', 1), ('minh@example.com', 'friend', 1), ('contact@example.com', 'colleague', 2), ('ha@example.com', 'family', 2); SELECT * FROM users; uid username email firstname lastname 1 denis denis.rinfret@example.com None None 2 minh minh@example.com None None SELECT * FROM contacts; cid email type uid 1 help@example.com emergency 1 2 minh@example.com friend 1 3 contact@example.com colleague 2 4 ha@example.com family 2 SELECT * FROM users u INNER JOIN contacts c ON u.uid = c.uid; uid username email firstname lastname cid email_1 type uid_1 1 denis denis.rinfret@example.com None None 1 help@example.com emergency 1 1 denis denis.rinfret@example.com None None 2 minh@example.com friend 1 2 minh minh@example.com None None 3 contact@example.com colleague 2 2 minh minh@example.com None None 4 ha@example.com family 2 Trouver les utilisateurs sans contacts d'urgence SELECT uid, username, email FROM users WHERE uid NOT IN (SELECT uid FROM contacts WHERE type = 'emergency'); uid username email 2 minh minh@example.com SELECT users.uid, username, email FROM users LEFT JOIN (SELECT uid FROM contacts WHERE type = 'emergency') AS temp ON users.uid = temp.uid WHERE temp.uid IS NULL; uid username email 2 minh minh@example.com Comment traitons-nous les relations plusieurs \u00e0 plusieurs ? Dans une base de donn\u00e9es relationnelle, nous avons besoin d'une table suppl\u00e9mentaire entre les 2 tables. Par exemple, nous avons besoin d'une table entre \"Users\" et \"Contacts\", contenant des cl\u00e9s \u00e9trang\u00e8res pour les ID d'utilisateur et les ID de contact. Comment r\u00e9cup\u00e9rons-nous toutes les donn\u00e9es ? Avec 2 jointures. Qu'en est-il des autres mod\u00e8les de donn\u00e9es ? Avec des tableaux ? Avec JSONB ? Il n'y a pas de solutions miracles pour les relations plusieurs \u00e0 plusieurs","title":"Mod\u00e8le objet-relationel"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#modele-objet-relationel","text":"ORDBMS : Object-Relational DBMS","title":"Mod\u00e8le objet-relationel"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#contacts-normalises","text":"","title":"Contacts normalis\u00e9s"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#contacts1-schema-relationnel","text":"DROP SCHEMA IF EXISTS contacts1 CASCADE; CREATE SCHEMA contacts1; SET search_path TO contacts1; CREATE TABLE users ( uid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR(15) NOT NULL, email TEXT NOT NULL, firstname TEXT, lastname TEXT, emergency_contact TEXT ); INSERT INTO users (username, email, emergency_contact) VALUES ('denis', 'denis.rinfret@example.com', 'help@example.com'), ('minh', 'minh@example.com', 'contact@example.com'); SELECT * FROM users; uid username email firstname lastname emergency_contact 1 denis denis.rinfret@example.com None None help@example.com 2 minh minh@example.com None None contact@example.com","title":"contacts1 Sch\u00e9ma relationnel"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#que-devons-nous-faire-pour-permettre-a-un-utilisateur-davoir-plus-dun-contact","text":"Si le nombre de contacts est fixe, disons n contacts, alors nous pourrions avoir n colonnes de contacts, tant que n est petit. Mais si n n'est pas petit ou si n est inconnu, alors nous devons avoir une autre table, une table contacts, pour pr\u00e9server la premi\u00e8re forme normale. La premi\u00e8re forme normale stipule que chaque valeur de colonne doit \u00eatre atomique.","title":"Que devons-nous faire pour permettre \u00e0 un utilisateur d'avoir plus d'un contact ?"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#contacts2-schema-relationnel","text":"DROP SCHEMA IF EXISTS contacts2 CASCADE; CREATE SCHEMA contacts2; SET search_path TO contacts2; CREATE TABLE users ( uid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR(15) NOT NULL, email TEXT NOT NULL, firstname TEXT, lastname TEXT ); CREATE TABLE contacts ( cid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, email TEXT NOT NULL, uid INTEGER REFERENCES users (uid) ) INSERT INTO users (username, email) VALUES ('denis', 'denis.rinfret@example.com'), ('minh', 'minh@example.com'); INSERT INTO contacts (email, uid) VALUES ('help@example.com', 1), ('minh@example.com', 1), ('contact@example.com', 2), ('ha@example.com', 2); SELECT * FROM users; uid username email firstname lastname 1 denis denis.rinfret@example.com None None 2 minh minh@example.com None None SELECT * FROM contacts; cid email uid 1 help@example.com 1 2 minh@example.com 1 3 contact@example.com 2 4 ha@example.com 2","title":"contacts2 Sch\u00e9ma relationnel"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#jointure-necessaire-pour-obtenir-toutes-les-donnees","text":"SELECT * FROM users u INNER JOIN contacts c ON u.uid = c.uid; uid username email firstname lastname cid email_1 uid_1 1 denis denis.rinfret@example.com None None 1 help@example.com 1 1 denis denis.rinfret@example.com None None 2 minh@example.com 1 2 minh minh@example.com None None 3 contact@example.com 2 2 minh minh@example.com None None 4 ha@example.com 2 Les jointures peuvent \u00eatre lentes. Mais sans normalisation, les donn\u00e9es peuvent \u00eatre redondantes et des anomalies peuvent appara\u00eetre. Une SGDB object-relationalle (SGBDOR, ou ORDBMS) peut aider.","title":"Jointure n\u00e9cessaire pour obtenir toutes les donn\u00e9es"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#contacts-denormalises","text":"","title":"Contacts d\u00e9normalis\u00e9s"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#contacts3-schema-objet-relationnel","text":"DROP SCHEMA IF EXISTS contacts3 CASCADE; CREATE SCHEMA contacts3; SET search_path TO contacts3; CREATE TABLE users ( uid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR(15) NOT NULL, email TEXT NOT NULL, firstname TEXT, lastname TEXT, emergency_contacts TEXT[] ); INSERT INTO users (username, email, emergency_contacts) VALUES ('denis', 'denis.rinfret@example.com', ARRAY ['help@example.com', 'minh@example.com']), ('minh', 'minh@example.com', ARRAY ['contact@example.com', 'ha@example.com']); SELECT uid, emergency_contacts FROM users; uid emergency_contacts 1 [\"help@example.com\", \"minh@example.com\"] 2 [\"contact@example.com\", \"ha@example.com\"] SELECT uid, username, email, firstname, lastname, unnest(emergency_contacts) FROM users; uid username email firstname lastname unnest 1 denis denis.rinfret@example.com None None help@example.com 1 denis denis.rinfret@example.com None None minh@example.com 2 minh minh@example.com None None contact@example.com 2 minh minh@example.com None None ha@example.com","title":"contacts3 Sch\u00e9ma objet-relationnel"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#trouver-les-utilisateurs-avec-un-courriel-specifique-comme-premier-contact-durgence","text":"SELECT uid, username, email FROM users WHERE emergency_contacts[1] = 'help@example.com'; uid username email 1 denis denis.rinfret@example.com","title":"Trouver les utilisateurs avec un courriel sp\u00e9cifique comme premier contact d'urgence"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#trouver-un-utilisateur-avec-un-courriel-specifique-comme-contact-durgence-nimporte-quelle-position","text":"SELECT uid, username, email FROM users WHERE 'ha@example.com' = ANY (emergency_contacts); uid username email 2 minh minh@example.com","title":"Trouver un utilisateur avec un courriel sp\u00e9cifique comme contact d'urgence (n'importe quelle position)"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#trouver-les-utilisateurs-qui-sont-listes-comme-contact-durgence-dautres-utilisateurs","text":"SELECT uid, username, email FROM users WHERE email IN (SELECT unnest(emergency_contacts) FROM users); uid username email 2 minh minh@example.com SELECT distinct uid, username, email FROM users INNER JOIN (SELECT unnest(emergency_contacts) AS emergency_email FROM users) AS all_contacts ON email = emergency_email; uid username email 2 minh minh@example.com","title":"Trouver les utilisateurs qui sont list\u00e9s comme contact d'urgence d'autres utilisateurs"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#sans-unnest-ni-sous-requetes","text":"SELECT u1.uid, u1.username, u1.email FROM users u1 INNER JOIN users u2 ON u1.email = ANY (u2.emergency_contacts); uid username email 2 minh minh@example.com","title":"Sans unnest ni sous-requ\u00eates"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#types-definis-par-les-utilisateurs","text":"User-Defined Types (UDT)","title":"Types d\u00e9finis par les utilisateurs"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#contacts4-schema-objet-relationnel","text":"DROP SCHEMA IF EXISTS contacts4 CASCADE; CREATE SCHEMA contacts4; SET search_path TO contacts4; CREATE TYPE contact_type AS ENUM ('emergency', 'friend', 'family', 'colleague'); CREATE TYPE contact AS ( email TEXT, type contact_type ); CREATE TABLE users ( uid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR(15) NOT NULL, email TEXT NOT NULL, firstname TEXT, lastname TEXT, contacts contact[] ); INSERT INTO users (username, email, contacts) VALUES ('denis', 'denis.rinfret@example.com', ARRAY [('help@example.com', 'emergency')::contact, ('minh@example.com', 'friend')::contact]), ('minh', 'minh@example.com', ARRAY [('contact@example.com', 'family')::contact, ('ha@example.com', 'colleague')::contact]); SELECT uid, contacts FROM users; uid contacts 1 {\"(help@example.com,emergency)\",\"(minh@example.com,friend)\"} 2 {\"(contact@example.com,family)\",\"(ha@example.com,colleague)\"} SELECT uid, username, email, (unnest(contacts)::contact).* FROM users; uid username email email_1 type 1 denis denis.rinfret@example.com help@example.com emergency 1 denis denis.rinfret@example.com minh@example.com friend 2 minh minh@example.com contact@example.com family 2 minh minh@example.com ha@example.com colleague SELECT uid, username, email, (unnest(contacts)::contact).email AS contact_email, (unnest(contacts)::contact).type AS contact_type FROM users; uid username email contact_email contact_type 1 denis denis.rinfret@example.com help@example.com emergency 1 denis denis.rinfret@example.com minh@example.com friend 2 minh minh@example.com contact@example.com family 2 minh minh@example.com ha@example.com colleague","title":"contacts4 Sch\u00e9ma objet-relationnel"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#trouver-tous-les-contacts-durgence-dun-utilisateur","text":"SELECT * FROM (SELECT uid, username, email, (unnest(contacts)::contact).email AS contact_email, (unnest(contacts)::contact).type AS contact_type FROM users) AS temp WHERE contact_type = 'emergency'; uid username email contact_email contact_type 1 denis denis.rinfret@example.com help@example.com emergency","title":"Trouver tous les contacts d'urgence d'un utilisateur"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#trouver-les-utilisateurs-sans-contacts-durgence","text":"SELECT uid, username, email FROM users WHERE 'emergency' NOT IN (SELECT (unnest(contacts)::contact).type); uid username email 2 minh minh@example.com SELECT uid, username, email FROM users WHERE 'emergency' != ALL (SELECT (unnest(contacts)::contact).type); uid username email 2 minh minh@example.com","title":"Trouver les utilisateurs sans contacts d'urgence"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#jsonb-a-la-place-de-tableaux","text":"","title":"JSONB \u00e0 la place de tableaux"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#contacts5-schema-objet-relationnel","text":"DROP SCHEMA IF EXISTS contacts5 CASCADE; CREATE SCHEMA contacts5; SET search_path TO contacts5; CREATE TABLE users ( uid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR(15) NOT NULL, email TEXT NOT NULL, firstname TEXT, lastname TEXT, contacts jsonb ); INSERT INTO users (username, email, contacts) VALUES ('denis', 'denis.rinfret@example.com', '{\"emergency\": \"help@example.com\", \"friend\": \"minh@example.com\"}'), ('minh', 'minh@example.com', '{\"family\": \"contact@example.com\", \"colleague\": \"ha@example.com\"}'); SELECT uid, contacts FROM users; uid contacts 1 {\"friend\": \"minh@example.com\", \"emergency\": \"help@example.com\"} 2 {\"family\": \"contact@example.com\", \"colleague\": \"ha@example.com\"}","title":"contacts5 Sch\u00e9ma objet-relationnel"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#trouver-les-utilisateurs-avec-au-moins-un-contact-durgence","text":"SELECT uid, username, email FROM users WHERE 'emergency' IN (SELECT jsonb_object_keys(contacts)); uid username email 1 denis denis.rinfret@example.com SELECT uid, username, email FROM users WHERE contacts ? 'emergency'; uid username email 1 denis denis.rinfret@example.com SELECT uid, username, email, contacts -> 'emergency' AS emergency FROM users WHERE contacts ? 'emergency'; uid username email emergency 1 denis denis.rinfret@example.com help@example.com","title":"Trouver les utilisateurs avec au moins un contact d'urgence"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#trouver-les-utilisateurs-sans-contacts-durgence_1","text":"SELECT uid, username, email FROM users WHERE NOT (contacts ? 'emergency'); uid username email 2 minh minh@example.com","title":"Trouver les utilisateurs sans contacts d'urgence"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#schema-relationnel-avec-les-types-de-contact","text":"","title":"Sch\u00e9ma relationnel avec les types de contact"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#contacts6-relational-schema","text":"DROP SCHEMA IF EXISTS contacts6 CASCADE; CREATE SCHEMA contacts6; SET search_path TO contacts6; CREATE TABLE users ( uid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR(15) NOT NULL, email TEXT NOT NULL, firstname TEXT, lastname TEXT ); CREATE TYPE contact_type AS ENUM ('emergency', 'friend', 'family', 'colleague'); CREATE TABLE contacts ( cid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, email TEXT NOT NULL, type contact_type NOT NULL, uid INTEGER REFERENCES users (uid) ); INSERT INTO users (username, email) VALUES ('denis', 'denis.rinfret@example.com'), ('minh', 'minh@example.com'); INSERT INTO contacts (email, type, uid) VALUES ('help@example.com', 'emergency', 1), ('minh@example.com', 'friend', 1), ('contact@example.com', 'colleague', 2), ('ha@example.com', 'family', 2); SELECT * FROM users; uid username email firstname lastname 1 denis denis.rinfret@example.com None None 2 minh minh@example.com None None SELECT * FROM contacts; cid email type uid 1 help@example.com emergency 1 2 minh@example.com friend 1 3 contact@example.com colleague 2 4 ha@example.com family 2 SELECT * FROM users u INNER JOIN contacts c ON u.uid = c.uid; uid username email firstname lastname cid email_1 type uid_1 1 denis denis.rinfret@example.com None None 1 help@example.com emergency 1 1 denis denis.rinfret@example.com None None 2 minh@example.com friend 1 2 minh minh@example.com None None 3 contact@example.com colleague 2 2 minh minh@example.com None None 4 ha@example.com family 2","title":"contacts6 Relational Schema"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#trouver-les-utilisateurs-sans-contacts-durgence_2","text":"SELECT uid, username, email FROM users WHERE uid NOT IN (SELECT uid FROM contacts WHERE type = 'emergency'); uid username email 2 minh minh@example.com SELECT users.uid, username, email FROM users LEFT JOIN (SELECT uid FROM contacts WHERE type = 'emergency') AS temp ON users.uid = temp.uid WHERE temp.uid IS NULL; uid username email 2 minh minh@example.com","title":"Trouver les utilisateurs sans contacts d'urgence"},{"location":"5.%20SQL%20Avanc%C3%A9/03-objet-relationel/#comment-traitons-nous-les-relations-plusieurs-a-plusieurs","text":"Dans une base de donn\u00e9es relationnelle, nous avons besoin d'une table suppl\u00e9mentaire entre les 2 tables. Par exemple, nous avons besoin d'une table entre \"Users\" et \"Contacts\", contenant des cl\u00e9s \u00e9trang\u00e8res pour les ID d'utilisateur et les ID de contact. Comment r\u00e9cup\u00e9rons-nous toutes les donn\u00e9es ? Avec 2 jointures. Qu'en est-il des autres mod\u00e8les de donn\u00e9es ? Avec des tableaux ? Avec JSONB ? Il n'y a pas de solutions miracles pour les relations plusieurs \u00e0 plusieurs","title":"Comment traitons-nous les relations plusieurs \u00e0 plusieurs ?"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/01-s%C3%A9curit%C3%A9/","text":"Gestion des Utilisateurs et S\u00e9curit\u00e9 La gestion des utilisateurs et la s\u00e9curit\u00e9 sont des aspects cruciaux de l'administration des Syst\u00e8mes de Gestion de Bases de Donn\u00e9es (SGBD). Une bonne compr\u00e9hension de ces concepts est essentielle pour garantir l'int\u00e9grit\u00e9, la confidentialit\u00e9 et la disponibilit\u00e9 des donn\u00e9es. Voici une introduction g\u00e9n\u00e9rale \u00e0 ces sujets. 1. Gestion des Utilisateurs 1.1. Cr\u00e9ation et Gestion des Comptes Utilisateurs La gestion des utilisateurs dans un SGBD implique la cr\u00e9ation, la modification et la suppression de comptes utilisateurs. Chaque utilisateur se voit attribuer un identifiant unique et des informations d'authentification (comme un mot de passe). Voici quelques concepts cl\u00e9s : Cr\u00e9ation de Comptes : Les administrateurs de bases de donn\u00e9es (DBA) cr\u00e9ent des comptes utilisateurs en d\u00e9finissant des identifiants et des mots de passe. Modification de Comptes : Les DBA peuvent modifier les informations des comptes existants, comme les mots de passe ou les r\u00f4les attribu\u00e9s. Suppression de Comptes : Les comptes inutilis\u00e9s ou compromis peuvent \u00eatre supprim\u00e9s pour maintenir la s\u00e9curit\u00e9. 1.2. R\u00f4les et Privil\u00e8ges Les r\u00f4les et privil\u00e8ges d\u00e9terminent ce que chaque utilisateur peut faire dans la base de donn\u00e9es. R\u00f4les : Un r\u00f4le est un ensemble de privil\u00e8ges qui peuvent \u00eatre attribu\u00e9s \u00e0 un ou plusieurs utilisateurs. Les r\u00f4les facilitent la gestion des permissions en regroupant des privil\u00e8ges communs. Privil\u00e8ges : Les privil\u00e8ges sont des autorisations sp\u00e9cifiques accord\u00e9es aux utilisateurs ou aux r\u00f4les. Ils peuvent inclure des actions comme SELECT, INSERT, UPDATE, DELETE, CREATE, et DROP. 2. S\u00e9curit\u00e9 dans un SGBD 2.1. Authentification L'authentification est le processus de v\u00e9rification de l'identit\u00e9 d'un utilisateur. Les m\u00e9thodes courantes incluent : Mots de Passe : La m\u00e9thode la plus courante o\u00f9 les utilisateurs doivent fournir un mot de passe pour acc\u00e9der \u00e0 la base de donn\u00e9es. Authentification \u00e0 Deux Facteurs (2FA) : Ajoute une couche de s\u00e9curit\u00e9 suppl\u00e9mentaire en exigeant un second facteur, comme un code envoy\u00e9 par SMS. Certificats : Utilis\u00e9s pour l'authentification bas\u00e9e sur des certificats num\u00e9riques. 2.2. Autorisation L'autorisation d\u00e9termine ce que les utilisateurs authentifi\u00e9s sont autoris\u00e9s \u00e0 faire. Elle est g\u00e9r\u00e9e par des r\u00f4les et des privil\u00e8ges, comme mentionn\u00e9 pr\u00e9c\u00e9demment. Les DBA doivent s'assurer que les utilisateurs n'ont que les privil\u00e8ges n\u00e9cessaires pour accomplir leurs t\u00e2ches (principe du moindre privil\u00e8ge). 2.3. Contr\u00f4le d'Acc\u00e8s Le contr\u00f4le d'acc\u00e8s est la mise en \u0153uvre des politiques d'autorisation. Il existe plusieurs mod\u00e8les de contr\u00f4le d'acc\u00e8s : Contr\u00f4le d'Acc\u00e8s Discr\u00e9tionnaire (DAC) : Les propri\u00e9taires des objets de la base de donn\u00e9es (comme les tables) contr\u00f4lent l'acc\u00e8s \u00e0 leurs objets. Contr\u00f4le d'Acc\u00e8s Obligatoire (MAC) : Les acc\u00e8s sont contr\u00f4l\u00e9s par des r\u00e8gles globales d\u00e9finies par l'administrateur, souvent bas\u00e9es sur des niveaux de s\u00e9curit\u00e9. Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC) : Les acc\u00e8s sont accord\u00e9s en fonction des r\u00f4les attribu\u00e9s aux utilisateurs. 2.4. S\u00e9curit\u00e9 des Donn\u00e9es La s\u00e9curit\u00e9 des donn\u00e9es comprend la protection des donn\u00e9es \u00e0 la fois en transit et au repos. Chiffrement : Les donn\u00e9es peuvent \u00eatre chiffr\u00e9es pour emp\u00eacher l'acc\u00e8s non autoris\u00e9. Le chiffrement peut \u00eatre appliqu\u00e9 aux donn\u00e9es en transit ( lorsqu'elles sont transf\u00e9r\u00e9es sur le r\u00e9seau) et aux donn\u00e9es au repos ( lorsqu'elles sont stock\u00e9es). Masquage de Donn\u00e9es : Technique permettant de masquer les donn\u00e9es sensibles pour les utilisateurs qui n'ont pas besoin d'y acc\u00e9der directement. 2.5. Audit et Surveillance Les syst\u00e8mes de gestion de bases de donn\u00e9es doivent inclure des m\u00e9canismes pour auditer et surveiller les activit\u00e9s des utilisateurs. Cela permet de d\u00e9tecter et de r\u00e9pondre aux comportements suspects ou non autoris\u00e9s. Journaux d'Audit : Enregistrement des actions des utilisateurs, comme les connexions, les modifications de donn\u00e9es, etc. Alertes de S\u00e9curit\u00e9 : Notifications automatiques en cas d'activit\u00e9s suspectes ou de violations de s\u00e9curit\u00e9. Conclusion La gestion des utilisateurs et la s\u00e9curit\u00e9 dans un SGBD sont des domaines vastes et complexes, mais essentiels pour prot\u00e9ger les donn\u00e9es et garantir leur int\u00e9grit\u00e9. Une compr\u00e9hension approfondie de ces concepts permet aux administrateurs de bases de donn\u00e9es de mettre en place des syst\u00e8mes robustes et s\u00e9curis\u00e9s, minimisant ainsi les risques de compromission des donn\u00e9es. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Gestion des Utilisateurs et S\u00e9curit\u00e9"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/01-s%C3%A9curit%C3%A9/#gestion-des-utilisateurs-et-securite","text":"La gestion des utilisateurs et la s\u00e9curit\u00e9 sont des aspects cruciaux de l'administration des Syst\u00e8mes de Gestion de Bases de Donn\u00e9es (SGBD). Une bonne compr\u00e9hension de ces concepts est essentielle pour garantir l'int\u00e9grit\u00e9, la confidentialit\u00e9 et la disponibilit\u00e9 des donn\u00e9es. Voici une introduction g\u00e9n\u00e9rale \u00e0 ces sujets.","title":"Gestion des Utilisateurs et S\u00e9curit\u00e9"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/01-s%C3%A9curit%C3%A9/#1-gestion-des-utilisateurs","text":"","title":"1. Gestion des Utilisateurs"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/01-s%C3%A9curit%C3%A9/#11-creation-et-gestion-des-comptes-utilisateurs","text":"La gestion des utilisateurs dans un SGBD implique la cr\u00e9ation, la modification et la suppression de comptes utilisateurs. Chaque utilisateur se voit attribuer un identifiant unique et des informations d'authentification (comme un mot de passe). Voici quelques concepts cl\u00e9s : Cr\u00e9ation de Comptes : Les administrateurs de bases de donn\u00e9es (DBA) cr\u00e9ent des comptes utilisateurs en d\u00e9finissant des identifiants et des mots de passe. Modification de Comptes : Les DBA peuvent modifier les informations des comptes existants, comme les mots de passe ou les r\u00f4les attribu\u00e9s. Suppression de Comptes : Les comptes inutilis\u00e9s ou compromis peuvent \u00eatre supprim\u00e9s pour maintenir la s\u00e9curit\u00e9.","title":"1.1. Cr\u00e9ation et Gestion des Comptes Utilisateurs"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/01-s%C3%A9curit%C3%A9/#12-roles-et-privileges","text":"Les r\u00f4les et privil\u00e8ges d\u00e9terminent ce que chaque utilisateur peut faire dans la base de donn\u00e9es. R\u00f4les : Un r\u00f4le est un ensemble de privil\u00e8ges qui peuvent \u00eatre attribu\u00e9s \u00e0 un ou plusieurs utilisateurs. Les r\u00f4les facilitent la gestion des permissions en regroupant des privil\u00e8ges communs. Privil\u00e8ges : Les privil\u00e8ges sont des autorisations sp\u00e9cifiques accord\u00e9es aux utilisateurs ou aux r\u00f4les. Ils peuvent inclure des actions comme SELECT, INSERT, UPDATE, DELETE, CREATE, et DROP.","title":"1.2. R\u00f4les et Privil\u00e8ges"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/01-s%C3%A9curit%C3%A9/#2-securite-dans-un-sgbd","text":"","title":"2. S\u00e9curit\u00e9 dans un SGBD"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/01-s%C3%A9curit%C3%A9/#21-authentification","text":"L'authentification est le processus de v\u00e9rification de l'identit\u00e9 d'un utilisateur. Les m\u00e9thodes courantes incluent : Mots de Passe : La m\u00e9thode la plus courante o\u00f9 les utilisateurs doivent fournir un mot de passe pour acc\u00e9der \u00e0 la base de donn\u00e9es. Authentification \u00e0 Deux Facteurs (2FA) : Ajoute une couche de s\u00e9curit\u00e9 suppl\u00e9mentaire en exigeant un second facteur, comme un code envoy\u00e9 par SMS. Certificats : Utilis\u00e9s pour l'authentification bas\u00e9e sur des certificats num\u00e9riques.","title":"2.1. Authentification"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/01-s%C3%A9curit%C3%A9/#22-autorisation","text":"L'autorisation d\u00e9termine ce que les utilisateurs authentifi\u00e9s sont autoris\u00e9s \u00e0 faire. Elle est g\u00e9r\u00e9e par des r\u00f4les et des privil\u00e8ges, comme mentionn\u00e9 pr\u00e9c\u00e9demment. Les DBA doivent s'assurer que les utilisateurs n'ont que les privil\u00e8ges n\u00e9cessaires pour accomplir leurs t\u00e2ches (principe du moindre privil\u00e8ge).","title":"2.2. Autorisation"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/01-s%C3%A9curit%C3%A9/#23-controle-dacces","text":"Le contr\u00f4le d'acc\u00e8s est la mise en \u0153uvre des politiques d'autorisation. Il existe plusieurs mod\u00e8les de contr\u00f4le d'acc\u00e8s : Contr\u00f4le d'Acc\u00e8s Discr\u00e9tionnaire (DAC) : Les propri\u00e9taires des objets de la base de donn\u00e9es (comme les tables) contr\u00f4lent l'acc\u00e8s \u00e0 leurs objets. Contr\u00f4le d'Acc\u00e8s Obligatoire (MAC) : Les acc\u00e8s sont contr\u00f4l\u00e9s par des r\u00e8gles globales d\u00e9finies par l'administrateur, souvent bas\u00e9es sur des niveaux de s\u00e9curit\u00e9. Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC) : Les acc\u00e8s sont accord\u00e9s en fonction des r\u00f4les attribu\u00e9s aux utilisateurs.","title":"2.3. Contr\u00f4le d'Acc\u00e8s"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/01-s%C3%A9curit%C3%A9/#24-securite-des-donnees","text":"La s\u00e9curit\u00e9 des donn\u00e9es comprend la protection des donn\u00e9es \u00e0 la fois en transit et au repos. Chiffrement : Les donn\u00e9es peuvent \u00eatre chiffr\u00e9es pour emp\u00eacher l'acc\u00e8s non autoris\u00e9. Le chiffrement peut \u00eatre appliqu\u00e9 aux donn\u00e9es en transit ( lorsqu'elles sont transf\u00e9r\u00e9es sur le r\u00e9seau) et aux donn\u00e9es au repos ( lorsqu'elles sont stock\u00e9es). Masquage de Donn\u00e9es : Technique permettant de masquer les donn\u00e9es sensibles pour les utilisateurs qui n'ont pas besoin d'y acc\u00e9der directement.","title":"2.4. S\u00e9curit\u00e9 des Donn\u00e9es"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/01-s%C3%A9curit%C3%A9/#25-audit-et-surveillance","text":"Les syst\u00e8mes de gestion de bases de donn\u00e9es doivent inclure des m\u00e9canismes pour auditer et surveiller les activit\u00e9s des utilisateurs. Cela permet de d\u00e9tecter et de r\u00e9pondre aux comportements suspects ou non autoris\u00e9s. Journaux d'Audit : Enregistrement des actions des utilisateurs, comme les connexions, les modifications de donn\u00e9es, etc. Alertes de S\u00e9curit\u00e9 : Notifications automatiques en cas d'activit\u00e9s suspectes ou de violations de s\u00e9curit\u00e9.","title":"2.5. Audit et Surveillance"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/01-s%C3%A9curit%C3%A9/#conclusion","text":"La gestion des utilisateurs et la s\u00e9curit\u00e9 dans un SGBD sont des domaines vastes et complexes, mais essentiels pour prot\u00e9ger les donn\u00e9es et garantir leur int\u00e9grit\u00e9. Une compr\u00e9hension approfondie de ces concepts permet aux administrateurs de bases de donn\u00e9es de mettre en place des syst\u00e8mes robustes et s\u00e9curis\u00e9s, minimisant ainsi les risques de compromission des donn\u00e9es. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Conclusion"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/","text":"Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC) Le Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC) est une m\u00e9thode de gestion des autorisations qui permet de contr\u00f4ler l'acc\u00e8s aux ressources en fonction des r\u00f4les attribu\u00e9s aux utilisateurs au sein d'une organisation. Cette approche est largement utilis\u00e9e dans les syst\u00e8mes d'information pour g\u00e9rer les permissions de mani\u00e8re efficace et s\u00e9curis\u00e9e. Voici une vue d\u00e9taill\u00e9e du RBAC, ses concepts cl\u00e9s, ses avantages, et ses meilleures pratiques. 1. Concepts Cl\u00e9s du RBAC 1.1. R\u00f4les Un r\u00f4le est une collection de permissions qui d\u00e9finissent ce qu'un utilisateur peut faire dans le syst\u00e8me. Les r\u00f4les sont g\u00e9n\u00e9ralement bas\u00e9s sur les responsabilit\u00e9s des utilisateurs au sein de l'organisation. Par exemple, les r\u00f4les peuvent inclure \"Administrateur\", \"D\u00e9veloppeur\", \"Analyste\", etc. 1.2. Utilisateurs Les utilisateurs sont les individus qui interagissent avec le syst\u00e8me. Chaque utilisateur se voit attribuer un ou plusieurs r\u00f4les, d\u00e9terminant ainsi ses permissions. 1.3. Permissions Les permissions sont des autorisations sp\u00e9cifiques qui permettent d'effectuer des actions sur des objets du syst\u00e8me. Par exemple, les permissions peuvent inclure \"lire un fichier\", \"\u00e9crire dans une base de donn\u00e9es\", \"modifier une configuration\", etc. 1.4. Sessions Les sessions repr\u00e9sentent une instance de connexion d'un utilisateur au syst\u00e8me. Pendant une session, l'utilisateur peut exercer les permissions associ\u00e9es \u00e0 ses r\u00f4les. 2. Mod\u00e8les de RBAC Il existe plusieurs mod\u00e8les de RBAC, chacun offrant diff\u00e9rents niveaux de contr\u00f4le et de flexibilit\u00e9 : 2.1. RBAC de Base (RBAC0) Le mod\u00e8le de base permet d'assigner des r\u00f4les aux utilisateurs et de d\u00e9finir des permissions pour chaque r\u00f4le. Les utilisateurs h\u00e9ritent des permissions de leurs r\u00f4les. 2.2. RBAC Hi\u00e9rarchique (RBAC1) Le mod\u00e8le hi\u00e9rarchique introduit la notion de hi\u00e9rarchie des r\u00f4les, o\u00f9 les r\u00f4les peuvent h\u00e9riter des permissions d'autres r\u00f4les. Cela permet de cr\u00e9er des r\u00f4les parents et enfants, facilitant la gestion des permissions. 2.3. RBAC Contrainte (RBAC2) Le mod\u00e8le contraint ajoute des contraintes suppl\u00e9mentaires pour renforcer la s\u00e9curit\u00e9. Par exemple, des contraintes de s\u00e9paration des t\u00e2ches peuvent \u00eatre appliqu\u00e9es pour s'assurer qu'aucun utilisateur n'a des permissions conflictuelles. 2.4. RBAC Symbiotique (RBAC3) Le mod\u00e8le symbiotique combine les fonctionnalit\u00e9s des mod\u00e8les hi\u00e9rarchique et contraint, offrant ainsi une flexibilit\u00e9 maximale et une s\u00e9curit\u00e9 renforc\u00e9e. 3. Avantages du RBAC Simplicit\u00e9 : Simplifie la gestion des permissions en regroupant les autorisations communes dans des r\u00f4les. S\u00e9curit\u00e9 : R\u00e9duit les risques d'erreurs de configuration des permissions et renforce la s\u00e9curit\u00e9 en centralisant la gestion des acc\u00e8s. Scalabilit\u00e9 : Facilite la gestion des permissions dans des environnements avec de nombreux utilisateurs et r\u00f4les. Conformit\u00e9 : Aide \u00e0 respecter les r\u00e9glementations en mati\u00e8re de s\u00e9curit\u00e9 et de confidentialit\u00e9 en appliquant des politiques d'acc\u00e8s strictes. 4. Meilleures Pratiques pour l'Impl\u00e9mentation du RBAC 4.1. Analyse des R\u00f4les Commencez par analyser les responsabilit\u00e9s et les t\u00e2ches des utilisateurs au sein de l'organisation pour d\u00e9finir des r\u00f4les appropri\u00e9s. Assurez-vous que chaque r\u00f4le correspond \u00e0 un ensemble coh\u00e9rent de permissions. 4.2. Minimisation des Privil\u00e8ges Appliquez le principe du moindre privil\u00e8ge en attribuant uniquement les permissions n\u00e9cessaires \u00e0 chaque r\u00f4le. \u00c9vitez de donner des permissions excessives qui pourraient compromettre la s\u00e9curit\u00e9. 4.3. Utilisation de la Hi\u00e9rarchie des R\u00f4les Utilisez des r\u00f4les hi\u00e9rarchiques pour simplifier la gestion des permissions. Les r\u00f4les parents peuvent regrouper des permissions communes, tandis que les r\u00f4les enfants h\u00e9ritent de ces permissions et ajoutent des permissions sp\u00e9cifiques. 4.4. S\u00e9paration des T\u00e2ches Impl\u00e9mentez des contraintes de s\u00e9paration des t\u00e2ches pour \u00e9viter les conflits d'int\u00e9r\u00eats. Par exemple, un utilisateur ne devrait pas avoir \u00e0 la fois des permissions de cr\u00e9ation et d'approbation de transactions financi\u00e8res. 4.5. Surveillance et Audit Mettez en place des m\u00e9canismes de surveillance et d'audit pour suivre les activit\u00e9s des utilisateurs et d\u00e9tecter les comportements suspects. Les journaux d'audit peuvent aider \u00e0 identifier les violations de s\u00e9curit\u00e9 et \u00e0 prendre des mesures correctives. 5. Exemple d'Impl\u00e9mentation du RBAC Supposons que vous avez une organisation avec les r\u00f4les suivants : Administrateur, D\u00e9veloppeur, et Analyste. Voici comment vous pourriez d\u00e9finir et attribuer des r\u00f4les et des permissions : D\u00e9finir les r\u00f4les : Administrateur : Permissions de gestion du syst\u00e8me, cr\u00e9ation et suppression d'utilisateurs, configuration du syst\u00e8me. D\u00e9veloppeur : Permissions de lecture et \u00e9criture dans le code source, d\u00e9ploiement d'applications. Analyste : Permissions de lecture des donn\u00e9es, g\u00e9n\u00e9ration de rapports. Attribuer les r\u00f4les aux utilisateurs : Alice : Administrateur Bob : D\u00e9veloppeur Carol : Analyste D\u00e9finir les permissions pour chaque r\u00f4le : - Administrateur : manage_system , create_user , delete_user , configure_system D\u00e9veloppeur : read_code , write_code , deploy_application Analyste : read_data , generate_report Conclusion Le Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC) est une m\u00e9thode puissante et flexible pour g\u00e9rer les permissions dans les syst\u00e8mes d'information. En d\u00e9finissant des r\u00f4les et en attribuant des permissions de mani\u00e8re coh\u00e9rente, les organisations peuvent am\u00e9liorer la s\u00e9curit\u00e9, simplifier la gestion des acc\u00e8s, et assurer la conformit\u00e9 avec les r\u00e9glementations. L'impl\u00e9mentation du RBAC n\u00e9cessite une analyse minutieuse des responsabilit\u00e9s des utilisateurs et l' application de meilleures pratiques pour garantir une gestion efficace et s\u00e9curis\u00e9e des acc\u00e8s. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC)"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#controle-dacces-base-sur-les-roles-rbac","text":"Le Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC) est une m\u00e9thode de gestion des autorisations qui permet de contr\u00f4ler l'acc\u00e8s aux ressources en fonction des r\u00f4les attribu\u00e9s aux utilisateurs au sein d'une organisation. Cette approche est largement utilis\u00e9e dans les syst\u00e8mes d'information pour g\u00e9rer les permissions de mani\u00e8re efficace et s\u00e9curis\u00e9e. Voici une vue d\u00e9taill\u00e9e du RBAC, ses concepts cl\u00e9s, ses avantages, et ses meilleures pratiques.","title":"Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC)"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#1-concepts-cles-du-rbac","text":"","title":"1. Concepts Cl\u00e9s du RBAC"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#11-roles","text":"Un r\u00f4le est une collection de permissions qui d\u00e9finissent ce qu'un utilisateur peut faire dans le syst\u00e8me. Les r\u00f4les sont g\u00e9n\u00e9ralement bas\u00e9s sur les responsabilit\u00e9s des utilisateurs au sein de l'organisation. Par exemple, les r\u00f4les peuvent inclure \"Administrateur\", \"D\u00e9veloppeur\", \"Analyste\", etc.","title":"1.1. R\u00f4les"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#12-utilisateurs","text":"Les utilisateurs sont les individus qui interagissent avec le syst\u00e8me. Chaque utilisateur se voit attribuer un ou plusieurs r\u00f4les, d\u00e9terminant ainsi ses permissions.","title":"1.2. Utilisateurs"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#13-permissions","text":"Les permissions sont des autorisations sp\u00e9cifiques qui permettent d'effectuer des actions sur des objets du syst\u00e8me. Par exemple, les permissions peuvent inclure \"lire un fichier\", \"\u00e9crire dans une base de donn\u00e9es\", \"modifier une configuration\", etc.","title":"1.3. Permissions"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#14-sessions","text":"Les sessions repr\u00e9sentent une instance de connexion d'un utilisateur au syst\u00e8me. Pendant une session, l'utilisateur peut exercer les permissions associ\u00e9es \u00e0 ses r\u00f4les.","title":"1.4. Sessions"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#2-modeles-de-rbac","text":"Il existe plusieurs mod\u00e8les de RBAC, chacun offrant diff\u00e9rents niveaux de contr\u00f4le et de flexibilit\u00e9 :","title":"2. Mod\u00e8les de RBAC"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#21-rbac-de-base-rbac0","text":"Le mod\u00e8le de base permet d'assigner des r\u00f4les aux utilisateurs et de d\u00e9finir des permissions pour chaque r\u00f4le. Les utilisateurs h\u00e9ritent des permissions de leurs r\u00f4les.","title":"2.1. RBAC de Base (RBAC0)"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#22-rbac-hierarchique-rbac1","text":"Le mod\u00e8le hi\u00e9rarchique introduit la notion de hi\u00e9rarchie des r\u00f4les, o\u00f9 les r\u00f4les peuvent h\u00e9riter des permissions d'autres r\u00f4les. Cela permet de cr\u00e9er des r\u00f4les parents et enfants, facilitant la gestion des permissions.","title":"2.2. RBAC Hi\u00e9rarchique (RBAC1)"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#23-rbac-contrainte-rbac2","text":"Le mod\u00e8le contraint ajoute des contraintes suppl\u00e9mentaires pour renforcer la s\u00e9curit\u00e9. Par exemple, des contraintes de s\u00e9paration des t\u00e2ches peuvent \u00eatre appliqu\u00e9es pour s'assurer qu'aucun utilisateur n'a des permissions conflictuelles.","title":"2.3. RBAC Contrainte (RBAC2)"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#24-rbac-symbiotique-rbac3","text":"Le mod\u00e8le symbiotique combine les fonctionnalit\u00e9s des mod\u00e8les hi\u00e9rarchique et contraint, offrant ainsi une flexibilit\u00e9 maximale et une s\u00e9curit\u00e9 renforc\u00e9e.","title":"2.4. RBAC Symbiotique (RBAC3)"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#3-avantages-du-rbac","text":"Simplicit\u00e9 : Simplifie la gestion des permissions en regroupant les autorisations communes dans des r\u00f4les. S\u00e9curit\u00e9 : R\u00e9duit les risques d'erreurs de configuration des permissions et renforce la s\u00e9curit\u00e9 en centralisant la gestion des acc\u00e8s. Scalabilit\u00e9 : Facilite la gestion des permissions dans des environnements avec de nombreux utilisateurs et r\u00f4les. Conformit\u00e9 : Aide \u00e0 respecter les r\u00e9glementations en mati\u00e8re de s\u00e9curit\u00e9 et de confidentialit\u00e9 en appliquant des politiques d'acc\u00e8s strictes.","title":"3. Avantages du RBAC"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#4-meilleures-pratiques-pour-limplementation-du-rbac","text":"","title":"4. Meilleures Pratiques pour l'Impl\u00e9mentation du RBAC"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#41-analyse-des-roles","text":"Commencez par analyser les responsabilit\u00e9s et les t\u00e2ches des utilisateurs au sein de l'organisation pour d\u00e9finir des r\u00f4les appropri\u00e9s. Assurez-vous que chaque r\u00f4le correspond \u00e0 un ensemble coh\u00e9rent de permissions.","title":"4.1. Analyse des R\u00f4les"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#42-minimisation-des-privileges","text":"Appliquez le principe du moindre privil\u00e8ge en attribuant uniquement les permissions n\u00e9cessaires \u00e0 chaque r\u00f4le. \u00c9vitez de donner des permissions excessives qui pourraient compromettre la s\u00e9curit\u00e9.","title":"4.2. Minimisation des Privil\u00e8ges"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#43-utilisation-de-la-hierarchie-des-roles","text":"Utilisez des r\u00f4les hi\u00e9rarchiques pour simplifier la gestion des permissions. Les r\u00f4les parents peuvent regrouper des permissions communes, tandis que les r\u00f4les enfants h\u00e9ritent de ces permissions et ajoutent des permissions sp\u00e9cifiques.","title":"4.3. Utilisation de la Hi\u00e9rarchie des R\u00f4les"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#44-separation-des-taches","text":"Impl\u00e9mentez des contraintes de s\u00e9paration des t\u00e2ches pour \u00e9viter les conflits d'int\u00e9r\u00eats. Par exemple, un utilisateur ne devrait pas avoir \u00e0 la fois des permissions de cr\u00e9ation et d'approbation de transactions financi\u00e8res.","title":"4.4. S\u00e9paration des T\u00e2ches"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#45-surveillance-et-audit","text":"Mettez en place des m\u00e9canismes de surveillance et d'audit pour suivre les activit\u00e9s des utilisateurs et d\u00e9tecter les comportements suspects. Les journaux d'audit peuvent aider \u00e0 identifier les violations de s\u00e9curit\u00e9 et \u00e0 prendre des mesures correctives.","title":"4.5. Surveillance et Audit"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#5-exemple-dimplementation-du-rbac","text":"Supposons que vous avez une organisation avec les r\u00f4les suivants : Administrateur, D\u00e9veloppeur, et Analyste. Voici comment vous pourriez d\u00e9finir et attribuer des r\u00f4les et des permissions : D\u00e9finir les r\u00f4les : Administrateur : Permissions de gestion du syst\u00e8me, cr\u00e9ation et suppression d'utilisateurs, configuration du syst\u00e8me. D\u00e9veloppeur : Permissions de lecture et \u00e9criture dans le code source, d\u00e9ploiement d'applications. Analyste : Permissions de lecture des donn\u00e9es, g\u00e9n\u00e9ration de rapports. Attribuer les r\u00f4les aux utilisateurs : Alice : Administrateur Bob : D\u00e9veloppeur Carol : Analyste D\u00e9finir les permissions pour chaque r\u00f4le : - Administrateur : manage_system , create_user , delete_user , configure_system D\u00e9veloppeur : read_code , write_code , deploy_application Analyste : read_data , generate_report","title":"5. Exemple d'Impl\u00e9mentation du RBAC"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/02-rbac/#conclusion","text":"Le Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC) est une m\u00e9thode puissante et flexible pour g\u00e9rer les permissions dans les syst\u00e8mes d'information. En d\u00e9finissant des r\u00f4les et en attribuant des permissions de mani\u00e8re coh\u00e9rente, les organisations peuvent am\u00e9liorer la s\u00e9curit\u00e9, simplifier la gestion des acc\u00e8s, et assurer la conformit\u00e9 avec les r\u00e9glementations. L'impl\u00e9mentation du RBAC n\u00e9cessite une analyse minutieuse des responsabilit\u00e9s des utilisateurs et l' application de meilleures pratiques pour garantir une gestion efficace et s\u00e9curis\u00e9e des acc\u00e8s. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Conclusion"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/","text":"Gestion des Utilisateurs dans PostgreSQL Dans PostgreSQL, les termes \"utilisateur\" et \"r\u00f4le\" sont souvent utilis\u00e9s de mani\u00e8re interchangeable, mais il existe des diff\u00e9rences subtiles. Un user est essentiellement un r\u00f4le avec la capacit\u00e9 de se connecter (l'option LOGIN ), tandis qu'un role sans cette capacit\u00e9 est par d\u00e9faut cr\u00e9\u00e9 avec l'option NOLOGIN . Cette distinction permet de cr\u00e9er des r\u00f4les qui servent uniquement \u00e0 regrouper des privil\u00e8ges sans permettre la connexion directe \u00e0 la base de donn\u00e9es. 1. Cr\u00e9ation et Gestion des Comptes Utilisateurs 1.1. Cr\u00e9ation d'un Utilisateur Pour cr\u00e9er un nouvel utilisateur dans PostgreSQL, vous utilisez la commande CREATE USER ou CREATE ROLE avec l'option LOGIN . Voici un exemple de cr\u00e9ation d'un utilisateur avec un mot de passe : CREATE USER nom_utilisateur WITH PASSWORD 'mot_de_passe'; Exemple : CREATE USER alice WITH PASSWORD 'password123'; 1.2. Modification d'un Utilisateur Pour modifier un utilisateur existant, vous pouvez utiliser la commande ALTER USER . Par exemple, pour changer le mot de passe d'un utilisateur : ALTER USER nom_utilisateur WITH PASSWORD 'nouveau_mot_de_passe'; Exemple : ALTER USER alice WITH PASSWORD 'newpassword456'; 1.3. Suppression d'un Utilisateur Pour supprimer un utilisateur, utilisez la commande DROP USER : DROP USER nom_utilisateur; Exemple : DROP USER alice; 2. Modification de Mot de Passe dans PostgreSQL \u00e0 partir du Terminal avec psql Modifier un mot de passe dans PostgreSQL peut se faire de diff\u00e9rentes mani\u00e8res selon si l'utilisateur souhaite changer son propre mot de passe ou si un administrateur souhaite changer le mot de passe d'un autre utilisateur. Voici comment proc\u00e9der dans les deux cas, en utilisant psql . 2.1. Un Utilisateur qui Veut Modifier son Propre Mot de Passe Pour qu'un utilisateur modifie son propre mot de passe sans l'\u00e9crire en clair dans une commande ALTER USER , il peut utiliser la commande \\password dans psql . Cette commande invite l'utilisateur \u00e0 entrer son nouveau mot de passe de mani\u00e8re s\u00e9curis\u00e9e. Voici les \u00e9tapes : Ouvrez le terminal et connectez-vous \u00e0 PostgreSQL en tant qu'utilisateur dont vous souhaitez modifier le mot de passe : sh psql -U nom_utilisateur -d nom_base_de_donnees Une fois connect\u00e9, ex\u00e9cutez la commande \\password : sql \\password PostgreSQL vous demandera d'entrer le nouveau mot de passe deux fois pour confirmation : Enter new password: Enter it again: Exemple complet : psql -U alice -d mydatabase \\password Enter new password: Enter it again: 2.2. Un Administrateur qui Veut Modifier le Mot de Passe d'un Autre Utilisateur Pour qu'un administrateur modifie le mot de passe d'un autre utilisateur sans l'\u00e9crire en clair dans une commande ALTER USER , il peut utiliser la commande \\password suivie du nom de l'utilisateur cible. Cela permet de modifier le mot de passe de l'utilisateur de mani\u00e8re s\u00e9curis\u00e9e. Voici les \u00e9tapes : Ouvrez le terminal et connectez-vous \u00e0 PostgreSQL en tant qu'administrateur ( ou un utilisateur ayant les privil\u00e8ges n\u00e9cessaires) : sh psql -U admin -d nom_base_de_donnees Une fois connect\u00e9, ex\u00e9cutez la commande \\password suivie du nom de l'utilisateur dont vous souhaitez modifier le mot de passe : sql \\password nom_utilisateur PostgreSQL vous demandera d'entrer le nouveau mot de passe deux fois pour confirmation : Enter new password: Enter it again: Exemple complet : psql -U admin -d mydatabase \\password alice Enter new password: Enter it again: 3. Options de CREATE ROLE et CREATE USER PostgreSQL offre plusieurs options lors de la cr\u00e9ation d'utilisateurs et de r\u00f4les pour sp\u00e9cifier leurs capacit\u00e9s et restrictions. Voici quelques-unes des options les plus courantes : 3.1. Options de CREATE ROLE LOGIN/NOLOGIN : Sp\u00e9cifie si le r\u00f4le peut se connecter \u00e0 la base de donn\u00e9es. SUPERUSER/NOSUPERUSER : Sp\u00e9cifie si le r\u00f4le a des privil\u00e8ges superutilisateur. CREATEDB/NOCREATEDB : Sp\u00e9cifie si le r\u00f4le peut cr\u00e9er des bases de donn\u00e9es. CREATEROLE/NOCREATEROLE : Sp\u00e9cifie si le r\u00f4le peut cr\u00e9er d'autres r\u00f4les. INHERIT/NOINHERIT : Sp\u00e9cifie si le r\u00f4le h\u00e9rite des privil\u00e8ges des r\u00f4les auxquels il appartient. REPLICATION/NOREPLICATION : Sp\u00e9cifie si le r\u00f4le peut initier des connexions de r\u00e9plication. CONNECTION LIMIT : Limite le nombre de connexions simultan\u00e9es pour le r\u00f4le. Exemple : CREATE ROLE dev_team NOLOGIN; CREATE ROLE admin WITH LOGIN SUPERUSER CREATEDB CREATEROLE; 3.2. Options de CREATE USER Les options pour CREATE USER sont similaires \u00e0 celles de CREATE ROLE , avec l'option LOGIN \u00e9tant implicite : PASSWORD : D\u00e9finit le mot de passe pour l'utilisateur. VALID UNTIL : D\u00e9finit une date d'expiration pour le mot de passe. CONNECTION LIMIT : Limite le nombre de connexions simultan\u00e9es pour l'utilisateur. Exemple : CREATE USER alice WITH PASSWORD 'password123' VALID UNTIL '2024-12-31' CONNECTION LIMIT 5; 4. Privil\u00e8ges 4.1. Privil\u00e8ges de Base Voici quelques privil\u00e8ges de base que vous pouvez attribuer aux utilisateurs ou aux r\u00f4les : SELECT : Permet de lire les donn\u00e9es d'une table. INSERT : Permet d'ajouter des donn\u00e9es dans une table. UPDATE : Permet de modifier les donn\u00e9es d'une table. DELETE : Permet de supprimer des donn\u00e9es d'une table. CREATE : Permet de cr\u00e9er de nouvelles tables ou bases de donn\u00e9es. DROP : Permet de supprimer des tables ou bases de donn\u00e9es. 4.2. Attribution de Privil\u00e8ges Pour attribuer des privil\u00e8ges \u00e0 un utilisateur ou un r\u00f4le, utilisez la commande GRANT . Par exemple, pour donner des privil\u00e8ges de lecture et d'\u00e9criture sur une table : GRANT SELECT, INSERT, UPDATE, DELETE ON table_name TO nom_utilisateur; Exemple : GRANT SELECT, INSERT, UPDATE, DELETE ON employees TO alice; 5. Contr\u00f4le d'Acc\u00e8s 5.1. Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les PostgreSQL utilise le mod\u00e8le de Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC). Les r\u00f4les peuvent \u00eatre utilis\u00e9s pour simplifier la gestion des privil\u00e8ges. Par exemple, vous pouvez cr\u00e9er un r\u00f4le pour les d\u00e9veloppeurs et attribuer ce r\u00f4le \u00e0 tous les utilisateurs qui sont des d\u00e9veloppeurs. 5.2. Exemple de Contr\u00f4le d'Acc\u00e8s Supposons que vous avez une base de donn\u00e9es avec plusieurs tables et que vous souhaitez g\u00e9rer les acc\u00e8s de mani\u00e8re structur\u00e9e : Cr\u00e9er un r\u00f4le pour les d\u00e9veloppeurs : sql CREATE ROLE dev_team; Attribuer des privil\u00e8ges au r\u00f4le : sql GRANT SELECT, INSERT, UPDATE, DELETE ON employees TO dev_team; Attribuer le r\u00f4le aux utilisateurs : sql GRANT dev_team TO alice; GRANT dev_team TO bob; PostgreSQL et le RBAC PostgreSQL utilise le RBAC pour g\u00e9rer les permissions et les acc\u00e8s des utilisateurs. PostgreSQL impl\u00e9mente principalement le mod\u00e8le de RBAC de Base (RBAC0) , mais il supporte \u00e9galement certaines fonctionnalit\u00e9s avanc\u00e9es qui permettent de cr\u00e9er des hi\u00e9rarchies de r\u00f4les, ce qui le rapproche du RBAC Hi\u00e9rarchique (RBAC1) . Mod\u00e8le de RBAC dans PostgreSQL 1. RBAC de Base (RBAC0) Dans PostgreSQL, le RBAC de base permet d'assigner des r\u00f4les aux utilisateurs et de d\u00e9finir des permissions pour chaque r\u00f4le. Les utilisateurs h\u00e9ritent des permissions de leurs r\u00f4les. Voici comment cela fonctionne : R\u00f4les et Utilisateurs : PostgreSQL traite les r\u00f4les et les utilisateurs de mani\u00e8re interchangeable. Un utilisateur est simplement un r\u00f4le avec la capacit\u00e9 de se connecter ( LOGIN ). Permissions : Les permissions sont attribu\u00e9es aux r\u00f4les et peuvent inclure des actions comme SELECT , INSERT , UPDATE , DELETE , CREATE , et DROP . 2. RBAC Hi\u00e9rarchique (RBAC1) PostgreSQL supporte \u00e9galement des fonctionnalit\u00e9s de hi\u00e9rarchie des r\u00f4les, permettant \u00e0 un r\u00f4le d'h\u00e9riter des permissions d'un autre r\u00f4le. Cela facilite la gestion des permissions en cr\u00e9ant des r\u00f4les parents et enfants. H\u00e9ritage des R\u00f4les : Les r\u00f4les peuvent \u00eatre configur\u00e9s pour h\u00e9riter des permissions d'autres r\u00f4les en utilisant l'option INHERIT . Par d\u00e9faut, les r\u00f4les sont cr\u00e9\u00e9s avec l'option INHERIT . Exemples d'Utilisation du RBAC dans PostgreSQL Cr\u00e9ation de R\u00f4les et Attribution de Permissions Cr\u00e9er des r\u00f4les : sql CREATE ROLE dev_team; CREATE ROLE qa_team; CREATE ROLE admin_team WITH LOGIN SUPERUSER; Attribuer des privil\u00e8ges aux r\u00f4les : sql GRANT SELECT, INSERT, UPDATE, DELETE ON employees TO dev_team; GRANT SELECT ON employees TO qa_team; Cr\u00e9er des utilisateurs et attribuer des r\u00f4les : sql CREATE USER alice WITH PASSWORD 'password123'; CREATE USER bob WITH PASSWORD 'password456'; GRANT dev_team TO alice; GRANT qa_team TO bob; H\u00e9ritage des Permissions Cr\u00e9er un r\u00f4le parent et un r\u00f4le enfant : sql CREATE ROLE senior_dev INHERIT; GRANT dev_team TO senior_dev; Attribuer le r\u00f4le enfant \u00e0 un utilisateur : sql CREATE USER charlie WITH PASSWORD 'password789'; GRANT senior_dev TO charlie; Dans cet exemple, charlie h\u00e9rite des permissions du r\u00f4le dev_team via le r\u00f4le senior_dev . Conclusion La gestion des utilisateurs dans PostgreSQL est flexible et puissante gr\u00e2ce \u00e0 l'utilisation des r\u00f4les et des privil\u00e8ges. En suivant les bonnes pratiques de gestion des utilisateurs et des privil\u00e8ges, vous pouvez assurer une s\u00e9curit\u00e9 robuste et une administration efficace de votre base de donn\u00e9es. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Gestion des Utilisateurs dans PostgreSQL"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#gestion-des-utilisateurs-dans-postgresql","text":"Dans PostgreSQL, les termes \"utilisateur\" et \"r\u00f4le\" sont souvent utilis\u00e9s de mani\u00e8re interchangeable, mais il existe des diff\u00e9rences subtiles. Un user est essentiellement un r\u00f4le avec la capacit\u00e9 de se connecter (l'option LOGIN ), tandis qu'un role sans cette capacit\u00e9 est par d\u00e9faut cr\u00e9\u00e9 avec l'option NOLOGIN . Cette distinction permet de cr\u00e9er des r\u00f4les qui servent uniquement \u00e0 regrouper des privil\u00e8ges sans permettre la connexion directe \u00e0 la base de donn\u00e9es.","title":"Gestion des Utilisateurs dans PostgreSQL"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#1-creation-et-gestion-des-comptes-utilisateurs","text":"","title":"1. Cr\u00e9ation et Gestion des Comptes Utilisateurs"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#11-creation-dun-utilisateur","text":"Pour cr\u00e9er un nouvel utilisateur dans PostgreSQL, vous utilisez la commande CREATE USER ou CREATE ROLE avec l'option LOGIN . Voici un exemple de cr\u00e9ation d'un utilisateur avec un mot de passe : CREATE USER nom_utilisateur WITH PASSWORD 'mot_de_passe'; Exemple : CREATE USER alice WITH PASSWORD 'password123';","title":"1.1. Cr\u00e9ation d'un Utilisateur"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#12-modification-dun-utilisateur","text":"Pour modifier un utilisateur existant, vous pouvez utiliser la commande ALTER USER . Par exemple, pour changer le mot de passe d'un utilisateur : ALTER USER nom_utilisateur WITH PASSWORD 'nouveau_mot_de_passe'; Exemple : ALTER USER alice WITH PASSWORD 'newpassword456';","title":"1.2. Modification d'un Utilisateur"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#13-suppression-dun-utilisateur","text":"Pour supprimer un utilisateur, utilisez la commande DROP USER : DROP USER nom_utilisateur; Exemple : DROP USER alice;","title":"1.3. Suppression d'un Utilisateur"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#2-modification-de-mot-de-passe-dans-postgresql-a-partir-du-terminal-avec-psql","text":"Modifier un mot de passe dans PostgreSQL peut se faire de diff\u00e9rentes mani\u00e8res selon si l'utilisateur souhaite changer son propre mot de passe ou si un administrateur souhaite changer le mot de passe d'un autre utilisateur. Voici comment proc\u00e9der dans les deux cas, en utilisant psql .","title":"2. Modification de Mot de Passe dans PostgreSQL \u00e0 partir du Terminal avec psql"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#21-un-utilisateur-qui-veut-modifier-son-propre-mot-de-passe","text":"Pour qu'un utilisateur modifie son propre mot de passe sans l'\u00e9crire en clair dans une commande ALTER USER , il peut utiliser la commande \\password dans psql . Cette commande invite l'utilisateur \u00e0 entrer son nouveau mot de passe de mani\u00e8re s\u00e9curis\u00e9e. Voici les \u00e9tapes : Ouvrez le terminal et connectez-vous \u00e0 PostgreSQL en tant qu'utilisateur dont vous souhaitez modifier le mot de passe : sh psql -U nom_utilisateur -d nom_base_de_donnees Une fois connect\u00e9, ex\u00e9cutez la commande \\password : sql \\password PostgreSQL vous demandera d'entrer le nouveau mot de passe deux fois pour confirmation : Enter new password: Enter it again: Exemple complet : psql -U alice -d mydatabase \\password Enter new password: Enter it again:","title":"2.1. Un Utilisateur qui Veut Modifier son Propre Mot de Passe"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#22-un-administrateur-qui-veut-modifier-le-mot-de-passe-dun-autre-utilisateur","text":"Pour qu'un administrateur modifie le mot de passe d'un autre utilisateur sans l'\u00e9crire en clair dans une commande ALTER USER , il peut utiliser la commande \\password suivie du nom de l'utilisateur cible. Cela permet de modifier le mot de passe de l'utilisateur de mani\u00e8re s\u00e9curis\u00e9e. Voici les \u00e9tapes : Ouvrez le terminal et connectez-vous \u00e0 PostgreSQL en tant qu'administrateur ( ou un utilisateur ayant les privil\u00e8ges n\u00e9cessaires) : sh psql -U admin -d nom_base_de_donnees Une fois connect\u00e9, ex\u00e9cutez la commande \\password suivie du nom de l'utilisateur dont vous souhaitez modifier le mot de passe : sql \\password nom_utilisateur PostgreSQL vous demandera d'entrer le nouveau mot de passe deux fois pour confirmation : Enter new password: Enter it again: Exemple complet : psql -U admin -d mydatabase \\password alice Enter new password: Enter it again:","title":"2.2. Un Administrateur qui Veut Modifier le Mot de Passe d'un Autre Utilisateur"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#3-options-de-create-role-et-create-user","text":"PostgreSQL offre plusieurs options lors de la cr\u00e9ation d'utilisateurs et de r\u00f4les pour sp\u00e9cifier leurs capacit\u00e9s et restrictions. Voici quelques-unes des options les plus courantes :","title":"3. Options de CREATE ROLE et CREATE USER"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#31-options-de-create-role","text":"LOGIN/NOLOGIN : Sp\u00e9cifie si le r\u00f4le peut se connecter \u00e0 la base de donn\u00e9es. SUPERUSER/NOSUPERUSER : Sp\u00e9cifie si le r\u00f4le a des privil\u00e8ges superutilisateur. CREATEDB/NOCREATEDB : Sp\u00e9cifie si le r\u00f4le peut cr\u00e9er des bases de donn\u00e9es. CREATEROLE/NOCREATEROLE : Sp\u00e9cifie si le r\u00f4le peut cr\u00e9er d'autres r\u00f4les. INHERIT/NOINHERIT : Sp\u00e9cifie si le r\u00f4le h\u00e9rite des privil\u00e8ges des r\u00f4les auxquels il appartient. REPLICATION/NOREPLICATION : Sp\u00e9cifie si le r\u00f4le peut initier des connexions de r\u00e9plication. CONNECTION LIMIT : Limite le nombre de connexions simultan\u00e9es pour le r\u00f4le. Exemple : CREATE ROLE dev_team NOLOGIN; CREATE ROLE admin WITH LOGIN SUPERUSER CREATEDB CREATEROLE;","title":"3.1. Options de CREATE ROLE"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#32-options-de-create-user","text":"Les options pour CREATE USER sont similaires \u00e0 celles de CREATE ROLE , avec l'option LOGIN \u00e9tant implicite : PASSWORD : D\u00e9finit le mot de passe pour l'utilisateur. VALID UNTIL : D\u00e9finit une date d'expiration pour le mot de passe. CONNECTION LIMIT : Limite le nombre de connexions simultan\u00e9es pour l'utilisateur. Exemple : CREATE USER alice WITH PASSWORD 'password123' VALID UNTIL '2024-12-31' CONNECTION LIMIT 5;","title":"3.2. Options de CREATE USER"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#4-privileges","text":"","title":"4. Privil\u00e8ges"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#41-privileges-de-base","text":"Voici quelques privil\u00e8ges de base que vous pouvez attribuer aux utilisateurs ou aux r\u00f4les : SELECT : Permet de lire les donn\u00e9es d'une table. INSERT : Permet d'ajouter des donn\u00e9es dans une table. UPDATE : Permet de modifier les donn\u00e9es d'une table. DELETE : Permet de supprimer des donn\u00e9es d'une table. CREATE : Permet de cr\u00e9er de nouvelles tables ou bases de donn\u00e9es. DROP : Permet de supprimer des tables ou bases de donn\u00e9es.","title":"4.1. Privil\u00e8ges de Base"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#42-attribution-de-privileges","text":"Pour attribuer des privil\u00e8ges \u00e0 un utilisateur ou un r\u00f4le, utilisez la commande GRANT . Par exemple, pour donner des privil\u00e8ges de lecture et d'\u00e9criture sur une table : GRANT SELECT, INSERT, UPDATE, DELETE ON table_name TO nom_utilisateur; Exemple : GRANT SELECT, INSERT, UPDATE, DELETE ON employees TO alice;","title":"4.2. Attribution de Privil\u00e8ges"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#5-controle-dacces","text":"","title":"5. Contr\u00f4le d'Acc\u00e8s"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#51-controle-dacces-base-sur-les-roles","text":"PostgreSQL utilise le mod\u00e8le de Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC). Les r\u00f4les peuvent \u00eatre utilis\u00e9s pour simplifier la gestion des privil\u00e8ges. Par exemple, vous pouvez cr\u00e9er un r\u00f4le pour les d\u00e9veloppeurs et attribuer ce r\u00f4le \u00e0 tous les utilisateurs qui sont des d\u00e9veloppeurs.","title":"5.1. Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#52-exemple-de-controle-dacces","text":"Supposons que vous avez une base de donn\u00e9es avec plusieurs tables et que vous souhaitez g\u00e9rer les acc\u00e8s de mani\u00e8re structur\u00e9e : Cr\u00e9er un r\u00f4le pour les d\u00e9veloppeurs : sql CREATE ROLE dev_team; Attribuer des privil\u00e8ges au r\u00f4le : sql GRANT SELECT, INSERT, UPDATE, DELETE ON employees TO dev_team; Attribuer le r\u00f4le aux utilisateurs : sql GRANT dev_team TO alice; GRANT dev_team TO bob;","title":"5.2. Exemple de Contr\u00f4le d'Acc\u00e8s"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#postgresql-et-le-rbac","text":"PostgreSQL utilise le RBAC pour g\u00e9rer les permissions et les acc\u00e8s des utilisateurs. PostgreSQL impl\u00e9mente principalement le mod\u00e8le de RBAC de Base (RBAC0) , mais il supporte \u00e9galement certaines fonctionnalit\u00e9s avanc\u00e9es qui permettent de cr\u00e9er des hi\u00e9rarchies de r\u00f4les, ce qui le rapproche du RBAC Hi\u00e9rarchique (RBAC1) .","title":"PostgreSQL et le RBAC"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#modele-de-rbac-dans-postgresql","text":"","title":"Mod\u00e8le de RBAC dans PostgreSQL"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#1-rbac-de-base-rbac0","text":"Dans PostgreSQL, le RBAC de base permet d'assigner des r\u00f4les aux utilisateurs et de d\u00e9finir des permissions pour chaque r\u00f4le. Les utilisateurs h\u00e9ritent des permissions de leurs r\u00f4les. Voici comment cela fonctionne : R\u00f4les et Utilisateurs : PostgreSQL traite les r\u00f4les et les utilisateurs de mani\u00e8re interchangeable. Un utilisateur est simplement un r\u00f4le avec la capacit\u00e9 de se connecter ( LOGIN ). Permissions : Les permissions sont attribu\u00e9es aux r\u00f4les et peuvent inclure des actions comme SELECT , INSERT , UPDATE , DELETE , CREATE , et DROP .","title":"1. RBAC de Base (RBAC0)"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#2-rbac-hierarchique-rbac1","text":"PostgreSQL supporte \u00e9galement des fonctionnalit\u00e9s de hi\u00e9rarchie des r\u00f4les, permettant \u00e0 un r\u00f4le d'h\u00e9riter des permissions d'un autre r\u00f4le. Cela facilite la gestion des permissions en cr\u00e9ant des r\u00f4les parents et enfants. H\u00e9ritage des R\u00f4les : Les r\u00f4les peuvent \u00eatre configur\u00e9s pour h\u00e9riter des permissions d'autres r\u00f4les en utilisant l'option INHERIT . Par d\u00e9faut, les r\u00f4les sont cr\u00e9\u00e9s avec l'option INHERIT .","title":"2. RBAC Hi\u00e9rarchique (RBAC1)"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#exemples-dutilisation-du-rbac-dans-postgresql","text":"","title":"Exemples d'Utilisation du RBAC dans PostgreSQL"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#creation-de-roles-et-attribution-de-permissions","text":"Cr\u00e9er des r\u00f4les : sql CREATE ROLE dev_team; CREATE ROLE qa_team; CREATE ROLE admin_team WITH LOGIN SUPERUSER; Attribuer des privil\u00e8ges aux r\u00f4les : sql GRANT SELECT, INSERT, UPDATE, DELETE ON employees TO dev_team; GRANT SELECT ON employees TO qa_team; Cr\u00e9er des utilisateurs et attribuer des r\u00f4les : sql CREATE USER alice WITH PASSWORD 'password123'; CREATE USER bob WITH PASSWORD 'password456'; GRANT dev_team TO alice; GRANT qa_team TO bob;","title":"Cr\u00e9ation de R\u00f4les et Attribution de Permissions"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#heritage-des-permissions","text":"Cr\u00e9er un r\u00f4le parent et un r\u00f4le enfant : sql CREATE ROLE senior_dev INHERIT; GRANT dev_team TO senior_dev; Attribuer le r\u00f4le enfant \u00e0 un utilisateur : sql CREATE USER charlie WITH PASSWORD 'password789'; GRANT senior_dev TO charlie; Dans cet exemple, charlie h\u00e9rite des permissions du r\u00f4le dev_team via le r\u00f4le senior_dev .","title":"H\u00e9ritage des Permissions"},{"location":"6.%20S%C3%A9curit%C3%A9%20et%20Utilisateurs/03-utilisateurs/#conclusion","text":"La gestion des utilisateurs dans PostgreSQL est flexible et puissante gr\u00e2ce \u00e0 l'utilisation des r\u00f4les et des privil\u00e8ges. En suivant les bonnes pratiques de gestion des utilisateurs et des privil\u00e8ges, vous pouvez assurer une s\u00e9curit\u00e9 robuste et une administration efficace de votre base de donn\u00e9es. Note : Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec les _LLM GPT-4 Omni et Claude 3 Opus . L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur._","title":"Conclusion"},{"location":"7.%20Exercices/01-exercices/","text":"Exercices SQL Pagila Recettes Northwind.md Explication des niveaux de difficult\u00e9 : Requ\u00eates simples impliquant une seule table, des op\u00e9rations de base comme SELECT, WHERE, ORDER BY. Requ\u00eates impliquant des jointures simples, des agr\u00e9gations de base, ou des sous-requ\u00eates simples. Requ\u00eates avec des jointures multiples, des agr\u00e9gations plus complexes, des fonctions de fen\u00eatrage simples, ou des sous-requ\u00eates corr\u00e9l\u00e9es. Requ\u00eates complexes impliquant des CTEs, des fonctions de fen\u00eatrage avanc\u00e9es, des calculs complexes, ou une logique m\u00e9tier sophistiqu\u00e9e. Requ\u00eates tr\u00e8s complexes combinant plusieurs techniques avanc\u00e9es, n\u00e9cessitant une compr\u00e9hension approfondie des concepts SQL et une r\u00e9flexion algorithmique. Cette \u00e9valuation est subjective et peut varier selon l'exp\u00e9rience individuelle et la familiarit\u00e9 avec certains concepts SQL. Mod\u00e9lisation exercises_ER.md","title":"Exercices"},{"location":"7.%20Exercices/01-exercices/#exercices","text":"","title":"Exercices"},{"location":"7.%20Exercices/01-exercices/#sql","text":"Pagila Recettes Northwind.md","title":"SQL"},{"location":"7.%20Exercices/01-exercices/#explication-des-niveaux-de-difficulte","text":"Requ\u00eates simples impliquant une seule table, des op\u00e9rations de base comme SELECT, WHERE, ORDER BY. Requ\u00eates impliquant des jointures simples, des agr\u00e9gations de base, ou des sous-requ\u00eates simples. Requ\u00eates avec des jointures multiples, des agr\u00e9gations plus complexes, des fonctions de fen\u00eatrage simples, ou des sous-requ\u00eates corr\u00e9l\u00e9es. Requ\u00eates complexes impliquant des CTEs, des fonctions de fen\u00eatrage avanc\u00e9es, des calculs complexes, ou une logique m\u00e9tier sophistiqu\u00e9e. Requ\u00eates tr\u00e8s complexes combinant plusieurs techniques avanc\u00e9es, n\u00e9cessitant une compr\u00e9hension approfondie des concepts SQL et une r\u00e9flexion algorithmique. Cette \u00e9valuation est subjective et peut varier selon l'exp\u00e9rience individuelle et la familiarit\u00e9 avec certains concepts SQL.","title":"Explication des niveaux de difficult\u00e9 :"},{"location":"7.%20Exercices/01-exercices/#modelisation","text":"exercises_ER.md","title":"Mod\u00e9lisation"},{"location":"7.%20Exercices/DEA/exercises_ER/","text":"Exercises - Entity-Relationship Modeling Exercise #1: Blog Create an ER diagram for the database of a Blog application, based on the information given below. Part 1 A blog post should be written by a user. A blog post should have an ID, a title, contents, and a posted date. A user should have a nick name (unique among all the users) and an email address. Blog posts should be organized into topics. There can be many topics per blog post. A topic should have an ID, a name, and a description. Part 2 Add the following to the ER diagram you got in the previous part. Users can leave comments on blog posts, and reply to other comments. A comment must be posted by a user (no anonymous comments allowed), and must be associated to a blog post or another comment (the parent comment). A comment must have an ID, contents (the comment's text), and a date. Exercise #2: Books Create an ER diagram for a Books database, based on the information given below. Part 1 A book has a title, a publication date and an ISBN number, and is written by one or more authors. An author as a name, a phone number, and an email address. A book can be self-published, or published by a publisher. A publisher has a name, a phone number, an email address and a mailing address. Part 2 Add the following to the ER diagram you got in the previous part. A book can have many chapters. Each chapter has a number and a title. Tags can be applied to books, such as fiction or non-fiction , computer science , statistics , language , ... Part 3 Add the following to the ER diagram you got in the previous part. A bookstore wants to sell books to customers. The books should have a retail price, and a sale price. Customers should have a name and an email address. A customer can order many books in the same order. The order should record the price of each book ordered, in case the book prices change over time. Each order should have the total price (before tax and shipping), the shipping cost, and the grand total with shipping and taxes.","title":"Exercises - Entity-Relationship Modeling"},{"location":"7.%20Exercices/DEA/exercises_ER/#exercises-entity-relationship-modeling","text":"","title":"Exercises - Entity-Relationship Modeling"},{"location":"7.%20Exercices/DEA/exercises_ER/#exercise-1-blog","text":"Create an ER diagram for the database of a Blog application, based on the information given below.","title":"Exercise #1: Blog"},{"location":"7.%20Exercices/DEA/exercises_ER/#part-1","text":"A blog post should be written by a user. A blog post should have an ID, a title, contents, and a posted date. A user should have a nick name (unique among all the users) and an email address. Blog posts should be organized into topics. There can be many topics per blog post. A topic should have an ID, a name, and a description.","title":"Part 1"},{"location":"7.%20Exercices/DEA/exercises_ER/#part-2","text":"Add the following to the ER diagram you got in the previous part. Users can leave comments on blog posts, and reply to other comments. A comment must be posted by a user (no anonymous comments allowed), and must be associated to a blog post or another comment (the parent comment). A comment must have an ID, contents (the comment's text), and a date.","title":"Part 2"},{"location":"7.%20Exercices/DEA/exercises_ER/#exercise-2-books","text":"Create an ER diagram for a Books database, based on the information given below.","title":"Exercise #2: Books"},{"location":"7.%20Exercices/DEA/exercises_ER/#part-1_1","text":"A book has a title, a publication date and an ISBN number, and is written by one or more authors. An author as a name, a phone number, and an email address. A book can be self-published, or published by a publisher. A publisher has a name, a phone number, an email address and a mailing address.","title":"Part 1"},{"location":"7.%20Exercices/DEA/exercises_ER/#part-2_1","text":"Add the following to the ER diagram you got in the previous part. A book can have many chapters. Each chapter has a number and a title. Tags can be applied to books, such as fiction or non-fiction , computer science , statistics , language , ...","title":"Part 2"},{"location":"7.%20Exercices/DEA/exercises_ER/#part-3","text":"Add the following to the ER diagram you got in the previous part. A bookstore wants to sell books to customers. The books should have a retail price, and a sale price. Customers should have a name and an email address. A customer can order many books in the same order. The order should record the price of each book ordered, in case the book prices change over time. Each order should have the total price (before tax and shipping), the shipping cost, and the grand total with shipping and taxes.","title":"Part 3"},{"location":"7.%20Exercices/SQL/01-pagila/","text":"Base de donn\u00e9es Pagila Cr\u00e9ation pagila_create.sql DEA Code @startuml 'top to bottom direction 'skinparam linetype polyline !define TABLE(name,desc) class name as \"desc\" << (T,#FFAAAA) >> !define PK(x) <u>x</u> !define FK(x) <i>x</i> hide empty methods hide empty fields TABLE(actor, \"actor\") { first_name: text last_name: text last_update: timestamp with time zone actor_id: integer } TABLE(address, \"address\") { address: text address2: text district: text city_id: smallint postal_code: text phone: text last_update: timestamp with time zone address_id: integer } TABLE(category, \"category\") { name: text last_update: timestamp with time zone category_id: integer } TABLE(city, \"city\") { city: text country_id: smallint last_update: timestamp with time zone city_id: integer } TABLE(country, \"country\") { country: text last_update: timestamp with time zone country_id: integer } TABLE(customer, \"customer\") { store_id: smallint first_name: text last_name: text email: text address_id: smallint activebool: boolean create_date: date last_update: timestamp with time zone active: integer customer_id: integer } TABLE(film, \"film\") { title: text description: text release_year: pagila.year language_id: smallint original_language_id: smallint rental_duration: smallint rental_rate: numeric(4,2) length: smallint replacement_cost: numeric(5,2) rating: pagila.mpaa_rating last_update: timestamp with time zone special_features: text[] fulltext: tsvector film_id: integer } TABLE(film_actor, \"film_actor\") { last_update: timestamp with time zone actor_id: smallint film_id: smallint } TABLE(film_category, \"film_category\") { last_update: timestamp with time zone film_id: smallint category_id: smallint } TABLE(inventory, \"inventory\") { film_id: smallint store_id: smallint last_update: timestamp with time zone inventory_id: integer } TABLE(language, \"language\") { name: char(20) last_update: timestamp with time zone language_id: integer } TABLE(payment, \"payment\") { payment_id: integer customer_id: smallint staff_id: smallint rental_id: integer amount: numeric(5,2) payment_date: timestamp with time zone } TABLE(rental, \"rental\") { rental_date: timestamp with time zone inventory_id: integer customer_id: smallint return_date: timestamp with time zone staff_id: smallint last_update: timestamp with time zone rental_id: integer } TABLE(staff, \"staff\") { first_name: text last_name: text address_id: smallint email: text store_id: smallint active: boolean username: text password: text last_update: timestamp with time zone picture: bytea staff_id: integer } TABLE(store, \"store\") { manager_staff_id: smallint address_id: smallint last_update: timestamp with time zone store_id: integer } address -[#595959,plain]-^ city : \"city_id\" city -[#595959,plain]-^ country : \"country_id\" customer -[#595959,plain]-^ address : \"address_id\" customer -[#595959,plain]-^ store : \"store_id\" film -[#595959,plain]-^ language : \"language_id\" film -[#595959,plain]-^ language : \"original_language_id:language_id\" film_actor -[#595959,plain]-^ actor : \"actor_id\" film_actor -[#595959,plain]-^ film : \"film_id\" film_category -[#595959,plain]-^ category : \"category_id\" film_category -[#595959,plain]-^ film : \"film_id\" inventory -[#595959,plain]-^ film : \"film_id\" inventory -[#595959,plain]-^ store : \"store_id\" payment -[#595959,plain]-^ customer : \"customer_id\" payment -[#595959,plain]-^ rental : \"rental_id\" payment -[#595959,plain]-^ staff : \"staff_id\" rental -[#595959,plain]-^ customer : \"customer_id\" rental -[#595959,plain]-^ inventory : \"inventory_id\" rental -[#595959,plain]-^ staff : \"staff_id\" staff -[#595959,plain]-^ address : \"address_id\" staff -[#595959,plain]-^ store : \"store_id\" store -[#595959,plain]-^ address : \"address_id\" @enduml Requ\u00eates 1. Trouver des films d'au moins 2 heures Difficult\u00e9 : 1 Code SELECT title, length FROM film WHERE length >= 120 ORDER BY length DESC; 2. Trouver l'identifiant et la description du film 'ACADEMY DINOSAUR' Difficult\u00e9 : 1 Code SELECT film_id, description FROM film WHERE title = 'ACADEMY DINOSAUR'; 3. Trouver les cat\u00e9gories de 'ACADEMY DINOSAUR' Difficult\u00e9 : 2 Code SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'ACADEMY DINOSAUR'; 4. Trouver les films sans cat\u00e9gories Difficult\u00e9 : 2 Code SELECT f.title FROM film f LEFT JOIN film_category fc ON f.film_id = fc.film_id WHERE fc.category_id IS NULL; 5. Trouver les cat\u00e9gories sans films Meilleure r\u00e9ponse : Difficult\u00e9 : 2 Code SELECT c.name FROM category c LEFT JOIN film_category fc ON c.category_id = fc.category_id WHERE fc.film_id IS NULL; Autres r\u00e9ponses : Code select c.category_id, c.name from category c left join film_category fc on c.category_id = fc.category_id group by c.category_id, c.name having count(fc.film_id) = 0; Code select category_id, name from category where category_id not in (select category_id from film_category); Code select category_id, name from category c where not exists(select fc.category_id from film_category fc where fc.category_id = c.category_id); Code select category_id, name from category c except select c.category_id, c.name from category c inner join film_category fc on fc.category_id = c.category_id; Code select c.category_id, name from category c inner join (select category_id from category c except select fc.category_id from film_category fc) as T on c.category_id = T.category_id; Code with T as (select category_id from category c except select fc.category_id from film_category fc) select c.category_id, name from category c inner join T on c.category_id = T.category_id; 6. Trouver les films d'action Difficult\u00e9 : 2 Code SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Action'; 7. Trouver le nombre de films dans la cat\u00e9gorie 'Action' Difficult\u00e9 : 2 Code SELECT COUNT(*) AS action_film_count FROM film_category fc JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Action'; 8. Nombre de films dans chaque cat\u00e9gorie Difficult\u00e9 : 3 Code SELECT c.name, COUNT(fc.film_id) AS film_count FROM category c LEFT JOIN film_category fc ON c.category_id = fc.category_id GROUP BY c.category_id, c.name ORDER BY film_count DESC; 9. Trouver le nombre de cat\u00e9gories pour chaque film Difficult\u00e9 : 3 Code SELECT f.title, COUNT(fc.category_id) AS category_count FROM film f LEFT JOIN film_category fc ON f.film_id = fc.film_id GROUP BY f.film_id, f.title ORDER BY category_count DESC; 10. Trouver le nombre de films Difficult\u00e9 : 1 Code SELECT COUNT(*) AS total_films FROM film; 11. Trouver le nombre de langues diff\u00e9rentes dans la table des langues Difficult\u00e9 : 1 Code SELECT COUNT(*) AS language_count FROM language; 12. Trouver le nombre de langues diff\u00e9rentes dans la table des films Difficult\u00e9 : 1 Code SELECT COUNT(DISTINCT language_id) AS film_language_count FROM film; 13. Cat\u00e9gorie avec le plus grand nombre de films Difficult\u00e9 : 3 Code SELECT c.name, COUNT(f.film_id) AS film_count FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id GROUP BY c.category_id, c.name ORDER BY film_count DESC LIMIT 1; Difficult\u00e9 : 4 Code WITH category_counts AS (SELECT c.category_id, c.name, COUNT(f.film_id) AS film_count FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id GROUP BY c.category_id, c.name), max_count AS (SELECT MAX(film_count) AS max_film_count FROM category_counts) SELECT cc.name AS category, cc.film_count FROM category_counts cc, max_count mc WHERE cc.film_count = mc.max_film_count ORDER BY cc.name; 14. Liste des films les plus lou\u00e9s Difficult\u00e9 : 3 Pour obtenir la liste des 10 films les plus lou\u00e9s, avec leur titre et le nombre de locations : Code SELECT f.title, COUNT(r.rental_id) AS rental_count FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.film_id, f.title ORDER BY rental_count DESC LIMIT 10; Difficult\u00e9 : 4 Code WITH actor_counts AS ( SELECT a.actor_id, a.first_name, a.last_name, COUNT(fa.film_id) AS film_count FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id, a.first_name, a.last_name ), top_5_count AS ( SELECT film_count FROM actor_counts ORDER BY film_count DESC LIMIT 1 OFFSET 4 ) SELECT ac.first_name, ac.last_name, ac.film_count FROM actor_counts ac, top_5_count t5c WHERE ac.film_count >= t5c.film_count ORDER BY ac.film_count DESC, ac.last_name, ac.first_name; 15. Revenus totaux par cat\u00e9gorie de film Difficult\u00e9 : 3 Pour calculer les revenus totaux g\u00e9n\u00e9r\u00e9s par chaque cat\u00e9gorie de film : Code SELECT c.name AS category, SUM(p.amount) AS total_revenue FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN payment p ON r.rental_id = p.rental_id GROUP BY c.category_id, c.name ORDER BY total_revenue DESC; 16. Clients ayant d\u00e9pens\u00e9 le plus Difficult\u00e9 : 3 Pour obtenir les 10 clients ayant d\u00e9pens\u00e9 le plus, avec leur nom et le montant total : Code SELECT c.first_name, c.last_name, SUM(p.amount) AS total_spent FROM customer c JOIN payment p ON c.customer_id = p.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY total_spent DESC LIMIT 10; Difficult\u00e9 : 4 Code WITH customer_spending AS (SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent FROM customer c JOIN payment p ON c.customer_id = p.customer_id GROUP BY c.customer_id, c.first_name, c.last_name), top_10_spent AS (SELECT total_spent FROM customer_spending ORDER BY total_spent DESC LIMIT 1 OFFSET 9) SELECT cs.first_name, cs.last_name, cs.total_spent FROM customer_spending cs, top_10_spent t10s WHERE cs.total_spent >= t10s.total_spent ORDER BY cs.total_spent DESC, cs.last_name, cs.first_name; 17. Films disponibles dans un magasin sp\u00e9cifique Difficult\u00e9 : 2 Pour obtenir la liste des films disponibles dans le magasin avec l'ID 1 : Code SELECT DISTINCT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id WHERE i.store_id = 1 ORDER BY f.title; 18. Quels sont les 5 acteurs qui ont jou\u00e9 dans le plus grand nombre de films ? Difficult\u00e9 : 3 Code SELECT a.actor_id, a.first_name, a.last_name, COUNT(fa.film_id) AS film_count FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id, a.first_name, a.last_name ORDER BY film_count DESC LIMIT 5; Difficult\u00e9 : 4 Code WITH actor_counts AS (SELECT a.actor_id, a.first_name, a.last_name, COUNT(fa.film_id) AS film_count FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id, a.first_name, a.last_name), top_5_count AS (SELECT film_count FROM actor_counts ORDER BY film_count DESC LIMIT 1 OFFSET 4) SELECT ac.first_name, ac.last_name, ac.film_count FROM actor_counts ac, top_5_count t5c WHERE ac.film_count >= t5c.film_count ORDER BY ac.film_count DESC, ac.last_name, ac.first_name; 19. Quel est le revenu total g\u00e9n\u00e9r\u00e9 par chaque magasin ? Difficult\u00e9 : 3 Code SELECT s.store_id, s.address_id, SUM(p.amount) AS total_revenue FROM store s JOIN staff st ON s.store_id = st.store_id JOIN payment p ON st.staff_id = p.staff_id GROUP BY s.store_id, s.address_id ORDER BY total_revenue DESC; 20. Quels sont les 10 films les plus rentables (bas\u00e9 sur le montant total des paiements) ? Difficult\u00e9 : 3 Code SELECT f.film_id, f.title, SUM(p.amount) AS total_revenue FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN payment p ON r.rental_id = p.rental_id GROUP BY f.film_id, f.title ORDER BY total_revenue DESC LIMIT 10; Difficult\u00e9 : 4 Code WITH film_revenue AS (SELECT f.film_id, f.title, SUM(p.amount) AS total_revenue FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN payment p ON r.rental_id = p.rental_id GROUP BY f.film_id, f.title), top_10_revenue AS (SELECT total_revenue FROM film_revenue ORDER BY total_revenue DESC LIMIT 1 OFFSET 9) SELECT fr.film_id, fr.title, fr.total_revenue FROM film_revenue fr, top_10_revenue t10r WHERE fr.total_revenue >= t10r.total_revenue ORDER BY fr.total_revenue DESC, fr.title; 21. Quelle est la dur\u00e9e moyenne de location pour chaque cat\u00e9gorie de film ? Difficult\u00e9 : 4 Code SELECT c.name, AVG(EXTRACT(DAY FROM (r.return_date - r.rental_date))) AS avg_rental_duration FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id WHERE r.return_date IS NOT NULL GROUP BY c.category_id, c.name ORDER BY avg_rental_duration DESC; 22. Quels sont les clients qui n'ont pas effectu\u00e9 de location depuis plus de 3 mois ? Difficult\u00e9 : 4 Code SELECT c.customer_id, c.first_name, c.last_name, MAX(r.rental_date) AS last_rental_date FROM customer c LEFT JOIN rental r ON c.customer_id = r.customer_id GROUP BY c.customer_id, c.first_name, c.last_name HAVING MAX(r.rental_date) < CURRENT_DATE - INTERVAL '3 months' OR MAX(r.rental_date) IS NULL ORDER BY last_rental_date; 23. Quels sont les films qui n'ont jamais \u00e9t\u00e9 lou\u00e9s ? Difficult\u00e9 : 3 Code SELECT f.film_id, f.title FROM film f LEFT JOIN inventory i ON f.film_id = i.film_id LEFT JOIN rental r ON i.inventory_id = r.inventory_id WHERE r.rental_id IS NULL; 24. Quel est le client qui a d\u00e9pens\u00e9 le plus d'argent, et combien a-t-il d\u00e9pens\u00e9 ? Difficult\u00e9 : 3 Code SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent FROM customer c JOIN payment p ON c.customer_id = p.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY total_spent DESC LIMIT 1; Difficult\u00e9 : 4 Code WITH customer_spending AS (SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent FROM customer c JOIN payment p ON c.customer_id = p.customer_id GROUP BY c.customer_id, c.first_name, c.last_name), max_spending AS (SELECT MAX(total_spent) AS max_amount FROM customer_spending) SELECT cs.customer_id, cs.first_name, cs.last_name, cs.total_spent FROM customer_spending cs, max_spending ms WHERE cs.total_spent = ms.max_amount ORDER BY cs.last_name, cs.first_name; 25. Quels sont les 5 couples d'acteurs qui ont jou\u00e9 ensemble dans le plus grand nombre de films ? Difficult\u00e9 : 5 Code SELECT a1.actor_id AS actor1_id, a1.first_name AS actor1_first_name, a1.last_name AS actor1_last_name, a2.actor_id AS actor2_id, a2.first_name AS actor2_first_name, a2.last_name AS actor2_last_name, COUNT(*) AS films_together FROM film_actor fa1 JOIN film_actor fa2 ON fa1.film_id = fa2.film_id AND fa1.actor_id < fa2.actor_id JOIN actor a1 ON fa1.actor_id = a1.actor_id JOIN actor a2 ON fa2.actor_id = a2.actor_id GROUP BY a1.actor_id, a1.first_name, a1.last_name, a2.actor_id, a2.first_name, a2.last_name ORDER BY films_together DESC LIMIT 5; Difficult\u00e9 : 5 Code WITH actor_pairs AS (SELECT LEAST(fa1.actor_id, fa2.actor_id) AS actor1_id, GREATEST(fa1.actor_id, fa2.actor_id) AS actor2_id, COUNT(*) AS films_together FROM film_actor fa1 JOIN film_actor fa2 ON fa1.film_id = fa2.film_id AND fa1.actor_id < fa2.actor_id GROUP BY LEAST(fa1.actor_id, fa2.actor_id), GREATEST(fa1.actor_id, fa2.actor_id)), top_5_count AS (SELECT films_together FROM actor_pairs ORDER BY films_together DESC LIMIT 1 OFFSET 4) SELECT a1.actor_id AS actor1_id, a1.first_name AS actor1_first_name, a1.last_name AS actor1_last_name, a2.actor_id AS actor2_id, a2.first_name AS actor2_first_name, a2.last_name AS actor2_last_name, ap.films_together FROM actor_pairs ap JOIN actor a1 ON ap.actor1_id = a1.actor_id JOIN actor a2 ON ap.actor2_id = a2.actor_id JOIN top_5_count t5c ON ap.films_together >= t5c.films_together ORDER BY ap.films_together DESC, a1.last_name, a1.first_name, a2.last_name, a2.first_name;","title":"Base de donn\u00e9es Pagila"},{"location":"7.%20Exercices/SQL/01-pagila/#base-de-donnees-pagila","text":"","title":"Base de donn\u00e9es Pagila"},{"location":"7.%20Exercices/SQL/01-pagila/#creation","text":"pagila_create.sql","title":"Cr\u00e9ation"},{"location":"7.%20Exercices/SQL/01-pagila/#dea","text":"Code @startuml 'top to bottom direction 'skinparam linetype polyline !define TABLE(name,desc) class name as \"desc\" << (T,#FFAAAA) >> !define PK(x) <u>x</u> !define FK(x) <i>x</i> hide empty methods hide empty fields TABLE(actor, \"actor\") { first_name: text last_name: text last_update: timestamp with time zone actor_id: integer } TABLE(address, \"address\") { address: text address2: text district: text city_id: smallint postal_code: text phone: text last_update: timestamp with time zone address_id: integer } TABLE(category, \"category\") { name: text last_update: timestamp with time zone category_id: integer } TABLE(city, \"city\") { city: text country_id: smallint last_update: timestamp with time zone city_id: integer } TABLE(country, \"country\") { country: text last_update: timestamp with time zone country_id: integer } TABLE(customer, \"customer\") { store_id: smallint first_name: text last_name: text email: text address_id: smallint activebool: boolean create_date: date last_update: timestamp with time zone active: integer customer_id: integer } TABLE(film, \"film\") { title: text description: text release_year: pagila.year language_id: smallint original_language_id: smallint rental_duration: smallint rental_rate: numeric(4,2) length: smallint replacement_cost: numeric(5,2) rating: pagila.mpaa_rating last_update: timestamp with time zone special_features: text[] fulltext: tsvector film_id: integer } TABLE(film_actor, \"film_actor\") { last_update: timestamp with time zone actor_id: smallint film_id: smallint } TABLE(film_category, \"film_category\") { last_update: timestamp with time zone film_id: smallint category_id: smallint } TABLE(inventory, \"inventory\") { film_id: smallint store_id: smallint last_update: timestamp with time zone inventory_id: integer } TABLE(language, \"language\") { name: char(20) last_update: timestamp with time zone language_id: integer } TABLE(payment, \"payment\") { payment_id: integer customer_id: smallint staff_id: smallint rental_id: integer amount: numeric(5,2) payment_date: timestamp with time zone } TABLE(rental, \"rental\") { rental_date: timestamp with time zone inventory_id: integer customer_id: smallint return_date: timestamp with time zone staff_id: smallint last_update: timestamp with time zone rental_id: integer } TABLE(staff, \"staff\") { first_name: text last_name: text address_id: smallint email: text store_id: smallint active: boolean username: text password: text last_update: timestamp with time zone picture: bytea staff_id: integer } TABLE(store, \"store\") { manager_staff_id: smallint address_id: smallint last_update: timestamp with time zone store_id: integer } address -[#595959,plain]-^ city : \"city_id\" city -[#595959,plain]-^ country : \"country_id\" customer -[#595959,plain]-^ address : \"address_id\" customer -[#595959,plain]-^ store : \"store_id\" film -[#595959,plain]-^ language : \"language_id\" film -[#595959,plain]-^ language : \"original_language_id:language_id\" film_actor -[#595959,plain]-^ actor : \"actor_id\" film_actor -[#595959,plain]-^ film : \"film_id\" film_category -[#595959,plain]-^ category : \"category_id\" film_category -[#595959,plain]-^ film : \"film_id\" inventory -[#595959,plain]-^ film : \"film_id\" inventory -[#595959,plain]-^ store : \"store_id\" payment -[#595959,plain]-^ customer : \"customer_id\" payment -[#595959,plain]-^ rental : \"rental_id\" payment -[#595959,plain]-^ staff : \"staff_id\" rental -[#595959,plain]-^ customer : \"customer_id\" rental -[#595959,plain]-^ inventory : \"inventory_id\" rental -[#595959,plain]-^ staff : \"staff_id\" staff -[#595959,plain]-^ address : \"address_id\" staff -[#595959,plain]-^ store : \"store_id\" store -[#595959,plain]-^ address : \"address_id\" @enduml","title":"DEA"},{"location":"7.%20Exercices/SQL/01-pagila/#requetes","text":"","title":"Requ\u00eates"},{"location":"7.%20Exercices/SQL/01-pagila/#1-trouver-des-films-dau-moins-2-heures","text":"Difficult\u00e9 : 1 Code SELECT title, length FROM film WHERE length >= 120 ORDER BY length DESC;","title":"1. Trouver des films d'au moins 2 heures"},{"location":"7.%20Exercices/SQL/01-pagila/#2-trouver-lidentifiant-et-la-description-du-film-academy-dinosaur","text":"Difficult\u00e9 : 1 Code SELECT film_id, description FROM film WHERE title = 'ACADEMY DINOSAUR';","title":"2. Trouver l'identifiant et la description du film 'ACADEMY DINOSAUR'"},{"location":"7.%20Exercices/SQL/01-pagila/#3-trouver-les-categories-de-academy-dinosaur","text":"Difficult\u00e9 : 2 Code SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'ACADEMY DINOSAUR';","title":"3. Trouver les cat\u00e9gories de 'ACADEMY DINOSAUR'"},{"location":"7.%20Exercices/SQL/01-pagila/#4-trouver-les-films-sans-categories","text":"Difficult\u00e9 : 2 Code SELECT f.title FROM film f LEFT JOIN film_category fc ON f.film_id = fc.film_id WHERE fc.category_id IS NULL;","title":"4. Trouver les films sans cat\u00e9gories"},{"location":"7.%20Exercices/SQL/01-pagila/#5-trouver-les-categories-sans-films","text":"Meilleure r\u00e9ponse : Difficult\u00e9 : 2 Code SELECT c.name FROM category c LEFT JOIN film_category fc ON c.category_id = fc.category_id WHERE fc.film_id IS NULL; Autres r\u00e9ponses : Code select c.category_id, c.name from category c left join film_category fc on c.category_id = fc.category_id group by c.category_id, c.name having count(fc.film_id) = 0; Code select category_id, name from category where category_id not in (select category_id from film_category); Code select category_id, name from category c where not exists(select fc.category_id from film_category fc where fc.category_id = c.category_id); Code select category_id, name from category c except select c.category_id, c.name from category c inner join film_category fc on fc.category_id = c.category_id; Code select c.category_id, name from category c inner join (select category_id from category c except select fc.category_id from film_category fc) as T on c.category_id = T.category_id; Code with T as (select category_id from category c except select fc.category_id from film_category fc) select c.category_id, name from category c inner join T on c.category_id = T.category_id;","title":"5. Trouver les cat\u00e9gories sans films"},{"location":"7.%20Exercices/SQL/01-pagila/#6-trouver-les-films-daction","text":"Difficult\u00e9 : 2 Code SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Action';","title":"6. Trouver les films d'action"},{"location":"7.%20Exercices/SQL/01-pagila/#7-trouver-le-nombre-de-films-dans-la-categorie-action","text":"Difficult\u00e9 : 2 Code SELECT COUNT(*) AS action_film_count FROM film_category fc JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Action';","title":"7. Trouver le nombre de films dans la cat\u00e9gorie 'Action'"},{"location":"7.%20Exercices/SQL/01-pagila/#8-nombre-de-films-dans-chaque-categorie","text":"Difficult\u00e9 : 3 Code SELECT c.name, COUNT(fc.film_id) AS film_count FROM category c LEFT JOIN film_category fc ON c.category_id = fc.category_id GROUP BY c.category_id, c.name ORDER BY film_count DESC;","title":"8. Nombre de films dans chaque cat\u00e9gorie"},{"location":"7.%20Exercices/SQL/01-pagila/#9-trouver-le-nombre-de-categories-pour-chaque-film","text":"Difficult\u00e9 : 3 Code SELECT f.title, COUNT(fc.category_id) AS category_count FROM film f LEFT JOIN film_category fc ON f.film_id = fc.film_id GROUP BY f.film_id, f.title ORDER BY category_count DESC;","title":"9. Trouver le nombre de cat\u00e9gories pour chaque film"},{"location":"7.%20Exercices/SQL/01-pagila/#10-trouver-le-nombre-de-films","text":"Difficult\u00e9 : 1 Code SELECT COUNT(*) AS total_films FROM film;","title":"10. Trouver le nombre de films"},{"location":"7.%20Exercices/SQL/01-pagila/#11-trouver-le-nombre-de-langues-differentes-dans-la-table-des-langues","text":"Difficult\u00e9 : 1 Code SELECT COUNT(*) AS language_count FROM language;","title":"11. Trouver le nombre de langues diff\u00e9rentes dans la table des langues"},{"location":"7.%20Exercices/SQL/01-pagila/#12-trouver-le-nombre-de-langues-differentes-dans-la-table-des-films","text":"Difficult\u00e9 : 1 Code SELECT COUNT(DISTINCT language_id) AS film_language_count FROM film;","title":"12. Trouver le nombre de langues diff\u00e9rentes dans la table des films"},{"location":"7.%20Exercices/SQL/01-pagila/#13-categorie-avec-le-plus-grand-nombre-de-films","text":"Difficult\u00e9 : 3 Code SELECT c.name, COUNT(f.film_id) AS film_count FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id GROUP BY c.category_id, c.name ORDER BY film_count DESC LIMIT 1; Difficult\u00e9 : 4 Code WITH category_counts AS (SELECT c.category_id, c.name, COUNT(f.film_id) AS film_count FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id GROUP BY c.category_id, c.name), max_count AS (SELECT MAX(film_count) AS max_film_count FROM category_counts) SELECT cc.name AS category, cc.film_count FROM category_counts cc, max_count mc WHERE cc.film_count = mc.max_film_count ORDER BY cc.name;","title":"13. Cat\u00e9gorie avec le plus grand nombre de films"},{"location":"7.%20Exercices/SQL/01-pagila/#14-liste-des-films-les-plus-loues","text":"Difficult\u00e9 : 3 Pour obtenir la liste des 10 films les plus lou\u00e9s, avec leur titre et le nombre de locations : Code SELECT f.title, COUNT(r.rental_id) AS rental_count FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.film_id, f.title ORDER BY rental_count DESC LIMIT 10; Difficult\u00e9 : 4 Code WITH actor_counts AS ( SELECT a.actor_id, a.first_name, a.last_name, COUNT(fa.film_id) AS film_count FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id, a.first_name, a.last_name ), top_5_count AS ( SELECT film_count FROM actor_counts ORDER BY film_count DESC LIMIT 1 OFFSET 4 ) SELECT ac.first_name, ac.last_name, ac.film_count FROM actor_counts ac, top_5_count t5c WHERE ac.film_count >= t5c.film_count ORDER BY ac.film_count DESC, ac.last_name, ac.first_name;","title":"14. Liste des films les plus lou\u00e9s"},{"location":"7.%20Exercices/SQL/01-pagila/#15-revenus-totaux-par-categorie-de-film","text":"Difficult\u00e9 : 3 Pour calculer les revenus totaux g\u00e9n\u00e9r\u00e9s par chaque cat\u00e9gorie de film : Code SELECT c.name AS category, SUM(p.amount) AS total_revenue FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN payment p ON r.rental_id = p.rental_id GROUP BY c.category_id, c.name ORDER BY total_revenue DESC;","title":"15. Revenus totaux par cat\u00e9gorie de film"},{"location":"7.%20Exercices/SQL/01-pagila/#16-clients-ayant-depense-le-plus","text":"Difficult\u00e9 : 3 Pour obtenir les 10 clients ayant d\u00e9pens\u00e9 le plus, avec leur nom et le montant total : Code SELECT c.first_name, c.last_name, SUM(p.amount) AS total_spent FROM customer c JOIN payment p ON c.customer_id = p.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY total_spent DESC LIMIT 10; Difficult\u00e9 : 4 Code WITH customer_spending AS (SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent FROM customer c JOIN payment p ON c.customer_id = p.customer_id GROUP BY c.customer_id, c.first_name, c.last_name), top_10_spent AS (SELECT total_spent FROM customer_spending ORDER BY total_spent DESC LIMIT 1 OFFSET 9) SELECT cs.first_name, cs.last_name, cs.total_spent FROM customer_spending cs, top_10_spent t10s WHERE cs.total_spent >= t10s.total_spent ORDER BY cs.total_spent DESC, cs.last_name, cs.first_name;","title":"16. Clients ayant d\u00e9pens\u00e9 le plus"},{"location":"7.%20Exercices/SQL/01-pagila/#17-films-disponibles-dans-un-magasin-specifique","text":"Difficult\u00e9 : 2 Pour obtenir la liste des films disponibles dans le magasin avec l'ID 1 : Code SELECT DISTINCT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id WHERE i.store_id = 1 ORDER BY f.title;","title":"17. Films disponibles dans un magasin sp\u00e9cifique"},{"location":"7.%20Exercices/SQL/01-pagila/#18-quels-sont-les-5-acteurs-qui-ont-joue-dans-le-plus-grand-nombre-de-films","text":"Difficult\u00e9 : 3 Code SELECT a.actor_id, a.first_name, a.last_name, COUNT(fa.film_id) AS film_count FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id, a.first_name, a.last_name ORDER BY film_count DESC LIMIT 5; Difficult\u00e9 : 4 Code WITH actor_counts AS (SELECT a.actor_id, a.first_name, a.last_name, COUNT(fa.film_id) AS film_count FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id, a.first_name, a.last_name), top_5_count AS (SELECT film_count FROM actor_counts ORDER BY film_count DESC LIMIT 1 OFFSET 4) SELECT ac.first_name, ac.last_name, ac.film_count FROM actor_counts ac, top_5_count t5c WHERE ac.film_count >= t5c.film_count ORDER BY ac.film_count DESC, ac.last_name, ac.first_name;","title":"18. Quels sont les 5 acteurs qui ont jou\u00e9 dans le plus grand nombre de films ?"},{"location":"7.%20Exercices/SQL/01-pagila/#19-quel-est-le-revenu-total-genere-par-chaque-magasin","text":"Difficult\u00e9 : 3 Code SELECT s.store_id, s.address_id, SUM(p.amount) AS total_revenue FROM store s JOIN staff st ON s.store_id = st.store_id JOIN payment p ON st.staff_id = p.staff_id GROUP BY s.store_id, s.address_id ORDER BY total_revenue DESC;","title":"19. Quel est le revenu total g\u00e9n\u00e9r\u00e9 par chaque magasin ?"},{"location":"7.%20Exercices/SQL/01-pagila/#20-quels-sont-les-10-films-les-plus-rentables-base-sur-le-montant-total-des-paiements","text":"Difficult\u00e9 : 3 Code SELECT f.film_id, f.title, SUM(p.amount) AS total_revenue FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN payment p ON r.rental_id = p.rental_id GROUP BY f.film_id, f.title ORDER BY total_revenue DESC LIMIT 10; Difficult\u00e9 : 4 Code WITH film_revenue AS (SELECT f.film_id, f.title, SUM(p.amount) AS total_revenue FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN payment p ON r.rental_id = p.rental_id GROUP BY f.film_id, f.title), top_10_revenue AS (SELECT total_revenue FROM film_revenue ORDER BY total_revenue DESC LIMIT 1 OFFSET 9) SELECT fr.film_id, fr.title, fr.total_revenue FROM film_revenue fr, top_10_revenue t10r WHERE fr.total_revenue >= t10r.total_revenue ORDER BY fr.total_revenue DESC, fr.title;","title":"20. Quels sont les 10 films les plus rentables (bas\u00e9 sur le montant total des paiements) ?"},{"location":"7.%20Exercices/SQL/01-pagila/#21-quelle-est-la-duree-moyenne-de-location-pour-chaque-categorie-de-film","text":"Difficult\u00e9 : 4 Code SELECT c.name, AVG(EXTRACT(DAY FROM (r.return_date - r.rental_date))) AS avg_rental_duration FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id WHERE r.return_date IS NOT NULL GROUP BY c.category_id, c.name ORDER BY avg_rental_duration DESC;","title":"21. Quelle est la dur\u00e9e moyenne de location pour chaque cat\u00e9gorie de film ?"},{"location":"7.%20Exercices/SQL/01-pagila/#22-quels-sont-les-clients-qui-nont-pas-effectue-de-location-depuis-plus-de-3-mois","text":"Difficult\u00e9 : 4 Code SELECT c.customer_id, c.first_name, c.last_name, MAX(r.rental_date) AS last_rental_date FROM customer c LEFT JOIN rental r ON c.customer_id = r.customer_id GROUP BY c.customer_id, c.first_name, c.last_name HAVING MAX(r.rental_date) < CURRENT_DATE - INTERVAL '3 months' OR MAX(r.rental_date) IS NULL ORDER BY last_rental_date;","title":"22. Quels sont les clients qui n'ont pas effectu\u00e9 de location depuis plus de 3 mois ?"},{"location":"7.%20Exercices/SQL/01-pagila/#23-quels-sont-les-films-qui-nont-jamais-ete-loues","text":"Difficult\u00e9 : 3 Code SELECT f.film_id, f.title FROM film f LEFT JOIN inventory i ON f.film_id = i.film_id LEFT JOIN rental r ON i.inventory_id = r.inventory_id WHERE r.rental_id IS NULL;","title":"23. Quels sont les films qui n'ont jamais \u00e9t\u00e9 lou\u00e9s ?"},{"location":"7.%20Exercices/SQL/01-pagila/#24-quel-est-le-client-qui-a-depense-le-plus-dargent-et-combien-a-t-il-depense","text":"Difficult\u00e9 : 3 Code SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent FROM customer c JOIN payment p ON c.customer_id = p.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY total_spent DESC LIMIT 1; Difficult\u00e9 : 4 Code WITH customer_spending AS (SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent FROM customer c JOIN payment p ON c.customer_id = p.customer_id GROUP BY c.customer_id, c.first_name, c.last_name), max_spending AS (SELECT MAX(total_spent) AS max_amount FROM customer_spending) SELECT cs.customer_id, cs.first_name, cs.last_name, cs.total_spent FROM customer_spending cs, max_spending ms WHERE cs.total_spent = ms.max_amount ORDER BY cs.last_name, cs.first_name;","title":"24. Quel est le client qui a d\u00e9pens\u00e9 le plus d'argent, et combien a-t-il d\u00e9pens\u00e9 ?"},{"location":"7.%20Exercices/SQL/01-pagila/#25-quels-sont-les-5-couples-dacteurs-qui-ont-joue-ensemble-dans-le-plus-grand-nombre-de-films","text":"Difficult\u00e9 : 5 Code SELECT a1.actor_id AS actor1_id, a1.first_name AS actor1_first_name, a1.last_name AS actor1_last_name, a2.actor_id AS actor2_id, a2.first_name AS actor2_first_name, a2.last_name AS actor2_last_name, COUNT(*) AS films_together FROM film_actor fa1 JOIN film_actor fa2 ON fa1.film_id = fa2.film_id AND fa1.actor_id < fa2.actor_id JOIN actor a1 ON fa1.actor_id = a1.actor_id JOIN actor a2 ON fa2.actor_id = a2.actor_id GROUP BY a1.actor_id, a1.first_name, a1.last_name, a2.actor_id, a2.first_name, a2.last_name ORDER BY films_together DESC LIMIT 5; Difficult\u00e9 : 5 Code WITH actor_pairs AS (SELECT LEAST(fa1.actor_id, fa2.actor_id) AS actor1_id, GREATEST(fa1.actor_id, fa2.actor_id) AS actor2_id, COUNT(*) AS films_together FROM film_actor fa1 JOIN film_actor fa2 ON fa1.film_id = fa2.film_id AND fa1.actor_id < fa2.actor_id GROUP BY LEAST(fa1.actor_id, fa2.actor_id), GREATEST(fa1.actor_id, fa2.actor_id)), top_5_count AS (SELECT films_together FROM actor_pairs ORDER BY films_together DESC LIMIT 1 OFFSET 4) SELECT a1.actor_id AS actor1_id, a1.first_name AS actor1_first_name, a1.last_name AS actor1_last_name, a2.actor_id AS actor2_id, a2.first_name AS actor2_first_name, a2.last_name AS actor2_last_name, ap.films_together FROM actor_pairs ap JOIN actor a1 ON ap.actor1_id = a1.actor_id JOIN actor a2 ON ap.actor2_id = a2.actor_id JOIN top_5_count t5c ON ap.films_together >= t5c.films_together ORDER BY ap.films_together DESC, a1.last_name, a1.first_name, a2.last_name, a2.first_name;","title":"25. Quels sont les 5 couples d'acteurs qui ont jou\u00e9 ensemble dans le plus grand nombre de films ?"},{"location":"7.%20Exercices/SQL/02-recettes/","text":"Recettes de cuisine Cr\u00e9ation Voir le fichier recettes_create.sql . DEA Code @startuml !define TABLE(name,desc) class name as \"desc\" << (T,#FFAAAA) >> !define PK(x) <u>x</u> !define FK(x) <i>x</i> hide empty methods hide empty fields TABLE(Recette, \"Recette\") { PK(id_recette) : INT nom : VARCHAR(100) description : TEXT temps_preparation : INT temps_cuisson : INT difficulte : ENUM('Facile', 'Moyen', 'Difficile') nombre_portions : INT date_creation : DATETIME } TABLE(Utilisateur, \"Utilisateur\") { PK(id_utilisateur) : INT nom : VARCHAR(50) prenom : VARCHAR(50) email : VARCHAR(100) mot_de_passe : VARCHAR(255) } TABLE(Ingredient, \"Ingr\u00e9dient\") { PK(id_ingredient) : INT nom : VARCHAR(50) unite_mesure : VARCHAR(20) } TABLE(Etape, \"\u00c9tape\") { PK(id_etape) : INT FK(id_recette) : INT FK(etape_parent_id) : INT numero_etape : INT description : TEXT } TABLE(Commentaire, \"Commentaire\") { PK(id_commentaire) : INT FK(id_recette) : INT FK(id_utilisateur) : INT contenu : TEXT date_creation : DATETIME } TABLE(Note, \"Note\") { PK(id_note) : INT FK(id_recette) : INT FK(id_utilisateur) : INT valeur : INT date_creation : DATETIME } TABLE(RecetteIngredient, \"RecetteIngredient\") { PK(id_recette_ingredient) : INT FK(id_recette) : INT FK(id_ingredient) : INT quantite : FLOAT } TABLE(RecetteAuteur, \"RecetteAuteur\") { PK(id_recette_auteur) : INT FK(id_recette) : INT FK(id_utilisateur) : INT } Recette \"1\" -- \"0..*\" Etape Recette \"1\" -- \"0..*\" Commentaire Recette \"1\" -- \"0..*\" Note Recette \"1\" -- \"0..*\" RecetteIngredient Recette \"1..*\" -- \"1..*\" Utilisateur (Recette, Utilisateur) .. RecetteAuteur RecetteIngredient \"0..*\" -- \"1\" Ingredient Commentaire \"0..*\" -- \"1\" Utilisateur Note \"0..*\" -- \"1\" Utilisateur Etape \"0..*\" -- \"0..1\" Etape @enduml Ce diagramme repr\u00e9sente une structure de base de donn\u00e9es pour un site web de recettes avec les entit\u00e9s suivantes : Recette : Contient les informations g\u00e9n\u00e9rales sur une recette. Utilisateur : Repr\u00e9sente les utilisateurs du site, qui peuvent \u00eatre auteurs de recettes ou laisser des commentaires et des notes. Ingr\u00e9dient : Liste tous les ingr\u00e9dients possibles. \u00c9tape : D\u00e9crit les \u00e9tapes de pr\u00e9paration d'une recette. Commentaire : Stocke les commentaires des utilisateurs sur les recettes. Note : Enregistre les notes d'appr\u00e9ciation donn\u00e9es par les utilisateurs aux recettes. RecetteIngredient : Table de liaison entre Recette et Ingr\u00e9dient, permettant de sp\u00e9cifier les quantit\u00e9s. RecetteAuteur : Table de liaison entre Recette et Utilisateur, permettant d'avoir plusieurs auteurs par recette. Requ\u00eates Simple 1. Trouver les recettes qui demandent un temps de pr\u00e9paration de moins de 30 minutes. Difficult\u00e9 : 1 Code SELECT nom, temps_preparation FROM Recette WHERE temps_preparation < 30 ORDER BY temps_preparation; 2. Lister tous les ingr\u00e9dients dont l'unit\u00e9 de mesure est en grammes (g). Difficult\u00e9 : 1 Code SELECT nom, unite_mesure FROM Ingredient WHERE unite_mesure = 'g' ORDER BY nom; 3. Afficher les utilisateurs dont le nom de famille commence par 'D'. Difficult\u00e9 : 1 Code SELECT nom, prenom, email FROM Utilisateur WHERE nom LIKE 'D%' ORDER BY nom, prenom; 4. Trouver les recettes class\u00e9es comme \"Difficile\". Difficult\u00e9 : 1 Code SELECT nom, temps_preparation, temps_cuisson FROM Recette WHERE difficulte = 'Difficile' ORDER BY nom; 5. Lister les commentaires cr\u00e9\u00e9s apr\u00e8s le 1er janvier 2024. Difficult\u00e9 : 1 Code SELECT id_recette, contenu, date_creation FROM Commentaire WHERE date_creation > '2024-01-01' ORDER BY date_creation DESC; 6. Afficher le nom des recettes avec le nom et pr\u00e9nom de leur auteur. Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, u.prenom, u.nom FROM Recette r JOIN RecetteAuteur ra ON r.id_recette = ra.id_recette JOIN Utilisateur u ON ra.id_utilisateur = u.id_utilisateur ORDER BY r.nom; 7. Lister tous les ingr\u00e9dients de la recette \"Quiche Lorraine\" avec leurs quantit\u00e9s. Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, i.nom AS nom_ingredient, ri.quantite, i.unite_mesure FROM Recette r JOIN RecetteIngredient ri ON r.id_recette = ri.id_recette JOIN Ingredient i ON ri.id_ingredient = i.id_ingredient WHERE r.nom = 'Quiche Lorraine' ORDER BY i.nom; 8. Afficher toutes les \u00e9tapes de pr\u00e9paration de la recette \"Ratatouille\" dans l'ordre. Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, e.numero_etape, e.description FROM Recette r JOIN Etape e ON r.id_recette = e.id_recette WHERE r.nom = 'Ratatouille' ORDER BY e.numero_etape; 9. Trouver toutes les recettes avec leurs notes moyennes (si elles en ont). Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, AVG(n.valeur) AS note_moyenne FROM Recette r LEFT JOIN Note n ON r.id_recette = n.id_recette GROUP BY r.id_recette, r.nom ORDER BY note_moyenne DESC NULLS LAST; 10. Lister tous les utilisateurs et le nombre de recettes qu'ils ont cr\u00e9\u00e9es (y compris ceux qui n'en ont pas cr\u00e9\u00e9). Difficult\u00e9 : 2 Code SELECT u.prenom, u.nom, COUNT(ra.id_recette) AS nombre_recettes FROM Utilisateur u LEFT JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur GROUP BY u.id_utilisateur, u.prenom, u.nom ORDER BY nombre_recettes DESC; 11. Afficher les recettes avec leurs commentaires, y compris celles sans commentaire. Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, c.contenu AS commentaire FROM Recette r LEFT JOIN Commentaire c ON r.id_recette = c.id_recette ORDER BY r.nom, c.date_creation; 12. Trouver les recettes qui utilisent de la \"Farine\" et leurs quantit\u00e9s. Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, ri.quantite, i.unite_mesure FROM Recette r JOIN RecetteIngredient ri ON r.id_recette = ri.id_recette JOIN Ingredient i ON ri.id_ingredient = i.id_ingredient WHERE i.nom = 'Farine' ORDER BY ri.quantite DESC; 13. Lister les utilisateurs qui ont \u00e0 la fois cr\u00e9\u00e9 des recettes et laiss\u00e9 des commentaires. Difficult\u00e9 : 2 Code SELECT DISTINCT u.prenom, u.nom FROM Utilisateur u JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur JOIN Commentaire c ON u.id_utilisateur = c.id_utilisateur ORDER BY u.nom, u.prenom; 14. Afficher les recettes avec leur difficult\u00e9 et le nom de leur auteur, tri\u00e9es par difficult\u00e9 d\u00e9croissante. Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, r.difficulte, u.prenom, u.nom FROM Recette r JOIN RecetteAuteur ra ON r.id_recette = ra.id_recette JOIN Utilisateur u ON ra.id_utilisateur = u.id_utilisateur ORDER BY CASE WHEN r.difficulte = 'Difficile' THEN 1 WHEN r.difficulte = 'Moyen' THEN 2 WHEN r.difficulte = 'Facile' THEN 3 END, r.nom; 15. Trouver les recettes qui utilisent tous les ingr\u00e9dients d'une salade ni\u00e7oise (supposons que ce sont : (Thon, Olive, Oeufs). Difficult\u00e9 : 3 Code SELECT r.nom AS nom_recette FROM Recette r WHERE NOT EXISTS (SELECT i.id_ingredient FROM Ingredient i WHERE i.nom IN ('Thon', 'Olive', 'Oeufs') AND NOT EXISTS (SELECT 1 FROM RecetteIngredient ri WHERE ri.id_recette = r.id_recette AND ri.id_ingredient = i.id_ingredient)) ORDER BY r.nom; 16. Calculer le nombre de recettes pour chaque niveau de difficult\u00e9. Difficult\u00e9 : 2 Code SELECT difficulte, COUNT(*) AS nombre_recettes FROM Recette GROUP BY difficulte ORDER BY nombre_recettes DESC; 17. Trouver le temps de pr\u00e9paration moyen des recettes pour chaque nombre de portions. Difficult\u00e9 : 2 Code SELECT nombre_portions, AVG(temps_preparation) AS temps_moyen_preparation FROM Recette GROUP BY nombre_portions ORDER BY nombre_portions; 18. Lister les unit\u00e9s de mesure utilis\u00e9es et le nombre d'ingr\u00e9dients pour chaque unit\u00e9. Difficult\u00e9 : 2 Code SELECT unite_mesure, COUNT(*) AS nombre_ingredients FROM Ingredient GROUP BY unite_mesure ORDER BY nombre_ingredients DESC; 19. Trouver la note maximale, minimale et moyenne pour chaque recette. Difficult\u00e9 : 2 Code SELECT id_recette, MAX(valeur) AS note_max, MIN(valeur) AS note_min, AVG(valeur) AS note_moyenne FROM Note GROUP BY id_recette ORDER BY note_moyenne DESC; 20. Compter le nombre de commentaires par utilisateur. Difficult\u00e9 : 2 Code SELECT id_utilisateur, COUNT(*) AS nombre_commentaires FROM Commentaire GROUP BY id_utilisateur ORDER BY nombre_commentaires DESC; 21. Afficher le nom des recettes et le nombre d'ingr\u00e9dients qu'elles contiennent. Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, COUNT(ri.id_ingredient) AS nombre_ingredients FROM Recette r LEFT JOIN RecetteIngredient ri ON r.id_recette = ri.id_recette GROUP BY r.id_recette, r.nom ORDER BY nombre_ingredients DESC; 22. Trouver les utilisateurs qui ont cr\u00e9\u00e9 le plus de recettes, avec le nombre de recettes cr\u00e9\u00e9es. Difficult\u00e9 : 3 Code SELECT u.prenom, u.nom, COUNT(ra.id_recette) AS nombre_recettes FROM Utilisateur u LEFT JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur GROUP BY u.id_utilisateur, u.prenom, u.nom ORDER BY nombre_recettes DESC; 23. Calculer le temps de pr\u00e9paration moyen des recettes pour chaque auteur. Difficult\u00e9 : 3 Code SELECT u.prenom, u.nom, AVG(r.temps_preparation) AS temps_moyen_preparation FROM Utilisateur u JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur JOIN Recette r ON ra.id_recette = r.id_recette GROUP BY u.id_utilisateur, u.prenom, u.nom ORDER BY temps_moyen_preparation DESC; 24. Lister les ingr\u00e9dients les plus utilis\u00e9s dans les recettes, avec le nombre de recettes les utilisant. Difficult\u00e9 : 3 Code SELECT i.nom AS nom_ingredient, COUNT(DISTINCT ri.id_recette) AS nombre_recettes FROM Ingredient i JOIN RecetteIngredient ri ON i.id_ingredient = ri.id_ingredient GROUP BY i.id_ingredient, i.nom ORDER BY nombre_recettes DESC LIMIT 10; 25. Trouver la note moyenne des recettes pour chaque niveau de difficult\u00e9. Difficult\u00e9 : 3 Code SELECT r.difficulte, AVG(n.valeur) AS note_moyenne FROM Recette r LEFT JOIN Note n ON r.id_recette = n.id_recette GROUP BY r.difficulte ORDER BY note_moyenne DESC; 26. Trouver les recettes qui ont un temps de pr\u00e9paration sup\u00e9rieur \u00e0 la moyenne. Difficult\u00e9 : 3 Code SELECT nom, temps_preparation FROM Recette WHERE temps_preparation > (SELECT AVG(temps_preparation) FROM Recette) ORDER BY temps_preparation DESC; 27. Lister les utilisateurs qui ont cr\u00e9\u00e9 des recettes, mais n'ont jamais laiss\u00e9 de commentaire. Difficult\u00e9 : 3 Code SELECT DISTINCT u.prenom, u.nom FROM Utilisateur u JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur WHERE u.id_utilisateur NOT IN (SELECT DISTINCT id_utilisateur FROM Commentaire) ORDER BY u.nom, u.prenom; 28. Trouver les recettes qui utilisent tous les ingr\u00e9dients pr\u00e9sents dans la recette \"Quiche Lorraine\". Difficult\u00e9 : 4 Code SELECT r.nom FROM Recette r WHERE NOT EXISTS (SELECT ri.id_ingredient FROM RecetteIngredient ri JOIN Recette q ON ri.id_recette = q.id_recette WHERE q.nom = 'Quiche Lorraine' AND ri.id_ingredient NOT IN (SELECT id_ingredient FROM RecetteIngredient WHERE id_recette = r.id_recette)) AND r.nom != 'Quiche Lorraine' ORDER BY r.nom; 29. Afficher les recettes dont la note moyenne est sup\u00e9rieure \u00e0 la note moyenne globale de toutes les recettes. Difficult\u00e9 : 3 Code SELECT r.nom, AVG(n.valeur) AS note_moyenne FROM Recette r JOIN Note n ON r.id_recette = n.id_recette GROUP BY r.id_recette, r.nom HAVING AVG(n.valeur) > (SELECT AVG(valeur) FROM Note) ORDER BY note_moyenne DESC; 30. Trouver les utilisateurs qui ont comment\u00e9 toutes les recettes qu'ils ont cr\u00e9\u00e9es. Difficult\u00e9 : 4 Code SELECT u.prenom, u.nom FROM Utilisateur u WHERE NOT EXISTS (SELECT ra.id_recette FROM RecetteAuteur ra WHERE ra.id_utilisateur = u.id_utilisateur AND NOT EXISTS (SELECT c.id_commentaire FROM Commentaire c WHERE c.id_recette = ra.id_recette AND c.id_utilisateur = u.id_utilisateur)) AND EXISTS (SELECT 1 FROM RecetteAuteur ra WHERE ra.id_utilisateur = u.id_utilisateur) ORDER BY u.nom, u.prenom; 31. Lister les 3 recettes les plus comment\u00e9es avec leur nombre de commentaires. Difficult\u00e9 : 3 Code WITH CommentCount AS (SELECT id_recette, COUNT(*) AS nb_commentaires FROM Commentaire GROUP BY id_recette) SELECT r.nom, cc.nb_commentaires FROM Recette r JOIN CommentCount cc ON r.id_recette = cc.id_recette ORDER BY cc.nb_commentaires DESC LIMIT 3; 32. Trouver les utilisateurs qui ont cr\u00e9\u00e9 des recettes et laiss\u00e9 des commentaires, avec le nombre de recettes et de commentaires. Difficult\u00e9 : 3 Code WITH RecetteCount AS (SELECT id_utilisateur, COUNT(*) AS nb_recettes FROM RecetteAuteur GROUP BY id_utilisateur), CommentCount AS (SELECT id_utilisateur, COUNT(*) AS nb_commentaires FROM Commentaire GROUP BY id_utilisateur) SELECT u.prenom, u.nom, COALESCE(rc.nb_recettes, 0) AS nb_recettes, COALESCE(cc.nb_commentaires, 0) AS nb_commentaires FROM Utilisateur u LEFT JOIN RecetteCount rc ON u.id_utilisateur = rc.id_utilisateur LEFT JOIN CommentCount cc ON u.id_utilisateur = cc.id_utilisateur WHERE rc.nb_recettes > 0 OR cc.nb_commentaires > 0 ORDER BY nb_recettes DESC, nb_commentaires DESC; 33. Calculer le score total de chaque recette bas\u00e9 sur ses notes (5 points par note 5, 4 points par note 4, etc.) et afficher le top 5. Difficult\u00e9 : 4 Code WITH ScoreCalculation AS (SELECT id_recette, SUM(CASE WHEN valeur = 5 THEN 5 WHEN valeur = 4 THEN 4 WHEN valeur = 3 THEN 3 WHEN valeur = 2 THEN 2 WHEN valeur = 1 THEN 1 ELSE 0 END) AS score_total FROM Note GROUP BY id_recette) SELECT r.nom, sc.score_total FROM Recette r JOIN ScoreCalculation sc ON r.id_recette = sc.id_recette ORDER BY sc.score_total DESC LIMIT 5; 34. Trouver les \"super utilisateurs\" qui ont cr\u00e9\u00e9 au moins 2 recettes et laiss\u00e9 au moins 3 commentaires. Difficult\u00e9 : 3 Code WITH UserActivity AS (SELECT u.id_utilisateur, COUNT(DISTINCT ra.id_recette) AS recettes_creees, COUNT(DISTINCT c.id_commentaire) AS commentaires_laisses FROM Utilisateur u LEFT JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur LEFT JOIN Commentaire c ON u.id_utilisateur = c.id_utilisateur GROUP BY u.id_utilisateur) SELECT u.prenom, u.nom, ua.recettes_creees, ua.commentaires_laisses FROM Utilisateur u JOIN UserActivity ua ON u.id_utilisateur = ua.id_utilisateur WHERE ua.recettes_creees >= 2 AND ua.commentaires_laisses >= 3 ORDER BY ua.recettes_creees DESC, ua.commentaires_laisses DESC; 35. Cr\u00e9er une hi\u00e9rarchie des \u00e9tapes de recette, en supposant que chaque \u00e9tape puisse avoir des sous-\u00e9tapes (utilisation de WITH RECURSIVE ). Difficult\u00e9 : 4 Code WITH RECURSIVE EtapeHierarchy AS (SELECT id_etape, id_recette, numero_etape, description, etape_parent_id, 0 AS niveau FROM Etape WHERE etape_parent_id IS NULL UNION ALL SELECT e.id_etape, e.id_recette, e.numero_etape, e.description, e.etape_parent_id, eh.niveau + 1 FROM Etape e JOIN EtapeHierarchy eh ON e.etape_parent_id = eh.id_etape) SELECT r.nom AS nom_recette, REPEAT(' ', niveau) || eh.numero_etape || '. ' || eh.description AS etape_detaillee FROM EtapeHierarchy eh JOIN Recette r ON eh.id_recette = r.id_recette ORDER BY r.nom, eh.id_recette, eh.niveau, eh.numero_etape; 36. Lister tous les noms d'utilisateurs et de recettes dans une seule colonne, en indiquant s'il s'agit d'un utilisateur ou d'une recette. Difficult\u00e9 : 3 Code SELECT nom AS nom, 'Utilisateur' AS type FROM Utilisateur UNION SELECT nom, 'Recette' AS type FROM Recette ORDER BY type, nom; 37. Cat\u00e9goriser les recettes en fonction de leur temps total de pr\u00e9paration (pr\u00e9paration + cuisson). Difficult\u00e9 : 3 Utilisation de CASE WHEN 'Rapide' : < 30 minutes 'Moyen' : >= 30 et < 60 minutes 'Long' : >= 60 minutes Code SELECT nom, temps_preparation + temps_cuisson AS temps_total, CASE WHEN temps_preparation + temps_cuisson < 30 THEN 'Rapide' WHEN temps_preparation + temps_cuisson BETWEEN 30 AND 60 THEN 'Moyen' ELSE 'Long' END AS categorie_temps FROM Recette ORDER BY temps_total; 38. Lister chaque recette avec tous ses ingr\u00e9dients concat\u00e9n\u00e9s dans une seule cha\u00eene. Difficult\u00e9 : 3 Utilisation de STRING_AGG . Code SELECT r.nom, STRING_AGG(i.nom, ', ' ORDER BY i.nom) AS ingredients FROM Recette r JOIN RecetteIngredient ri ON r.id_recette = ri.id_recette JOIN Ingredient i ON ri.id_ingredient = i.id_ingredient GROUP BY r.id_recette, r.nom ORDER BY r.nom; 39. Classer les recettes par difficult\u00e9 et leur attribuer un rang bas\u00e9 sur leur temps de pr\u00e9paration. Difficult\u00e9 : 3 Utilisation des \"WINDOW FUNCTIONS\" . Code SELECT nom, difficulte, temps_preparation, RANK() OVER (PARTITION BY difficulte ORDER BY temps_preparation) AS rang_temps_prep FROM Recette ORDER BY difficulte, rang_temps_prep; 40. Pour chaque utilisateur, trouver sa recette la mieux not\u00e9e. Difficult\u00e9 : 4 Utilisation de LATERAL JOIN Code SELECT u.nom AS nom_utilisateur, best_recipe.nom AS meilleure_recette, avg_note FROM Utilisateur u LEFT JOIN LATERAL ( SELECT ra.id_utilisateur, r.nom, AVG(n.valeur) AS avg_note FROM RecetteAuteur ra JOIN Recette r ON ra.id_recette = r.id_recette LEFT JOIN Note n ON r.id_recette = n.id_recette WHERE ra.id_utilisateur = u.id_utilisateur GROUP BY ra.id_utilisateur, r.id_recette, r.nom ORDER BY avg_note DESC NULLS LAST LIMIT 1 ) AS best_recipe ON true ORDER BY avg_note DESC NULLS LAST; 41. Comparer le nombre de recettes cr\u00e9\u00e9es et le nombre de commentaires laiss\u00e9s par chaque utilisateur, en incluant tous les utilisateurs. Difficult\u00e9 : 4 Utilisation de FULL OUTER JOIN Code SELECT COALESCE(u1.nom, u2.nom) AS nom_utilisateur, COUNT(DISTINCT ra.id_recette) AS recettes_creees, COUNT(DISTINCT c.id_commentaire) AS commentaires_laisses FROM (SELECT id_utilisateur, nom FROM Utilisateur) u1 FULL OUTER JOIN RecetteAuteur ra ON u1.id_utilisateur = ra.id_utilisateur FULL OUTER JOIN (SELECT id_utilisateur, nom FROM Utilisateur) u2 ON u1.id_utilisateur = u2.id_utilisateur FULL OUTER JOIN Commentaire c ON u2.id_utilisateur = c.id_utilisateur GROUP BY COALESCE(u1.id_utilisateur, u2.id_utilisateur), COALESCE(u1.nom, u2.nom) ORDER BY recettes_creees DESC, commentaires_laisses DESC; 42. Compter le nombre de recettes cr\u00e9\u00e9es par mois au cours de la derni\u00e8re ann\u00e9e. Difficult\u00e9 : 3 Code SELECT DATE_TRUNC('month', date_creation) AS mois, COUNT(*) AS nombre_recettes FROM Recette WHERE date_creation >= CURRENT_DATE - INTERVAL '1 year' GROUP BY DATE_TRUNC('month', date_creation) ORDER BY mois; 43. Calculer la note moyenne des recettes par saison. Difficult\u00e9 : 3 Code SELECT CASE WHEN EXTRACT(MONTH FROM n.date_creation) IN (12, 1, 2) THEN 'Hiver' WHEN EXTRACT(MONTH FROM n.date_creation) IN (3, 4, 5) THEN 'Printemps' WHEN EXTRACT(MONTH FROM n.date_creation) IN (6, 7, 8) THEN '\u00c9t\u00e9' ELSE 'Automne' END AS saison, AVG(n.valeur) AS note_moyenne FROM Note n GROUP BY CASE WHEN EXTRACT(MONTH FROM n.date_creation) IN (12, 1, 2) THEN 'Hiver' WHEN EXTRACT(MONTH FROM n.date_creation) IN (3, 4, 5) THEN 'Printemps' WHEN EXTRACT(MONTH FROM n.date_creation) IN (6, 7, 8) THEN '\u00c9t\u00e9' ELSE 'Automne' END ORDER BY note_moyenne DESC; 44. Trouver le jour de la semaine o\u00f9 les utilisateurs laissent le plus de commentaires. Difficult\u00e9 : 3 Code SELECT TO_CHAR(date_creation, 'Day') AS jour_semaine, COUNT(*) AS nombre_commentaires FROM Commentaire GROUP BY TO_CHAR(date_creation, 'Day'), EXTRACT(DOW FROM date_creation) ORDER BY EXTRACT(DOW FROM date_creation); 45. Calculer le nombre moyen de recettes cr\u00e9\u00e9es par mois pour chaque ann\u00e9e. Difficult\u00e9 : 4 Code SELECT EXTRACT(YEAR FROM date_creation) AS annee, AVG(recettes_par_mois) AS moyenne_recettes_par_mois FROM (SELECT DATE_TRUNC('month', date_creation) AS mois, COUNT(*) AS recettes_par_mois FROM Recette GROUP BY DATE_TRUNC('month', date_creation)) AS sous_requete GROUP BY EXTRACT(YEAR FROM mois) ORDER BY annee; 46. Identifier les utilisateurs qui ont \u00e9t\u00e9 les plus actifs (en termes de commentaires) au cours des 30 derniers jours. Difficult\u00e9 : 3 Code SELECT u.nom, u.prenom, COUNT(*) AS nombre_commentaires FROM Utilisateur u JOIN Commentaire c ON u.id_utilisateur = c.id_utilisateur WHERE c.date_creation >= CURRENT_DATE - INTERVAL '30 days' GROUP BY u.id_utilisateur, u.nom, u.prenom ORDER BY nombre_commentaires DESC LIMIT 5; 47. Comparer le nombre de recettes cr\u00e9\u00e9es cette ann\u00e9e par rapport \u00e0 l'ann\u00e9e pr\u00e9c\u00e9dente, par trimestre. Difficult\u00e9 : 4 Code WITH recettes_par_trimestre AS (SELECT EXTRACT(YEAR FROM date_creation) AS annee, EXTRACT(QUARTER FROM date_creation) AS trimestre, COUNT(*) AS nombre_recettes FROM Recette WHERE (date_creation >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year') GROUP BY EXTRACT(YEAR FROM date_creation), EXTRACT(QUARTER FROM date_creation)) SELECT r1.trimestre, r1.nombre_recettes AS recettes_annee_precedente, r2.nombre_recettes AS recettes_annee_courante FROM recettes_par_trimestre r1 LEFT JOIN recettes_par_trimestre r2 ON r1.trimestre = r2.trimestre AND r2.annee = EXTRACT(YEAR FROM CURRENT_DATE) WHERE r1.annee = EXTRACT(YEAR FROM CURRENT_DATE) - 1 ORDER BY r1.trimestre;","title":"Recettes de cuisine"},{"location":"7.%20Exercices/SQL/02-recettes/#recettes-de-cuisine","text":"","title":"Recettes de cuisine"},{"location":"7.%20Exercices/SQL/02-recettes/#creation","text":"Voir le fichier recettes_create.sql .","title":"Cr\u00e9ation"},{"location":"7.%20Exercices/SQL/02-recettes/#dea","text":"Code @startuml !define TABLE(name,desc) class name as \"desc\" << (T,#FFAAAA) >> !define PK(x) <u>x</u> !define FK(x) <i>x</i> hide empty methods hide empty fields TABLE(Recette, \"Recette\") { PK(id_recette) : INT nom : VARCHAR(100) description : TEXT temps_preparation : INT temps_cuisson : INT difficulte : ENUM('Facile', 'Moyen', 'Difficile') nombre_portions : INT date_creation : DATETIME } TABLE(Utilisateur, \"Utilisateur\") { PK(id_utilisateur) : INT nom : VARCHAR(50) prenom : VARCHAR(50) email : VARCHAR(100) mot_de_passe : VARCHAR(255) } TABLE(Ingredient, \"Ingr\u00e9dient\") { PK(id_ingredient) : INT nom : VARCHAR(50) unite_mesure : VARCHAR(20) } TABLE(Etape, \"\u00c9tape\") { PK(id_etape) : INT FK(id_recette) : INT FK(etape_parent_id) : INT numero_etape : INT description : TEXT } TABLE(Commentaire, \"Commentaire\") { PK(id_commentaire) : INT FK(id_recette) : INT FK(id_utilisateur) : INT contenu : TEXT date_creation : DATETIME } TABLE(Note, \"Note\") { PK(id_note) : INT FK(id_recette) : INT FK(id_utilisateur) : INT valeur : INT date_creation : DATETIME } TABLE(RecetteIngredient, \"RecetteIngredient\") { PK(id_recette_ingredient) : INT FK(id_recette) : INT FK(id_ingredient) : INT quantite : FLOAT } TABLE(RecetteAuteur, \"RecetteAuteur\") { PK(id_recette_auteur) : INT FK(id_recette) : INT FK(id_utilisateur) : INT } Recette \"1\" -- \"0..*\" Etape Recette \"1\" -- \"0..*\" Commentaire Recette \"1\" -- \"0..*\" Note Recette \"1\" -- \"0..*\" RecetteIngredient Recette \"1..*\" -- \"1..*\" Utilisateur (Recette, Utilisateur) .. RecetteAuteur RecetteIngredient \"0..*\" -- \"1\" Ingredient Commentaire \"0..*\" -- \"1\" Utilisateur Note \"0..*\" -- \"1\" Utilisateur Etape \"0..*\" -- \"0..1\" Etape @enduml Ce diagramme repr\u00e9sente une structure de base de donn\u00e9es pour un site web de recettes avec les entit\u00e9s suivantes : Recette : Contient les informations g\u00e9n\u00e9rales sur une recette. Utilisateur : Repr\u00e9sente les utilisateurs du site, qui peuvent \u00eatre auteurs de recettes ou laisser des commentaires et des notes. Ingr\u00e9dient : Liste tous les ingr\u00e9dients possibles. \u00c9tape : D\u00e9crit les \u00e9tapes de pr\u00e9paration d'une recette. Commentaire : Stocke les commentaires des utilisateurs sur les recettes. Note : Enregistre les notes d'appr\u00e9ciation donn\u00e9es par les utilisateurs aux recettes. RecetteIngredient : Table de liaison entre Recette et Ingr\u00e9dient, permettant de sp\u00e9cifier les quantit\u00e9s. RecetteAuteur : Table de liaison entre Recette et Utilisateur, permettant d'avoir plusieurs auteurs par recette.","title":"DEA"},{"location":"7.%20Exercices/SQL/02-recettes/#requetes","text":"","title":"Requ\u00eates"},{"location":"7.%20Exercices/SQL/02-recettes/#simple","text":"","title":"Simple"},{"location":"7.%20Exercices/SQL/02-recettes/#1-trouver-les-recettes-qui-demandent-un-temps-de-preparation-de-moins-de-30-minutes","text":"Difficult\u00e9 : 1 Code SELECT nom, temps_preparation FROM Recette WHERE temps_preparation < 30 ORDER BY temps_preparation;","title":"1. Trouver les recettes qui demandent un temps de pr\u00e9paration de moins de 30 minutes."},{"location":"7.%20Exercices/SQL/02-recettes/#2-lister-tous-les-ingredients-dont-lunite-de-mesure-est-en-grammes-g","text":"Difficult\u00e9 : 1 Code SELECT nom, unite_mesure FROM Ingredient WHERE unite_mesure = 'g' ORDER BY nom;","title":"2. Lister tous les ingr\u00e9dients dont l'unit\u00e9 de mesure est en grammes (g)."},{"location":"7.%20Exercices/SQL/02-recettes/#3-afficher-les-utilisateurs-dont-le-nom-de-famille-commence-par-d","text":"Difficult\u00e9 : 1 Code SELECT nom, prenom, email FROM Utilisateur WHERE nom LIKE 'D%' ORDER BY nom, prenom;","title":"3. Afficher les utilisateurs dont le nom de famille commence par 'D'."},{"location":"7.%20Exercices/SQL/02-recettes/#4-trouver-les-recettes-classees-comme-difficile","text":"Difficult\u00e9 : 1 Code SELECT nom, temps_preparation, temps_cuisson FROM Recette WHERE difficulte = 'Difficile' ORDER BY nom;","title":"4. Trouver les recettes class\u00e9es comme \"Difficile\"."},{"location":"7.%20Exercices/SQL/02-recettes/#5-lister-les-commentaires-crees-apres-le-1er-janvier-2024","text":"Difficult\u00e9 : 1 Code SELECT id_recette, contenu, date_creation FROM Commentaire WHERE date_creation > '2024-01-01' ORDER BY date_creation DESC;","title":"5. Lister les commentaires cr\u00e9\u00e9s apr\u00e8s le 1er janvier 2024."},{"location":"7.%20Exercices/SQL/02-recettes/#6-afficher-le-nom-des-recettes-avec-le-nom-et-prenom-de-leur-auteur","text":"Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, u.prenom, u.nom FROM Recette r JOIN RecetteAuteur ra ON r.id_recette = ra.id_recette JOIN Utilisateur u ON ra.id_utilisateur = u.id_utilisateur ORDER BY r.nom;","title":"6. Afficher le nom des recettes avec le nom et pr\u00e9nom de leur auteur."},{"location":"7.%20Exercices/SQL/02-recettes/#7-lister-tous-les-ingredients-de-la-recette-quiche-lorraine-avec-leurs-quantites","text":"Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, i.nom AS nom_ingredient, ri.quantite, i.unite_mesure FROM Recette r JOIN RecetteIngredient ri ON r.id_recette = ri.id_recette JOIN Ingredient i ON ri.id_ingredient = i.id_ingredient WHERE r.nom = 'Quiche Lorraine' ORDER BY i.nom;","title":"7. Lister tous les ingr\u00e9dients de la recette \"Quiche Lorraine\" avec leurs quantit\u00e9s."},{"location":"7.%20Exercices/SQL/02-recettes/#8-afficher-toutes-les-etapes-de-preparation-de-la-recette-ratatouille-dans-lordre","text":"Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, e.numero_etape, e.description FROM Recette r JOIN Etape e ON r.id_recette = e.id_recette WHERE r.nom = 'Ratatouille' ORDER BY e.numero_etape;","title":"8. Afficher toutes les \u00e9tapes de pr\u00e9paration de la recette \"Ratatouille\" dans l'ordre."},{"location":"7.%20Exercices/SQL/02-recettes/#9-trouver-toutes-les-recettes-avec-leurs-notes-moyennes-si-elles-en-ont","text":"Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, AVG(n.valeur) AS note_moyenne FROM Recette r LEFT JOIN Note n ON r.id_recette = n.id_recette GROUP BY r.id_recette, r.nom ORDER BY note_moyenne DESC NULLS LAST;","title":"9. Trouver toutes les recettes avec leurs notes moyennes (si elles en ont)."},{"location":"7.%20Exercices/SQL/02-recettes/#10-lister-tous-les-utilisateurs-et-le-nombre-de-recettes-quils-ont-creees-y-compris-ceux-qui-nen-ont-pas-cree","text":"Difficult\u00e9 : 2 Code SELECT u.prenom, u.nom, COUNT(ra.id_recette) AS nombre_recettes FROM Utilisateur u LEFT JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur GROUP BY u.id_utilisateur, u.prenom, u.nom ORDER BY nombre_recettes DESC;","title":"10. Lister tous les utilisateurs et le nombre de recettes qu'ils ont cr\u00e9\u00e9es (y compris ceux qui n'en ont pas cr\u00e9\u00e9)."},{"location":"7.%20Exercices/SQL/02-recettes/#11-afficher-les-recettes-avec-leurs-commentaires-y-compris-celles-sans-commentaire","text":"Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, c.contenu AS commentaire FROM Recette r LEFT JOIN Commentaire c ON r.id_recette = c.id_recette ORDER BY r.nom, c.date_creation;","title":"11. Afficher les recettes avec leurs commentaires, y compris celles sans commentaire."},{"location":"7.%20Exercices/SQL/02-recettes/#12-trouver-les-recettes-qui-utilisent-de-la-farine-et-leurs-quantites","text":"Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, ri.quantite, i.unite_mesure FROM Recette r JOIN RecetteIngredient ri ON r.id_recette = ri.id_recette JOIN Ingredient i ON ri.id_ingredient = i.id_ingredient WHERE i.nom = 'Farine' ORDER BY ri.quantite DESC;","title":"12. Trouver les recettes qui utilisent de la \"Farine\" et leurs quantit\u00e9s."},{"location":"7.%20Exercices/SQL/02-recettes/#13-lister-les-utilisateurs-qui-ont-a-la-fois-cree-des-recettes-et-laisse-des-commentaires","text":"Difficult\u00e9 : 2 Code SELECT DISTINCT u.prenom, u.nom FROM Utilisateur u JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur JOIN Commentaire c ON u.id_utilisateur = c.id_utilisateur ORDER BY u.nom, u.prenom;","title":"13. Lister les utilisateurs qui ont \u00e0 la fois cr\u00e9\u00e9 des recettes et laiss\u00e9 des commentaires."},{"location":"7.%20Exercices/SQL/02-recettes/#14-afficher-les-recettes-avec-leur-difficulte-et-le-nom-de-leur-auteur-triees-par-difficulte-decroissante","text":"Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, r.difficulte, u.prenom, u.nom FROM Recette r JOIN RecetteAuteur ra ON r.id_recette = ra.id_recette JOIN Utilisateur u ON ra.id_utilisateur = u.id_utilisateur ORDER BY CASE WHEN r.difficulte = 'Difficile' THEN 1 WHEN r.difficulte = 'Moyen' THEN 2 WHEN r.difficulte = 'Facile' THEN 3 END, r.nom;","title":"14. Afficher les recettes avec leur difficult\u00e9 et le nom de leur auteur, tri\u00e9es par difficult\u00e9 d\u00e9croissante."},{"location":"7.%20Exercices/SQL/02-recettes/#15-trouver-les-recettes-qui-utilisent-tous-les-ingredients-dune-salade-nicoise-supposons-que-ce-sont-thon-olive-oeufs","text":"Difficult\u00e9 : 3 Code SELECT r.nom AS nom_recette FROM Recette r WHERE NOT EXISTS (SELECT i.id_ingredient FROM Ingredient i WHERE i.nom IN ('Thon', 'Olive', 'Oeufs') AND NOT EXISTS (SELECT 1 FROM RecetteIngredient ri WHERE ri.id_recette = r.id_recette AND ri.id_ingredient = i.id_ingredient)) ORDER BY r.nom;","title":"15. Trouver les recettes qui utilisent tous les ingr\u00e9dients d'une salade ni\u00e7oise (supposons que ce sont : (Thon, Olive, Oeufs)."},{"location":"7.%20Exercices/SQL/02-recettes/#16-calculer-le-nombre-de-recettes-pour-chaque-niveau-de-difficulte","text":"Difficult\u00e9 : 2 Code SELECT difficulte, COUNT(*) AS nombre_recettes FROM Recette GROUP BY difficulte ORDER BY nombre_recettes DESC;","title":"16. Calculer le nombre de recettes pour chaque niveau de difficult\u00e9."},{"location":"7.%20Exercices/SQL/02-recettes/#17-trouver-le-temps-de-preparation-moyen-des-recettes-pour-chaque-nombre-de-portions","text":"Difficult\u00e9 : 2 Code SELECT nombre_portions, AVG(temps_preparation) AS temps_moyen_preparation FROM Recette GROUP BY nombre_portions ORDER BY nombre_portions;","title":"17. Trouver le temps de pr\u00e9paration moyen des recettes pour chaque nombre de portions."},{"location":"7.%20Exercices/SQL/02-recettes/#18-lister-les-unites-de-mesure-utilisees-et-le-nombre-dingredients-pour-chaque-unite","text":"Difficult\u00e9 : 2 Code SELECT unite_mesure, COUNT(*) AS nombre_ingredients FROM Ingredient GROUP BY unite_mesure ORDER BY nombre_ingredients DESC;","title":"18. Lister les unit\u00e9s de mesure utilis\u00e9es et le nombre d'ingr\u00e9dients pour chaque unit\u00e9."},{"location":"7.%20Exercices/SQL/02-recettes/#19-trouver-la-note-maximale-minimale-et-moyenne-pour-chaque-recette","text":"Difficult\u00e9 : 2 Code SELECT id_recette, MAX(valeur) AS note_max, MIN(valeur) AS note_min, AVG(valeur) AS note_moyenne FROM Note GROUP BY id_recette ORDER BY note_moyenne DESC;","title":"19. Trouver la note maximale, minimale et moyenne pour chaque recette."},{"location":"7.%20Exercices/SQL/02-recettes/#20-compter-le-nombre-de-commentaires-par-utilisateur","text":"Difficult\u00e9 : 2 Code SELECT id_utilisateur, COUNT(*) AS nombre_commentaires FROM Commentaire GROUP BY id_utilisateur ORDER BY nombre_commentaires DESC;","title":"20. Compter le nombre de commentaires par utilisateur."},{"location":"7.%20Exercices/SQL/02-recettes/#21-afficher-le-nom-des-recettes-et-le-nombre-dingredients-quelles-contiennent","text":"Difficult\u00e9 : 2 Code SELECT r.nom AS nom_recette, COUNT(ri.id_ingredient) AS nombre_ingredients FROM Recette r LEFT JOIN RecetteIngredient ri ON r.id_recette = ri.id_recette GROUP BY r.id_recette, r.nom ORDER BY nombre_ingredients DESC;","title":"21. Afficher le nom des recettes et le nombre d'ingr\u00e9dients qu'elles contiennent."},{"location":"7.%20Exercices/SQL/02-recettes/#22-trouver-les-utilisateurs-qui-ont-cree-le-plus-de-recettes-avec-le-nombre-de-recettes-creees","text":"Difficult\u00e9 : 3 Code SELECT u.prenom, u.nom, COUNT(ra.id_recette) AS nombre_recettes FROM Utilisateur u LEFT JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur GROUP BY u.id_utilisateur, u.prenom, u.nom ORDER BY nombre_recettes DESC;","title":"22. Trouver les utilisateurs qui ont cr\u00e9\u00e9 le plus de recettes, avec le nombre de recettes cr\u00e9\u00e9es."},{"location":"7.%20Exercices/SQL/02-recettes/#23-calculer-le-temps-de-preparation-moyen-des-recettes-pour-chaque-auteur","text":"Difficult\u00e9 : 3 Code SELECT u.prenom, u.nom, AVG(r.temps_preparation) AS temps_moyen_preparation FROM Utilisateur u JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur JOIN Recette r ON ra.id_recette = r.id_recette GROUP BY u.id_utilisateur, u.prenom, u.nom ORDER BY temps_moyen_preparation DESC;","title":"23. Calculer le temps de pr\u00e9paration moyen des recettes pour chaque auteur."},{"location":"7.%20Exercices/SQL/02-recettes/#24-lister-les-ingredients-les-plus-utilises-dans-les-recettes-avec-le-nombre-de-recettes-les-utilisant","text":"Difficult\u00e9 : 3 Code SELECT i.nom AS nom_ingredient, COUNT(DISTINCT ri.id_recette) AS nombre_recettes FROM Ingredient i JOIN RecetteIngredient ri ON i.id_ingredient = ri.id_ingredient GROUP BY i.id_ingredient, i.nom ORDER BY nombre_recettes DESC LIMIT 10;","title":"24. Lister les ingr\u00e9dients les plus utilis\u00e9s dans les recettes, avec le nombre de recettes les utilisant."},{"location":"7.%20Exercices/SQL/02-recettes/#25-trouver-la-note-moyenne-des-recettes-pour-chaque-niveau-de-difficulte","text":"Difficult\u00e9 : 3 Code SELECT r.difficulte, AVG(n.valeur) AS note_moyenne FROM Recette r LEFT JOIN Note n ON r.id_recette = n.id_recette GROUP BY r.difficulte ORDER BY note_moyenne DESC;","title":"25. Trouver la note moyenne des recettes pour chaque niveau de difficult\u00e9."},{"location":"7.%20Exercices/SQL/02-recettes/#26-trouver-les-recettes-qui-ont-un-temps-de-preparation-superieur-a-la-moyenne","text":"Difficult\u00e9 : 3 Code SELECT nom, temps_preparation FROM Recette WHERE temps_preparation > (SELECT AVG(temps_preparation) FROM Recette) ORDER BY temps_preparation DESC;","title":"26. Trouver les recettes qui ont un temps de pr\u00e9paration sup\u00e9rieur \u00e0 la moyenne."},{"location":"7.%20Exercices/SQL/02-recettes/#27-lister-les-utilisateurs-qui-ont-cree-des-recettes-mais-nont-jamais-laisse-de-commentaire","text":"Difficult\u00e9 : 3 Code SELECT DISTINCT u.prenom, u.nom FROM Utilisateur u JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur WHERE u.id_utilisateur NOT IN (SELECT DISTINCT id_utilisateur FROM Commentaire) ORDER BY u.nom, u.prenom;","title":"27. Lister les utilisateurs qui ont cr\u00e9\u00e9 des recettes, mais n'ont jamais laiss\u00e9 de commentaire."},{"location":"7.%20Exercices/SQL/02-recettes/#28-trouver-les-recettes-qui-utilisent-tous-les-ingredients-presents-dans-la-recette-quiche-lorraine","text":"Difficult\u00e9 : 4 Code SELECT r.nom FROM Recette r WHERE NOT EXISTS (SELECT ri.id_ingredient FROM RecetteIngredient ri JOIN Recette q ON ri.id_recette = q.id_recette WHERE q.nom = 'Quiche Lorraine' AND ri.id_ingredient NOT IN (SELECT id_ingredient FROM RecetteIngredient WHERE id_recette = r.id_recette)) AND r.nom != 'Quiche Lorraine' ORDER BY r.nom;","title":"28. Trouver les recettes qui utilisent tous les ingr\u00e9dients pr\u00e9sents dans la recette \"Quiche Lorraine\"."},{"location":"7.%20Exercices/SQL/02-recettes/#29-afficher-les-recettes-dont-la-note-moyenne-est-superieure-a-la-note-moyenne-globale-de-toutes-les-recettes","text":"Difficult\u00e9 : 3 Code SELECT r.nom, AVG(n.valeur) AS note_moyenne FROM Recette r JOIN Note n ON r.id_recette = n.id_recette GROUP BY r.id_recette, r.nom HAVING AVG(n.valeur) > (SELECT AVG(valeur) FROM Note) ORDER BY note_moyenne DESC;","title":"29. Afficher les recettes dont la note moyenne est sup\u00e9rieure \u00e0 la note moyenne globale de toutes les recettes."},{"location":"7.%20Exercices/SQL/02-recettes/#30-trouver-les-utilisateurs-qui-ont-commente-toutes-les-recettes-quils-ont-creees","text":"Difficult\u00e9 : 4 Code SELECT u.prenom, u.nom FROM Utilisateur u WHERE NOT EXISTS (SELECT ra.id_recette FROM RecetteAuteur ra WHERE ra.id_utilisateur = u.id_utilisateur AND NOT EXISTS (SELECT c.id_commentaire FROM Commentaire c WHERE c.id_recette = ra.id_recette AND c.id_utilisateur = u.id_utilisateur)) AND EXISTS (SELECT 1 FROM RecetteAuteur ra WHERE ra.id_utilisateur = u.id_utilisateur) ORDER BY u.nom, u.prenom;","title":"30. Trouver les utilisateurs qui ont comment\u00e9 toutes les recettes qu'ils ont cr\u00e9\u00e9es."},{"location":"7.%20Exercices/SQL/02-recettes/#31-lister-les-3-recettes-les-plus-commentees-avec-leur-nombre-de-commentaires","text":"Difficult\u00e9 : 3 Code WITH CommentCount AS (SELECT id_recette, COUNT(*) AS nb_commentaires FROM Commentaire GROUP BY id_recette) SELECT r.nom, cc.nb_commentaires FROM Recette r JOIN CommentCount cc ON r.id_recette = cc.id_recette ORDER BY cc.nb_commentaires DESC LIMIT 3;","title":"31. Lister les 3 recettes les plus comment\u00e9es avec leur nombre de commentaires."},{"location":"7.%20Exercices/SQL/02-recettes/#32-trouver-les-utilisateurs-qui-ont-cree-des-recettes-et-laisse-des-commentaires-avec-le-nombre-de-recettes-et-de-commentaires","text":"Difficult\u00e9 : 3 Code WITH RecetteCount AS (SELECT id_utilisateur, COUNT(*) AS nb_recettes FROM RecetteAuteur GROUP BY id_utilisateur), CommentCount AS (SELECT id_utilisateur, COUNT(*) AS nb_commentaires FROM Commentaire GROUP BY id_utilisateur) SELECT u.prenom, u.nom, COALESCE(rc.nb_recettes, 0) AS nb_recettes, COALESCE(cc.nb_commentaires, 0) AS nb_commentaires FROM Utilisateur u LEFT JOIN RecetteCount rc ON u.id_utilisateur = rc.id_utilisateur LEFT JOIN CommentCount cc ON u.id_utilisateur = cc.id_utilisateur WHERE rc.nb_recettes > 0 OR cc.nb_commentaires > 0 ORDER BY nb_recettes DESC, nb_commentaires DESC;","title":"32. Trouver les utilisateurs qui ont cr\u00e9\u00e9 des recettes et laiss\u00e9 des commentaires, avec le nombre de recettes et de commentaires."},{"location":"7.%20Exercices/SQL/02-recettes/#33-calculer-le-score-total-de-chaque-recette-base-sur-ses-notes-5-points-par-note-5-4-points-par-note-4-etc-et-afficher-le-top-5","text":"Difficult\u00e9 : 4 Code WITH ScoreCalculation AS (SELECT id_recette, SUM(CASE WHEN valeur = 5 THEN 5 WHEN valeur = 4 THEN 4 WHEN valeur = 3 THEN 3 WHEN valeur = 2 THEN 2 WHEN valeur = 1 THEN 1 ELSE 0 END) AS score_total FROM Note GROUP BY id_recette) SELECT r.nom, sc.score_total FROM Recette r JOIN ScoreCalculation sc ON r.id_recette = sc.id_recette ORDER BY sc.score_total DESC LIMIT 5;","title":"33. Calculer le score total de chaque recette bas\u00e9 sur ses notes (5 points par note 5, 4 points par note 4, etc.) et afficher le top 5."},{"location":"7.%20Exercices/SQL/02-recettes/#34-trouver-les-super-utilisateurs-qui-ont-cree-au-moins-2-recettes-et-laisse-au-moins-3-commentaires","text":"Difficult\u00e9 : 3 Code WITH UserActivity AS (SELECT u.id_utilisateur, COUNT(DISTINCT ra.id_recette) AS recettes_creees, COUNT(DISTINCT c.id_commentaire) AS commentaires_laisses FROM Utilisateur u LEFT JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur LEFT JOIN Commentaire c ON u.id_utilisateur = c.id_utilisateur GROUP BY u.id_utilisateur) SELECT u.prenom, u.nom, ua.recettes_creees, ua.commentaires_laisses FROM Utilisateur u JOIN UserActivity ua ON u.id_utilisateur = ua.id_utilisateur WHERE ua.recettes_creees >= 2 AND ua.commentaires_laisses >= 3 ORDER BY ua.recettes_creees DESC, ua.commentaires_laisses DESC;","title":"34. Trouver les \"super utilisateurs\" qui ont cr\u00e9\u00e9 au moins 2 recettes et laiss\u00e9 au moins 3 commentaires."},{"location":"7.%20Exercices/SQL/02-recettes/#35-creer-une-hierarchie-des-etapes-de-recette-en-supposant-que-chaque-etape-puisse-avoir-des-sous-etapes-utilisation-de-with-recursive","text":"Difficult\u00e9 : 4 Code WITH RECURSIVE EtapeHierarchy AS (SELECT id_etape, id_recette, numero_etape, description, etape_parent_id, 0 AS niveau FROM Etape WHERE etape_parent_id IS NULL UNION ALL SELECT e.id_etape, e.id_recette, e.numero_etape, e.description, e.etape_parent_id, eh.niveau + 1 FROM Etape e JOIN EtapeHierarchy eh ON e.etape_parent_id = eh.id_etape) SELECT r.nom AS nom_recette, REPEAT(' ', niveau) || eh.numero_etape || '. ' || eh.description AS etape_detaillee FROM EtapeHierarchy eh JOIN Recette r ON eh.id_recette = r.id_recette ORDER BY r.nom, eh.id_recette, eh.niveau, eh.numero_etape;","title":"35. Cr\u00e9er une hi\u00e9rarchie des \u00e9tapes de recette, en supposant que chaque \u00e9tape puisse avoir des sous-\u00e9tapes (utilisation de WITH RECURSIVE)."},{"location":"7.%20Exercices/SQL/02-recettes/#36-lister-tous-les-noms-dutilisateurs-et-de-recettes-dans-une-seule-colonne-en-indiquant-sil-sagit-dun-utilisateur-ou-dune-recette","text":"Difficult\u00e9 : 3 Code SELECT nom AS nom, 'Utilisateur' AS type FROM Utilisateur UNION SELECT nom, 'Recette' AS type FROM Recette ORDER BY type, nom;","title":"36. Lister tous les noms d'utilisateurs et de recettes dans une seule colonne, en indiquant s'il s'agit d'un utilisateur ou d'une recette."},{"location":"7.%20Exercices/SQL/02-recettes/#37-categoriser-les-recettes-en-fonction-de-leur-temps-total-de-preparation-preparation-cuisson","text":"Difficult\u00e9 : 3 Utilisation de CASE WHEN 'Rapide' : < 30 minutes 'Moyen' : >= 30 et < 60 minutes 'Long' : >= 60 minutes Code SELECT nom, temps_preparation + temps_cuisson AS temps_total, CASE WHEN temps_preparation + temps_cuisson < 30 THEN 'Rapide' WHEN temps_preparation + temps_cuisson BETWEEN 30 AND 60 THEN 'Moyen' ELSE 'Long' END AS categorie_temps FROM Recette ORDER BY temps_total;","title":"37. Cat\u00e9goriser les recettes en fonction de leur temps total de pr\u00e9paration (pr\u00e9paration + cuisson)."},{"location":"7.%20Exercices/SQL/02-recettes/#38-lister-chaque-recette-avec-tous-ses-ingredients-concatenes-dans-une-seule-chaine","text":"Difficult\u00e9 : 3 Utilisation de STRING_AGG . Code SELECT r.nom, STRING_AGG(i.nom, ', ' ORDER BY i.nom) AS ingredients FROM Recette r JOIN RecetteIngredient ri ON r.id_recette = ri.id_recette JOIN Ingredient i ON ri.id_ingredient = i.id_ingredient GROUP BY r.id_recette, r.nom ORDER BY r.nom;","title":"38. Lister chaque recette avec tous ses ingr\u00e9dients concat\u00e9n\u00e9s dans une seule cha\u00eene."},{"location":"7.%20Exercices/SQL/02-recettes/#39-classer-les-recettes-par-difficulte-et-leur-attribuer-un-rang-base-sur-leur-temps-de-preparation","text":"Difficult\u00e9 : 3 Utilisation des \"WINDOW FUNCTIONS\" . Code SELECT nom, difficulte, temps_preparation, RANK() OVER (PARTITION BY difficulte ORDER BY temps_preparation) AS rang_temps_prep FROM Recette ORDER BY difficulte, rang_temps_prep;","title":"39. Classer les recettes par difficult\u00e9 et leur attribuer un rang bas\u00e9 sur leur temps de pr\u00e9paration."},{"location":"7.%20Exercices/SQL/02-recettes/#40-pour-chaque-utilisateur-trouver-sa-recette-la-mieux-notee","text":"Difficult\u00e9 : 4 Utilisation de LATERAL JOIN Code SELECT u.nom AS nom_utilisateur, best_recipe.nom AS meilleure_recette, avg_note FROM Utilisateur u LEFT JOIN LATERAL ( SELECT ra.id_utilisateur, r.nom, AVG(n.valeur) AS avg_note FROM RecetteAuteur ra JOIN Recette r ON ra.id_recette = r.id_recette LEFT JOIN Note n ON r.id_recette = n.id_recette WHERE ra.id_utilisateur = u.id_utilisateur GROUP BY ra.id_utilisateur, r.id_recette, r.nom ORDER BY avg_note DESC NULLS LAST LIMIT 1 ) AS best_recipe ON true ORDER BY avg_note DESC NULLS LAST;","title":"40. Pour chaque utilisateur, trouver sa recette la mieux not\u00e9e."},{"location":"7.%20Exercices/SQL/02-recettes/#41-comparer-le-nombre-de-recettes-creees-et-le-nombre-de-commentaires-laisses-par-chaque-utilisateur-en-incluant-tous-les-utilisateurs","text":"Difficult\u00e9 : 4 Utilisation de FULL OUTER JOIN Code SELECT COALESCE(u1.nom, u2.nom) AS nom_utilisateur, COUNT(DISTINCT ra.id_recette) AS recettes_creees, COUNT(DISTINCT c.id_commentaire) AS commentaires_laisses FROM (SELECT id_utilisateur, nom FROM Utilisateur) u1 FULL OUTER JOIN RecetteAuteur ra ON u1.id_utilisateur = ra.id_utilisateur FULL OUTER JOIN (SELECT id_utilisateur, nom FROM Utilisateur) u2 ON u1.id_utilisateur = u2.id_utilisateur FULL OUTER JOIN Commentaire c ON u2.id_utilisateur = c.id_utilisateur GROUP BY COALESCE(u1.id_utilisateur, u2.id_utilisateur), COALESCE(u1.nom, u2.nom) ORDER BY recettes_creees DESC, commentaires_laisses DESC;","title":"41. Comparer le nombre de recettes cr\u00e9\u00e9es et le nombre de commentaires laiss\u00e9s par chaque utilisateur, en incluant tous les utilisateurs."},{"location":"7.%20Exercices/SQL/02-recettes/#42-compter-le-nombre-de-recettes-creees-par-mois-au-cours-de-la-derniere-annee","text":"Difficult\u00e9 : 3 Code SELECT DATE_TRUNC('month', date_creation) AS mois, COUNT(*) AS nombre_recettes FROM Recette WHERE date_creation >= CURRENT_DATE - INTERVAL '1 year' GROUP BY DATE_TRUNC('month', date_creation) ORDER BY mois;","title":"42. Compter le nombre de recettes cr\u00e9\u00e9es par mois au cours de la derni\u00e8re ann\u00e9e."},{"location":"7.%20Exercices/SQL/02-recettes/#43-calculer-la-note-moyenne-des-recettes-par-saison","text":"Difficult\u00e9 : 3 Code SELECT CASE WHEN EXTRACT(MONTH FROM n.date_creation) IN (12, 1, 2) THEN 'Hiver' WHEN EXTRACT(MONTH FROM n.date_creation) IN (3, 4, 5) THEN 'Printemps' WHEN EXTRACT(MONTH FROM n.date_creation) IN (6, 7, 8) THEN '\u00c9t\u00e9' ELSE 'Automne' END AS saison, AVG(n.valeur) AS note_moyenne FROM Note n GROUP BY CASE WHEN EXTRACT(MONTH FROM n.date_creation) IN (12, 1, 2) THEN 'Hiver' WHEN EXTRACT(MONTH FROM n.date_creation) IN (3, 4, 5) THEN 'Printemps' WHEN EXTRACT(MONTH FROM n.date_creation) IN (6, 7, 8) THEN '\u00c9t\u00e9' ELSE 'Automne' END ORDER BY note_moyenne DESC;","title":"43. Calculer la note moyenne des recettes par saison."},{"location":"7.%20Exercices/SQL/02-recettes/#44-trouver-le-jour-de-la-semaine-ou-les-utilisateurs-laissent-le-plus-de-commentaires","text":"Difficult\u00e9 : 3 Code SELECT TO_CHAR(date_creation, 'Day') AS jour_semaine, COUNT(*) AS nombre_commentaires FROM Commentaire GROUP BY TO_CHAR(date_creation, 'Day'), EXTRACT(DOW FROM date_creation) ORDER BY EXTRACT(DOW FROM date_creation);","title":"44. Trouver le jour de la semaine o\u00f9 les utilisateurs laissent le plus de commentaires."},{"location":"7.%20Exercices/SQL/02-recettes/#45-calculer-le-nombre-moyen-de-recettes-creees-par-mois-pour-chaque-annee","text":"Difficult\u00e9 : 4 Code SELECT EXTRACT(YEAR FROM date_creation) AS annee, AVG(recettes_par_mois) AS moyenne_recettes_par_mois FROM (SELECT DATE_TRUNC('month', date_creation) AS mois, COUNT(*) AS recettes_par_mois FROM Recette GROUP BY DATE_TRUNC('month', date_creation)) AS sous_requete GROUP BY EXTRACT(YEAR FROM mois) ORDER BY annee;","title":"45. Calculer le nombre moyen de recettes cr\u00e9\u00e9es par mois pour chaque ann\u00e9e."},{"location":"7.%20Exercices/SQL/02-recettes/#46-identifier-les-utilisateurs-qui-ont-ete-les-plus-actifs-en-termes-de-commentaires-au-cours-des-30-derniers-jours","text":"Difficult\u00e9 : 3 Code SELECT u.nom, u.prenom, COUNT(*) AS nombre_commentaires FROM Utilisateur u JOIN Commentaire c ON u.id_utilisateur = c.id_utilisateur WHERE c.date_creation >= CURRENT_DATE - INTERVAL '30 days' GROUP BY u.id_utilisateur, u.nom, u.prenom ORDER BY nombre_commentaires DESC LIMIT 5;","title":"46. Identifier les utilisateurs qui ont \u00e9t\u00e9 les plus actifs (en termes de commentaires) au cours des 30 derniers jours."},{"location":"7.%20Exercices/SQL/02-recettes/#47-comparer-le-nombre-de-recettes-creees-cette-annee-par-rapport-a-lannee-precedente-par-trimestre","text":"Difficult\u00e9 : 4 Code WITH recettes_par_trimestre AS (SELECT EXTRACT(YEAR FROM date_creation) AS annee, EXTRACT(QUARTER FROM date_creation) AS trimestre, COUNT(*) AS nombre_recettes FROM Recette WHERE (date_creation >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year') GROUP BY EXTRACT(YEAR FROM date_creation), EXTRACT(QUARTER FROM date_creation)) SELECT r1.trimestre, r1.nombre_recettes AS recettes_annee_precedente, r2.nombre_recettes AS recettes_annee_courante FROM recettes_par_trimestre r1 LEFT JOIN recettes_par_trimestre r2 ON r1.trimestre = r2.trimestre AND r2.annee = EXTRACT(YEAR FROM CURRENT_DATE) WHERE r1.annee = EXTRACT(YEAR FROM CURRENT_DATE) - 1 ORDER BY r1.trimestre;","title":"47. Comparer le nombre de recettes cr\u00e9\u00e9es cette ann\u00e9e par rapport \u00e0 l'ann\u00e9e pr\u00e9c\u00e9dente, par trimestre."},{"location":"7.%20Exercices/SQL/03-northwind/","text":"BD Northwind Cr\u00e9ation northwind_create.sql DEA Code @startuml '!theme plain top to bottom direction skinparam linetype ortho skinparam entityFontSize 18 skinparam entityFontName Source Code Pro hide empty methods hide empty fields entity categories { category_name: varchar(15) description: text picture: bytea category_id: smallint } entity customer_customer_demo { customer_id: varchar(5) customer_type_id: varchar(5) } entity customer_demographics { customer_desc: text customer_type_id: varchar(5) } entity customers { company_name: varchar(40) contact_name: varchar(30) contact_title: varchar(30) address: varchar(60) city: varchar(15) region: varchar(15) postal_code: varchar(10) country: varchar(15) phone: varchar(24) fax: varchar(24) customer_id: varchar(5) } entity employee_territories { employee_id: smallint territory_id: varchar(20) } entity employees { last_name: varchar(20) first_name: varchar(10) title: varchar(30) title_of_courtesy: varchar(25) birth_date: date hire_date: date address: varchar(60) city: varchar(15) region: varchar(15) postal_code: varchar(10) country: varchar(15) home_phone: varchar(24) extension: varchar(4) photo: bytea notes: text reports_to: smallint photo_path: varchar(255) employee_id: smallint } entity order_details { unit_price: real quantity: smallint discount: real order_id: smallint product_id: smallint } entity orders { customer_id: varchar(5) employee_id: smallint order_date: date required_date: date shipped_date: date ship_via: smallint freight: real ship_name: varchar(40) ship_address: varchar(60) ship_city: varchar(15) ship_region: varchar(15) ship_postal_code: varchar(10) ship_country: varchar(15) order_id: smallint } entity products { product_name: varchar(40) supplier_id: smallint category_id: smallint quantity_per_unit: varchar(20) unit_price: real units_in_stock: smallint units_on_order: smallint reorder_level: smallint discontinued: integer product_id: smallint } entity region { region_description: varchar(60) region_id: smallint } entity shippers { company_name: varchar(40) phone: varchar(24) shipper_id: smallint } entity suppliers { company_name: varchar(40) contact_name: varchar(30) contact_title: varchar(30) address: varchar(60) city: varchar(15) region: varchar(15) postal_code: varchar(10) country: varchar(15) phone: varchar(24) fax: varchar(24) homepage: text supplier_id: smallint } entity territories { territory_description: varchar(60) region_id: smallint territory_id: varchar(20) } entity us_states { state_name: varchar(100) state_abbr: varchar(2) state_region: varchar(50) state_id: smallint } customer_customer_demo -[#595959,plain]-^ customer_demographics : \"customer_type_id\" customer_customer_demo -[#595959,plain]-^ customers : \"customer_id\" employee_territories -[#595959,plain]-^ employees : \"employee_id\" employee_territories -[#595959,plain]-^ territories : \"territory_id\" employees -[#595959,plain]-^ employees : \"reports_to:employee_id\" order_details -[#595959,plain]-^ orders : \"order_id\" order_details -[#595959,plain]-^ products : \"product_id\" orders -[#595959,plain]-^ customers : \"customer_id\" orders -[#595959,plain]-^ employees : \"employee_id\" orders -[#595959,plain]-^ shippers : \"ship_via:shipper_id\" categories ^-[#595959,plain]- products : \"category_id\" products -[#595959,plain]-^ suppliers : \"supplier_id\" territories -[#595959,plain]-^ region : \"region_id\" @enduml Requ\u00eates Bien s\u00fbr, je vais vous proposer quelques questions simples bas\u00e9es sur le diagramme entit\u00e9-association (DEA) de la base de donn\u00e9es Northwind que vous avez fourni. Ces questions se concentreront sur des requ\u00eates impliquant une seule table, sans jointures ni regroupements, mais avec la possibilit\u00e9 d'utiliser des fonctions d'agr\u00e9gation. Je vais \u00e9galement fournir les r\u00e9ponses sous forme de requ\u00eates SQL pour PostgreSQL. 1. Listez tous les produits dont le prix unitaire est sup\u00e9rieur \u00e0 50. Difficult\u00e9 : 1 Code SELECT product_name, unit_price FROM products WHERE unit_price > 50 ORDER BY unit_price DESC; 2. Combien y a-t-il d'employ\u00e9s au total dans l'entreprise ? Difficult\u00e9 : 1 Code SELECT COUNT(*) AS total_employees FROM employees; 3. Quels sont les 5 produits les plus chers ? Difficult\u00e9 : 1 Code SELECT product_name, unit_price FROM products ORDER BY unit_price DESC LIMIT 5; Difficult\u00e9 : 3 Code WITH ranked_products AS (SELECT product_name, unit_price, DENSE_RANK() OVER (ORDER BY unit_price DESC) as price_rank FROM products) SELECT product_name, unit_price FROM ranked_products WHERE price_rank <= 5 ORDER BY unit_price DESC, product_name; 4. Listez tous les clients bas\u00e9s en France. Difficult\u00e9 : 1 Code SELECT company_name, contact_name, city FROM customers WHERE country = 'France'; 5. Quel est le prix moyen des produits ? Difficult\u00e9 : 1 Code SELECT AVG(unit_price) AS average_price FROM products; 6. Listez tous les fournisseurs qui ne sont pas bas\u00e9s aux \u00c9tats-Unis. Difficult\u00e9 : 1 Code SELECT company_name, country FROM suppliers WHERE country != 'USA'; 7. Combien de produits sont actuellement en rupture de stock ? Difficult\u00e9 : 1 Code SELECT COUNT(*) AS out_of_stock_products FROM products WHERE units_in_stock = 0; 8. Quels sont les employ\u00e9s embauch\u00e9s apr\u00e8s le 1er janvier 1993 ? Difficult\u00e9 : 1 Code SELECT first_name, last_name, hire_date FROM employees WHERE hire_date > '1993-01-01' ORDER BY hire_date; 9. Quel est le produit le moins cher en stock ? Difficult\u00e9 : 1 Code SELECT product_name, unit_price FROM products WHERE units_in_stock > 0 ORDER BY unit_price ASC LIMIT 1; Difficult\u00e9 : 2 Code SELECT product_name, unit_price FROM products WHERE units_in_stock > 0 AND unit_price = (SELECT MIN(unit_price) FROM products WHERE units_in_stock > 0) ORDER BY product_name; 10. Listez toutes les cat\u00e9gories de produits par ordre alphab\u00e9tique. Difficult\u00e9 : 1 Code SELECT category_name FROM categories ORDER BY category_name ASC; 11. Listez tous les produits avec leur cat\u00e9gorie correspondante. Difficult\u00e9 : 2 Code SELECT p.product_name, c.category_name FROM products p JOIN categories c ON p.category_id = c.category_id ORDER BY c.category_name, p.product_name; 12. Affichez les noms des employ\u00e9s et les noms de leurs sup\u00e9rieurs directs. Difficult\u00e9 : 2 Code SELECT e.first_name || ' ' || e.last_name AS employee_name, m.first_name || ' ' || m.last_name AS manager_name FROM employees e LEFT JOIN employees m ON e.reports_to = m.employee_id ORDER BY manager_name, employee_name; 13. Listez tous les clients avec leurs commandes, y compris ceux qui n'ont pas encore pass\u00e9 de commande. Difficult\u00e9 : 2 Code SELECT c.company_name, o.order_id, o.order_date FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id ORDER BY c.company_name, o.order_date; 14. Affichez les d\u00e9tails des produits command\u00e9s dans la commande num\u00e9ro 10248. Difficult\u00e9 : 2 Code SELECT p.product_name, od.quantity, od.unit_price FROM order_details od JOIN products p ON od.product_id = p.product_id WHERE od.order_id = 10248 ORDER BY p.product_name; 15. Listez tous les employ\u00e9s avec leurs territoires assign\u00e9s. Difficult\u00e9 : 2 Code SELECT e.first_name || ' ' || e.last_name AS employee_name, t.territory_description FROM employees e JOIN employee_territories et ON e.employee_id = et.employee_id JOIN territories t ON et.territory_id = t.territory_id ORDER BY employee_name, t.territory_description; 16. Affichez les noms des fournisseurs et les noms des produits qu'ils fournissent pour la cat\u00e9gorie 'Beverages'. Difficult\u00e9 : 3 Code SELECT s.company_name AS supplier_name, p.product_name FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id JOIN categories c ON p.category_id = c.category_id WHERE c.category_name = 'Beverages' ORDER BY s.company_name, p.product_name; 17. Listez toutes les commandes pass\u00e9es par le client 'QUICK-Stop' en 1997. Difficult\u00e9 : 2 Code SELECT o.order_id, o.order_date, e.first_name || ' ' || e.last_name AS employee_name FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN employees e ON o.employee_id = e.employee_id WHERE c.company_name = 'QUICK-Stop' AND EXTRACT(YEAR FROM o.order_date) = 1997 ORDER BY o.order_date; 18. Affichez les produits et leurs fournisseurs pour tous les produits qui sont en rupture de stock. Difficult\u00e9 : 2 Code SELECT p.product_name, s.company_name AS supplier_name, p.units_in_stock FROM products p JOIN suppliers s ON p.supplier_id = s.supplier_id WHERE p.units_in_stock = 0 ORDER BY s.company_name, p.product_name; 19. Listez tous les employ\u00e9s et le nombre de territoires qui leur sont assign\u00e9s. Difficult\u00e9 : 2 Code SELECT e.first_name || ' ' || e.last_name AS employee_name, COUNT(et.territory_id) AS territory_count FROM employees e LEFT JOIN employee_territories et ON e.employee_id = et.employee_id GROUP BY e.employee_id, employee_name ORDER BY employee_name; 20. Affichez les d\u00e9tails de la commande la plus r\u00e9cente pour chaque client. Difficult\u00e9 : 3 Code WITH latest_orders AS (SELECT customer_id, MAX(order_date) AS max_order_date FROM orders GROUP BY customer_id) SELECT c.company_name, o.order_id, o.order_date FROM customers c JOIN latest_orders lo ON c.customer_id = lo.customer_id JOIN orders o ON lo.customer_id = o.customer_id AND lo.max_order_date = o.order_date ORDER BY c.company_name; 21. Calculez le nombre total de commandes par client. Difficult\u00e9 : 2 Code SELECT c.company_name, COUNT(o.order_id) AS total_orders FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.company_name ORDER BY total_orders DESC; 22. Trouvez le chiffre d'affaires total par cat\u00e9gorie de produits. Difficult\u00e9 : 3 Code SELECT c.category_name, TRUNC(SUM(od.quantity * od.unit_price * (1 - od.discount))::numeric, 2) AS total_revenue FROM categories c JOIN products p ON c.category_id = p.category_id JOIN order_details od ON p.product_id = od.product_id GROUP BY c.category_id, c.category_name ORDER BY total_revenue DESC; 23. Listez les employ\u00e9s et le nombre de commandes qu'ils ont g\u00e9r\u00e9es en 1997. Difficult\u00e9 : 3 Code SELECT e.first_name || ' ' || e.last_name AS employee_name, COUNT(o.order_id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.employee_id = o.employee_id AND EXTRACT(YEAR FROM o.order_date) = 1997 GROUP BY e.employee_id, employee_name ORDER BY orders_handled DESC; 24. Calculez le prix moyen des produits par fournisseur. Difficult\u00e9 : 2 Code SELECT s.company_name AS supplier_name, TRUNC(AVG(p.unit_price)::numeric, 2) AS average_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id GROUP BY s.supplier_id, s.company_name ORDER BY average_price DESC; 25. Trouvez les 5 produits les plus vendus en termes de quantit\u00e9. Difficult\u00e9 : 2 Code SELECT p.product_name, SUM(od.quantity) AS total_quantity_sold FROM products p JOIN order_details od ON p.product_id = od.product_id GROUP BY p.product_id, p.product_name ORDER BY total_quantity_sold DESC LIMIT 5; Difficult\u00e9 : 3 Code WITH product_sales AS (SELECT p.product_id, p.product_name, SUM(od.quantity) AS total_quantity_sold FROM products p JOIN order_details od ON p.product_id = od.product_id GROUP BY p.product_id, p.product_name), ranked_products AS (SELECT product_id, product_name, total_quantity_sold, DENSE_RANK() OVER (ORDER BY total_quantity_sold DESC) AS sales_rank FROM product_sales) SELECT product_id, product_name, total_quantity_sold FROM ranked_products WHERE sales_rank <= 5 ORDER BY total_quantity_sold DESC, product_name; 26. Calculez le nombre moyen de jours entre la date de commande et la date d'exp\u00e9dition pour chaque transporteur. Difficult\u00e9 : 3 Code SELECT s.company_name AS shipper_name, ROUND(AVG(o.shipped_date - o.order_date), 2) AS avg_shipping_days FROM shippers s JOIN orders o ON s.shipper_id = o.ship_via WHERE o.shipped_date IS NOT NULL GROUP BY s.shipper_id, s.company_name ORDER BY avg_shipping_days; 27. Identifiez les clients qui ont pass\u00e9 des commandes totalisant plus de 10000 en valeur. Difficult\u00e9 : 3 Code SELECT c.company_name, TRUNC(SUM(od.quantity * od.unit_price * (1 - od.discount))::numeric, 2) AS total_order_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_id, c.company_name HAVING SUM(od.quantity * od.unit_price * (1 - od.discount)) > 10000 ORDER BY total_order_value DESC; 28. Calculez le nombre de produits diff\u00e9rents command\u00e9s par chaque client. Difficult\u00e9 : 3 Code SELECT c.company_name, COUNT(DISTINCT od.product_id) AS unique_products_ordered FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_id, c.company_name ORDER BY unique_products_ordered DESC; 29. Trouvez le chiffre d'affaires total par ann\u00e9e et par mois. Difficult\u00e9 : 3 Code SELECT EXTRACT(YEAR FROM o.order_date) AS year, EXTRACT(MONTH FROM o.order_date) AS month, TRUNC(SUM(od.quantity * od.unit_price * (1 - od.discount))::numeric, 2) AS total_revenue FROM orders o JOIN order_details od ON o.order_id = od.order_id GROUP BY EXTRACT(YEAR FROM o.order_date), EXTRACT(MONTH FROM o.order_date) ORDER BY year, month; 30. Identifiez les cat\u00e9gories de produits qui ont g\u00e9n\u00e9r\u00e9 le plus de revenus par r\u00e9gion. Difficult\u00e9 : 4 Code SELECT c.category_name, r.region_description, TRUNC(SUM(od.quantity * od.unit_price * (1 - od.discount))::numeric, 2) AS total_revenue FROM categories c JOIN products p ON c.category_id = p.category_id JOIN order_details od ON p.product_id = od.product_id JOIN orders o ON od.order_id = o.order_id JOIN customers cu ON o.customer_id = cu.customer_id JOIN employees e ON o.employee_id = e.employee_id JOIN employee_territories et ON e.employee_id = et.employee_id JOIN territories t ON et.territory_id = t.territory_id JOIN region r ON t.region_id = r.region_id GROUP BY c.category_id, c.category_name, r.region_id, r.region_description ORDER BY r.region_description, total_revenue DESC; 31. Trouvez les produits qui n'ont jamais \u00e9t\u00e9 command\u00e9s. Difficult\u00e9 : 2 Code SELECT p.product_id, p.product_name FROM products p LEFT JOIN order_details od ON p.product_id = od.product_id WHERE od.order_id IS NULL ORDER BY p.product_id; 32. Calculez le rang des employ\u00e9s en fonction du nombre de commandes qu'ils ont g\u00e9r\u00e9es. Difficult\u00e9 : 3 Code SELECT e.employee_id, e.first_name || ' ' || e.last_name AS employee_name, COUNT(o.order_id) AS order_count, RANK() OVER (ORDER BY COUNT(o.order_id) DESC) AS employee_rank FROM employees e LEFT JOIN orders o ON e.employee_id = o.employee_id GROUP BY e.employee_id, employee_name ORDER BY employee_rank, employee_name; 33. Identifiez les clients qui ont command\u00e9 tous les produits d'une cat\u00e9gorie sp\u00e9cifique (par exemple, 'Beverages'). Difficult\u00e9 : 4 Code WITH beverage_products AS (SELECT product_id FROM products JOIN categories ON products.category_id = categories.category_id WHERE category_name = 'Beverages') SELECT c.customer_id, c.company_name FROM customers c WHERE NOT EXISTS (SELECT bp.product_id FROM beverage_products bp WHERE NOT EXISTS (SELECT 1 FROM orders o JOIN order_details od ON o.order_id = od.order_id WHERE o.customer_id = c.customer_id AND od.product_id = bp.product_id)) ORDER BY c.company_name; 34. Calculez la moyenne mobile sur 3 mois des ventes totales. Difficult\u00e9 : 4 Code WITH monthly_sales AS (SELECT DATE_TRUNC('month', o.order_date) AS sale_month, SUM(od.quantity * od.unit_price * (1 - od.discount)) AS total_sales FROM orders o JOIN order_details od ON o.order_id = od.order_id GROUP BY DATE_TRUNC('month', o.order_date)) SELECT sale_month, total_sales, AVG(total_sales) OVER ( ORDER BY sale_month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW ) AS moving_average FROM monthly_sales ORDER BY sale_month; 35. Trouvez les paires de produits qui sont toujours command\u00e9s ensemble. Difficult\u00e9 : 5 Code WITH product_pairs AS (SELECT od1.product_id AS product1_id, od2.product_id AS product2_id, COUNT(DISTINCT od1.order_id) AS order_count FROM order_details od1 JOIN order_details od2 ON od1.order_id = od2.order_id AND od1.product_id < od2.product_id GROUP BY od1.product_id, od2.product_id) SELECT p1.product_name AS product1_name, p2.product_name AS product2_name, pp.order_count FROM product_pairs pp JOIN products p1 ON pp.product1_id = p1.product_id JOIN products p2 ON pp.product2_id = p2.product_id WHERE pp.order_count = (SELECT COUNT(DISTINCT order_id) FROM orders) ORDER BY p1.product_name, p2.product_name; 36. Calculez le pourcentage de contribution de chaque produit au chiffre d'affaires total. Difficult\u00e9 : 4 Code WITH product_sales AS (SELECT p.product_id, p.product_name, SUM(od.quantity * od.unit_price * (1 - od.discount)) AS product_revenue FROM products p JOIN order_details od ON p.product_id = od.product_id GROUP BY p.product_id, p.product_name), total_sales AS (SELECT SUM(product_revenue) AS total_revenue FROM product_sales) SELECT ps.product_name, ps.product_revenue, ROUND((ps.product_revenue / ts.total_revenue * 100)::numeric, 2) AS revenue_percentage FROM product_sales ps CROSS JOIN total_sales ts ORDER BY revenue_percentage DESC; 37. Identifiez les clients qui ont augment\u00e9 leurs achats d'une ann\u00e9e \u00e0 l'autre. Difficult\u00e9 : 4 Code WITH yearly_customer_purchases AS (SELECT c.customer_id, c.company_name, EXTRACT(YEAR FROM o.order_date) AS order_year, SUM(od.quantity * od.unit_price * (1 - od.discount)) AS total_purchase FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_id, c.company_name, EXTRACT(YEAR FROM o.order_date)) SELECT ycp1.customer_id, ycp1.company_name, ycp1.order_year AS year1, ycp1.total_purchase AS purchase_year1, ycp2.order_year AS year2, ycp2.total_purchase AS purchase_year2, TRUNC(((ycp2.total_purchase - ycp1.total_purchase) / ycp1.total_purchase * 100)::numeric, 2) AS growth_percentage FROM yearly_customer_purchases ycp1 JOIN yearly_customer_purchases ycp2 ON ycp1.customer_id = ycp2.customer_id AND ycp2.order_year = ycp1.order_year + 1 WHERE ycp2.total_purchase > ycp1.total_purchase ORDER BY growth_percentage DESC; 38. Trouvez la s\u00e9quence la plus longue de jours cons\u00e9cutifs avec des commandes. Difficult\u00e9 : 4 Code WITH date_diff AS (SELECT order_date, order_date - LAG(order_date) OVER (ORDER BY order_date) AS diff FROM orders), sequences AS (SELECT order_date, SUM(CASE WHEN diff = 1 THEN 0 ELSE 1 END) OVER (ORDER BY order_date) AS seq FROM date_diff) SELECT MIN(order_date) AS start_date, MAX(order_date) AS end_date, COUNT(*) AS consecutive_days FROM sequences GROUP BY seq ORDER BY consecutive_days DESC LIMIT 1; Difficult\u00e9 : 5 Code WITH date_diff AS (SELECT order_date, order_date - LAG(order_date) OVER (ORDER BY order_date) AS diff FROM orders), sequences AS (SELECT order_date, SUM(CASE WHEN diff = 1 THEN 0 ELSE 1 END) OVER (ORDER BY order_date) AS seq FROM date_diff), sequence_lengths AS (SELECT seq, MIN(order_date) AS start_date, MAX(order_date) AS end_date, COUNT(*) AS consecutive_days FROM sequences GROUP BY seq), max_length AS (SELECT MAX(consecutive_days) AS max_consecutive_days FROM sequence_lengths) SELECT sl.start_date, sl.end_date, sl.consecutive_days FROM sequence_lengths sl JOIN max_length ml ON sl.consecutive_days = ml.max_consecutive_days ORDER BY sl.start_date; 39. Calculez le temps moyen entre les commandes pour chaque client. Difficult\u00e9 : 4 Code WITH customer_order_dates AS (SELECT customer_id, order_date, LAG(order_date) OVER (PARTITION BY customer_id ORDER BY order_date) AS prev_order_date FROM orders) SELECT c.customer_id, c.company_name, ROUND(AVG(cod.order_date - cod.prev_order_date)::numeric, 2) AS avg_days_between_orders FROM customers c JOIN customer_order_dates cod ON c.customer_id = cod.customer_id WHERE cod.prev_order_date IS NOT NULL GROUP BY c.customer_id, c.company_name ORDER BY avg_days_between_orders; 40. Identifiez les produits dont les ventes ont augment\u00e9 chaque mois sur une p\u00e9riode d'au moins 3 mois cons\u00e9cutifs. Difficult\u00e9 : 5 Code WITH monthly_product_sales AS (SELECT p.product_id, p.product_name, DATE_TRUNC('month', o.order_date) AS sale_month, SUM(od.quantity * od.unit_price * (1 - od.discount)) AS monthly_sales FROM products p JOIN order_details od ON p.product_id = od.product_id JOIN orders o ON od.order_id = o.order_id GROUP BY p.product_id, p.product_name, DATE_TRUNC('month', o.order_date)), sales_growth AS (SELECT product_id, product_name, sale_month, monthly_sales, LAG(monthly_sales) OVER (PARTITION BY product_id ORDER BY sale_month) AS prev_month_sales, CASE WHEN monthly_sales > LAG(monthly_sales) OVER (PARTITION BY product_id ORDER BY sale_month) THEN 1 ELSE 0 END AS is_increase FROM monthly_product_sales), consecutive_increases AS (SELECT product_id, product_name, sale_month, monthly_sales, SUM(CASE WHEN is_increase = 0 THEN 1 ELSE 0 END) OVER (PARTITION BY product_id ORDER BY sale_month) AS grp FROM sales_growth WHERE is_increase = 1) SELECT DISTINCT product_id, product_name FROM (SELECT product_id, product_name, grp, COUNT(*) OVER (PARTITION BY product_id, grp) AS consecutive_count FROM consecutive_increases) subq WHERE consecutive_count >= 3 ORDER BY product_id;","title":"BD Northwind"},{"location":"7.%20Exercices/SQL/03-northwind/#bd-northwind","text":"","title":"BD Northwind"},{"location":"7.%20Exercices/SQL/03-northwind/#creation","text":"northwind_create.sql","title":"Cr\u00e9ation"},{"location":"7.%20Exercices/SQL/03-northwind/#dea","text":"Code @startuml '!theme plain top to bottom direction skinparam linetype ortho skinparam entityFontSize 18 skinparam entityFontName Source Code Pro hide empty methods hide empty fields entity categories { category_name: varchar(15) description: text picture: bytea category_id: smallint } entity customer_customer_demo { customer_id: varchar(5) customer_type_id: varchar(5) } entity customer_demographics { customer_desc: text customer_type_id: varchar(5) } entity customers { company_name: varchar(40) contact_name: varchar(30) contact_title: varchar(30) address: varchar(60) city: varchar(15) region: varchar(15) postal_code: varchar(10) country: varchar(15) phone: varchar(24) fax: varchar(24) customer_id: varchar(5) } entity employee_territories { employee_id: smallint territory_id: varchar(20) } entity employees { last_name: varchar(20) first_name: varchar(10) title: varchar(30) title_of_courtesy: varchar(25) birth_date: date hire_date: date address: varchar(60) city: varchar(15) region: varchar(15) postal_code: varchar(10) country: varchar(15) home_phone: varchar(24) extension: varchar(4) photo: bytea notes: text reports_to: smallint photo_path: varchar(255) employee_id: smallint } entity order_details { unit_price: real quantity: smallint discount: real order_id: smallint product_id: smallint } entity orders { customer_id: varchar(5) employee_id: smallint order_date: date required_date: date shipped_date: date ship_via: smallint freight: real ship_name: varchar(40) ship_address: varchar(60) ship_city: varchar(15) ship_region: varchar(15) ship_postal_code: varchar(10) ship_country: varchar(15) order_id: smallint } entity products { product_name: varchar(40) supplier_id: smallint category_id: smallint quantity_per_unit: varchar(20) unit_price: real units_in_stock: smallint units_on_order: smallint reorder_level: smallint discontinued: integer product_id: smallint } entity region { region_description: varchar(60) region_id: smallint } entity shippers { company_name: varchar(40) phone: varchar(24) shipper_id: smallint } entity suppliers { company_name: varchar(40) contact_name: varchar(30) contact_title: varchar(30) address: varchar(60) city: varchar(15) region: varchar(15) postal_code: varchar(10) country: varchar(15) phone: varchar(24) fax: varchar(24) homepage: text supplier_id: smallint } entity territories { territory_description: varchar(60) region_id: smallint territory_id: varchar(20) } entity us_states { state_name: varchar(100) state_abbr: varchar(2) state_region: varchar(50) state_id: smallint } customer_customer_demo -[#595959,plain]-^ customer_demographics : \"customer_type_id\" customer_customer_demo -[#595959,plain]-^ customers : \"customer_id\" employee_territories -[#595959,plain]-^ employees : \"employee_id\" employee_territories -[#595959,plain]-^ territories : \"territory_id\" employees -[#595959,plain]-^ employees : \"reports_to:employee_id\" order_details -[#595959,plain]-^ orders : \"order_id\" order_details -[#595959,plain]-^ products : \"product_id\" orders -[#595959,plain]-^ customers : \"customer_id\" orders -[#595959,plain]-^ employees : \"employee_id\" orders -[#595959,plain]-^ shippers : \"ship_via:shipper_id\" categories ^-[#595959,plain]- products : \"category_id\" products -[#595959,plain]-^ suppliers : \"supplier_id\" territories -[#595959,plain]-^ region : \"region_id\" @enduml","title":"DEA"},{"location":"7.%20Exercices/SQL/03-northwind/#requetes","text":"Bien s\u00fbr, je vais vous proposer quelques questions simples bas\u00e9es sur le diagramme entit\u00e9-association (DEA) de la base de donn\u00e9es Northwind que vous avez fourni. Ces questions se concentreront sur des requ\u00eates impliquant une seule table, sans jointures ni regroupements, mais avec la possibilit\u00e9 d'utiliser des fonctions d'agr\u00e9gation. Je vais \u00e9galement fournir les r\u00e9ponses sous forme de requ\u00eates SQL pour PostgreSQL.","title":"Requ\u00eates"},{"location":"7.%20Exercices/SQL/03-northwind/#1-listez-tous-les-produits-dont-le-prix-unitaire-est-superieur-a-50","text":"Difficult\u00e9 : 1 Code SELECT product_name, unit_price FROM products WHERE unit_price > 50 ORDER BY unit_price DESC;","title":"1. Listez tous les produits dont le prix unitaire est sup\u00e9rieur \u00e0 50."},{"location":"7.%20Exercices/SQL/03-northwind/#2-combien-y-a-t-il-demployes-au-total-dans-lentreprise","text":"Difficult\u00e9 : 1 Code SELECT COUNT(*) AS total_employees FROM employees;","title":"2. Combien y a-t-il d'employ\u00e9s au total dans l'entreprise ?"},{"location":"7.%20Exercices/SQL/03-northwind/#3-quels-sont-les-5-produits-les-plus-chers","text":"Difficult\u00e9 : 1 Code SELECT product_name, unit_price FROM products ORDER BY unit_price DESC LIMIT 5; Difficult\u00e9 : 3 Code WITH ranked_products AS (SELECT product_name, unit_price, DENSE_RANK() OVER (ORDER BY unit_price DESC) as price_rank FROM products) SELECT product_name, unit_price FROM ranked_products WHERE price_rank <= 5 ORDER BY unit_price DESC, product_name;","title":"3. Quels sont les 5 produits les plus chers ?"},{"location":"7.%20Exercices/SQL/03-northwind/#4-listez-tous-les-clients-bases-en-france","text":"Difficult\u00e9 : 1 Code SELECT company_name, contact_name, city FROM customers WHERE country = 'France';","title":"4. Listez tous les clients bas\u00e9s en France."},{"location":"7.%20Exercices/SQL/03-northwind/#5-quel-est-le-prix-moyen-des-produits","text":"Difficult\u00e9 : 1 Code SELECT AVG(unit_price) AS average_price FROM products;","title":"5. Quel est le prix moyen des produits ?"},{"location":"7.%20Exercices/SQL/03-northwind/#6-listez-tous-les-fournisseurs-qui-ne-sont-pas-bases-aux-etats-unis","text":"Difficult\u00e9 : 1 Code SELECT company_name, country FROM suppliers WHERE country != 'USA';","title":"6. Listez tous les fournisseurs qui ne sont pas bas\u00e9s aux \u00c9tats-Unis."},{"location":"7.%20Exercices/SQL/03-northwind/#7-combien-de-produits-sont-actuellement-en-rupture-de-stock","text":"Difficult\u00e9 : 1 Code SELECT COUNT(*) AS out_of_stock_products FROM products WHERE units_in_stock = 0;","title":"7. Combien de produits sont actuellement en rupture de stock ?"},{"location":"7.%20Exercices/SQL/03-northwind/#8-quels-sont-les-employes-embauches-apres-le-1er-janvier-1993","text":"Difficult\u00e9 : 1 Code SELECT first_name, last_name, hire_date FROM employees WHERE hire_date > '1993-01-01' ORDER BY hire_date;","title":"8. Quels sont les employ\u00e9s embauch\u00e9s apr\u00e8s le 1er janvier 1993 ?"},{"location":"7.%20Exercices/SQL/03-northwind/#9-quel-est-le-produit-le-moins-cher-en-stock","text":"Difficult\u00e9 : 1 Code SELECT product_name, unit_price FROM products WHERE units_in_stock > 0 ORDER BY unit_price ASC LIMIT 1; Difficult\u00e9 : 2 Code SELECT product_name, unit_price FROM products WHERE units_in_stock > 0 AND unit_price = (SELECT MIN(unit_price) FROM products WHERE units_in_stock > 0) ORDER BY product_name;","title":"9. Quel est le produit le moins cher en stock ?"},{"location":"7.%20Exercices/SQL/03-northwind/#10-listez-toutes-les-categories-de-produits-par-ordre-alphabetique","text":"Difficult\u00e9 : 1 Code SELECT category_name FROM categories ORDER BY category_name ASC;","title":"10. Listez toutes les cat\u00e9gories de produits par ordre alphab\u00e9tique."},{"location":"7.%20Exercices/SQL/03-northwind/#11-listez-tous-les-produits-avec-leur-categorie-correspondante","text":"Difficult\u00e9 : 2 Code SELECT p.product_name, c.category_name FROM products p JOIN categories c ON p.category_id = c.category_id ORDER BY c.category_name, p.product_name;","title":"11. Listez tous les produits avec leur cat\u00e9gorie correspondante."},{"location":"7.%20Exercices/SQL/03-northwind/#12-affichez-les-noms-des-employes-et-les-noms-de-leurs-superieurs-directs","text":"Difficult\u00e9 : 2 Code SELECT e.first_name || ' ' || e.last_name AS employee_name, m.first_name || ' ' || m.last_name AS manager_name FROM employees e LEFT JOIN employees m ON e.reports_to = m.employee_id ORDER BY manager_name, employee_name;","title":"12. Affichez les noms des employ\u00e9s et les noms de leurs sup\u00e9rieurs directs."},{"location":"7.%20Exercices/SQL/03-northwind/#13-listez-tous-les-clients-avec-leurs-commandes-y-compris-ceux-qui-nont-pas-encore-passe-de-commande","text":"Difficult\u00e9 : 2 Code SELECT c.company_name, o.order_id, o.order_date FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id ORDER BY c.company_name, o.order_date;","title":"13. Listez tous les clients avec leurs commandes, y compris ceux qui n'ont pas encore pass\u00e9 de commande."},{"location":"7.%20Exercices/SQL/03-northwind/#14-affichez-les-details-des-produits-commandes-dans-la-commande-numero-10248","text":"Difficult\u00e9 : 2 Code SELECT p.product_name, od.quantity, od.unit_price FROM order_details od JOIN products p ON od.product_id = p.product_id WHERE od.order_id = 10248 ORDER BY p.product_name;","title":"14. Affichez les d\u00e9tails des produits command\u00e9s dans la commande num\u00e9ro 10248."},{"location":"7.%20Exercices/SQL/03-northwind/#15-listez-tous-les-employes-avec-leurs-territoires-assignes","text":"Difficult\u00e9 : 2 Code SELECT e.first_name || ' ' || e.last_name AS employee_name, t.territory_description FROM employees e JOIN employee_territories et ON e.employee_id = et.employee_id JOIN territories t ON et.territory_id = t.territory_id ORDER BY employee_name, t.territory_description;","title":"15. Listez tous les employ\u00e9s avec leurs territoires assign\u00e9s."},{"location":"7.%20Exercices/SQL/03-northwind/#16-affichez-les-noms-des-fournisseurs-et-les-noms-des-produits-quils-fournissent-pour-la-categorie-beverages","text":"Difficult\u00e9 : 3 Code SELECT s.company_name AS supplier_name, p.product_name FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id JOIN categories c ON p.category_id = c.category_id WHERE c.category_name = 'Beverages' ORDER BY s.company_name, p.product_name;","title":"16. Affichez les noms des fournisseurs et les noms des produits qu'ils fournissent pour la cat\u00e9gorie 'Beverages'."},{"location":"7.%20Exercices/SQL/03-northwind/#17-listez-toutes-les-commandes-passees-par-le-client-quick-stop-en-1997","text":"Difficult\u00e9 : 2 Code SELECT o.order_id, o.order_date, e.first_name || ' ' || e.last_name AS employee_name FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN employees e ON o.employee_id = e.employee_id WHERE c.company_name = 'QUICK-Stop' AND EXTRACT(YEAR FROM o.order_date) = 1997 ORDER BY o.order_date;","title":"17. Listez toutes les commandes pass\u00e9es par le client 'QUICK-Stop' en 1997."},{"location":"7.%20Exercices/SQL/03-northwind/#18-affichez-les-produits-et-leurs-fournisseurs-pour-tous-les-produits-qui-sont-en-rupture-de-stock","text":"Difficult\u00e9 : 2 Code SELECT p.product_name, s.company_name AS supplier_name, p.units_in_stock FROM products p JOIN suppliers s ON p.supplier_id = s.supplier_id WHERE p.units_in_stock = 0 ORDER BY s.company_name, p.product_name;","title":"18. Affichez les produits et leurs fournisseurs pour tous les produits qui sont en rupture de stock."},{"location":"7.%20Exercices/SQL/03-northwind/#19-listez-tous-les-employes-et-le-nombre-de-territoires-qui-leur-sont-assignes","text":"Difficult\u00e9 : 2 Code SELECT e.first_name || ' ' || e.last_name AS employee_name, COUNT(et.territory_id) AS territory_count FROM employees e LEFT JOIN employee_territories et ON e.employee_id = et.employee_id GROUP BY e.employee_id, employee_name ORDER BY employee_name;","title":"19. Listez tous les employ\u00e9s et le nombre de territoires qui leur sont assign\u00e9s."},{"location":"7.%20Exercices/SQL/03-northwind/#20-affichez-les-details-de-la-commande-la-plus-recente-pour-chaque-client","text":"Difficult\u00e9 : 3 Code WITH latest_orders AS (SELECT customer_id, MAX(order_date) AS max_order_date FROM orders GROUP BY customer_id) SELECT c.company_name, o.order_id, o.order_date FROM customers c JOIN latest_orders lo ON c.customer_id = lo.customer_id JOIN orders o ON lo.customer_id = o.customer_id AND lo.max_order_date = o.order_date ORDER BY c.company_name;","title":"20. Affichez les d\u00e9tails de la commande la plus r\u00e9cente pour chaque client."},{"location":"7.%20Exercices/SQL/03-northwind/#21-calculez-le-nombre-total-de-commandes-par-client","text":"Difficult\u00e9 : 2 Code SELECT c.company_name, COUNT(o.order_id) AS total_orders FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.company_name ORDER BY total_orders DESC;","title":"21. Calculez le nombre total de commandes par client."},{"location":"7.%20Exercices/SQL/03-northwind/#22-trouvez-le-chiffre-daffaires-total-par-categorie-de-produits","text":"Difficult\u00e9 : 3 Code SELECT c.category_name, TRUNC(SUM(od.quantity * od.unit_price * (1 - od.discount))::numeric, 2) AS total_revenue FROM categories c JOIN products p ON c.category_id = p.category_id JOIN order_details od ON p.product_id = od.product_id GROUP BY c.category_id, c.category_name ORDER BY total_revenue DESC;","title":"22. Trouvez le chiffre d'affaires total par cat\u00e9gorie de produits."},{"location":"7.%20Exercices/SQL/03-northwind/#23-listez-les-employes-et-le-nombre-de-commandes-quils-ont-gerees-en-1997","text":"Difficult\u00e9 : 3 Code SELECT e.first_name || ' ' || e.last_name AS employee_name, COUNT(o.order_id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.employee_id = o.employee_id AND EXTRACT(YEAR FROM o.order_date) = 1997 GROUP BY e.employee_id, employee_name ORDER BY orders_handled DESC;","title":"23. Listez les employ\u00e9s et le nombre de commandes qu'ils ont g\u00e9r\u00e9es en 1997."},{"location":"7.%20Exercices/SQL/03-northwind/#24-calculez-le-prix-moyen-des-produits-par-fournisseur","text":"Difficult\u00e9 : 2 Code SELECT s.company_name AS supplier_name, TRUNC(AVG(p.unit_price)::numeric, 2) AS average_price FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id GROUP BY s.supplier_id, s.company_name ORDER BY average_price DESC;","title":"24. Calculez le prix moyen des produits par fournisseur."},{"location":"7.%20Exercices/SQL/03-northwind/#25-trouvez-les-5-produits-les-plus-vendus-en-termes-de-quantite","text":"Difficult\u00e9 : 2 Code SELECT p.product_name, SUM(od.quantity) AS total_quantity_sold FROM products p JOIN order_details od ON p.product_id = od.product_id GROUP BY p.product_id, p.product_name ORDER BY total_quantity_sold DESC LIMIT 5; Difficult\u00e9 : 3 Code WITH product_sales AS (SELECT p.product_id, p.product_name, SUM(od.quantity) AS total_quantity_sold FROM products p JOIN order_details od ON p.product_id = od.product_id GROUP BY p.product_id, p.product_name), ranked_products AS (SELECT product_id, product_name, total_quantity_sold, DENSE_RANK() OVER (ORDER BY total_quantity_sold DESC) AS sales_rank FROM product_sales) SELECT product_id, product_name, total_quantity_sold FROM ranked_products WHERE sales_rank <= 5 ORDER BY total_quantity_sold DESC, product_name;","title":"25. Trouvez les 5 produits les plus vendus en termes de quantit\u00e9."},{"location":"7.%20Exercices/SQL/03-northwind/#26-calculez-le-nombre-moyen-de-jours-entre-la-date-de-commande-et-la-date-dexpedition-pour-chaque-transporteur","text":"Difficult\u00e9 : 3 Code SELECT s.company_name AS shipper_name, ROUND(AVG(o.shipped_date - o.order_date), 2) AS avg_shipping_days FROM shippers s JOIN orders o ON s.shipper_id = o.ship_via WHERE o.shipped_date IS NOT NULL GROUP BY s.shipper_id, s.company_name ORDER BY avg_shipping_days;","title":"26. Calculez le nombre moyen de jours entre la date de commande et la date d'exp\u00e9dition pour chaque transporteur."},{"location":"7.%20Exercices/SQL/03-northwind/#27-identifiez-les-clients-qui-ont-passe-des-commandes-totalisant-plus-de-10000-en-valeur","text":"Difficult\u00e9 : 3 Code SELECT c.company_name, TRUNC(SUM(od.quantity * od.unit_price * (1 - od.discount))::numeric, 2) AS total_order_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_id, c.company_name HAVING SUM(od.quantity * od.unit_price * (1 - od.discount)) > 10000 ORDER BY total_order_value DESC;","title":"27. Identifiez les clients qui ont pass\u00e9 des commandes totalisant plus de 10000 en valeur."},{"location":"7.%20Exercices/SQL/03-northwind/#28-calculez-le-nombre-de-produits-differents-commandes-par-chaque-client","text":"Difficult\u00e9 : 3 Code SELECT c.company_name, COUNT(DISTINCT od.product_id) AS unique_products_ordered FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_id, c.company_name ORDER BY unique_products_ordered DESC;","title":"28. Calculez le nombre de produits diff\u00e9rents command\u00e9s par chaque client."},{"location":"7.%20Exercices/SQL/03-northwind/#29-trouvez-le-chiffre-daffaires-total-par-annee-et-par-mois","text":"Difficult\u00e9 : 3 Code SELECT EXTRACT(YEAR FROM o.order_date) AS year, EXTRACT(MONTH FROM o.order_date) AS month, TRUNC(SUM(od.quantity * od.unit_price * (1 - od.discount))::numeric, 2) AS total_revenue FROM orders o JOIN order_details od ON o.order_id = od.order_id GROUP BY EXTRACT(YEAR FROM o.order_date), EXTRACT(MONTH FROM o.order_date) ORDER BY year, month;","title":"29. Trouvez le chiffre d'affaires total par ann\u00e9e et par mois."},{"location":"7.%20Exercices/SQL/03-northwind/#30-identifiez-les-categories-de-produits-qui-ont-genere-le-plus-de-revenus-par-region","text":"Difficult\u00e9 : 4 Code SELECT c.category_name, r.region_description, TRUNC(SUM(od.quantity * od.unit_price * (1 - od.discount))::numeric, 2) AS total_revenue FROM categories c JOIN products p ON c.category_id = p.category_id JOIN order_details od ON p.product_id = od.product_id JOIN orders o ON od.order_id = o.order_id JOIN customers cu ON o.customer_id = cu.customer_id JOIN employees e ON o.employee_id = e.employee_id JOIN employee_territories et ON e.employee_id = et.employee_id JOIN territories t ON et.territory_id = t.territory_id JOIN region r ON t.region_id = r.region_id GROUP BY c.category_id, c.category_name, r.region_id, r.region_description ORDER BY r.region_description, total_revenue DESC;","title":"30. Identifiez les cat\u00e9gories de produits qui ont g\u00e9n\u00e9r\u00e9 le plus de revenus par r\u00e9gion."},{"location":"7.%20Exercices/SQL/03-northwind/#31-trouvez-les-produits-qui-nont-jamais-ete-commandes","text":"Difficult\u00e9 : 2 Code SELECT p.product_id, p.product_name FROM products p LEFT JOIN order_details od ON p.product_id = od.product_id WHERE od.order_id IS NULL ORDER BY p.product_id;","title":"31. Trouvez les produits qui n'ont jamais \u00e9t\u00e9 command\u00e9s."},{"location":"7.%20Exercices/SQL/03-northwind/#32-calculez-le-rang-des-employes-en-fonction-du-nombre-de-commandes-quils-ont-gerees","text":"Difficult\u00e9 : 3 Code SELECT e.employee_id, e.first_name || ' ' || e.last_name AS employee_name, COUNT(o.order_id) AS order_count, RANK() OVER (ORDER BY COUNT(o.order_id) DESC) AS employee_rank FROM employees e LEFT JOIN orders o ON e.employee_id = o.employee_id GROUP BY e.employee_id, employee_name ORDER BY employee_rank, employee_name;","title":"32. Calculez le rang des employ\u00e9s en fonction du nombre de commandes qu'ils ont g\u00e9r\u00e9es."},{"location":"7.%20Exercices/SQL/03-northwind/#33-identifiez-les-clients-qui-ont-commande-tous-les-produits-dune-categorie-specifique-par-exemple-beverages","text":"Difficult\u00e9 : 4 Code WITH beverage_products AS (SELECT product_id FROM products JOIN categories ON products.category_id = categories.category_id WHERE category_name = 'Beverages') SELECT c.customer_id, c.company_name FROM customers c WHERE NOT EXISTS (SELECT bp.product_id FROM beverage_products bp WHERE NOT EXISTS (SELECT 1 FROM orders o JOIN order_details od ON o.order_id = od.order_id WHERE o.customer_id = c.customer_id AND od.product_id = bp.product_id)) ORDER BY c.company_name;","title":"33. Identifiez les clients qui ont command\u00e9 tous les produits d'une cat\u00e9gorie sp\u00e9cifique (par exemple, 'Beverages')."},{"location":"7.%20Exercices/SQL/03-northwind/#34-calculez-la-moyenne-mobile-sur-3-mois-des-ventes-totales","text":"Difficult\u00e9 : 4 Code WITH monthly_sales AS (SELECT DATE_TRUNC('month', o.order_date) AS sale_month, SUM(od.quantity * od.unit_price * (1 - od.discount)) AS total_sales FROM orders o JOIN order_details od ON o.order_id = od.order_id GROUP BY DATE_TRUNC('month', o.order_date)) SELECT sale_month, total_sales, AVG(total_sales) OVER ( ORDER BY sale_month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW ) AS moving_average FROM monthly_sales ORDER BY sale_month;","title":"34. Calculez la moyenne mobile sur 3 mois des ventes totales."},{"location":"7.%20Exercices/SQL/03-northwind/#35-trouvez-les-paires-de-produits-qui-sont-toujours-commandes-ensemble","text":"Difficult\u00e9 : 5 Code WITH product_pairs AS (SELECT od1.product_id AS product1_id, od2.product_id AS product2_id, COUNT(DISTINCT od1.order_id) AS order_count FROM order_details od1 JOIN order_details od2 ON od1.order_id = od2.order_id AND od1.product_id < od2.product_id GROUP BY od1.product_id, od2.product_id) SELECT p1.product_name AS product1_name, p2.product_name AS product2_name, pp.order_count FROM product_pairs pp JOIN products p1 ON pp.product1_id = p1.product_id JOIN products p2 ON pp.product2_id = p2.product_id WHERE pp.order_count = (SELECT COUNT(DISTINCT order_id) FROM orders) ORDER BY p1.product_name, p2.product_name;","title":"35. Trouvez les paires de produits qui sont toujours command\u00e9s ensemble."},{"location":"7.%20Exercices/SQL/03-northwind/#36-calculez-le-pourcentage-de-contribution-de-chaque-produit-au-chiffre-daffaires-total","text":"Difficult\u00e9 : 4 Code WITH product_sales AS (SELECT p.product_id, p.product_name, SUM(od.quantity * od.unit_price * (1 - od.discount)) AS product_revenue FROM products p JOIN order_details od ON p.product_id = od.product_id GROUP BY p.product_id, p.product_name), total_sales AS (SELECT SUM(product_revenue) AS total_revenue FROM product_sales) SELECT ps.product_name, ps.product_revenue, ROUND((ps.product_revenue / ts.total_revenue * 100)::numeric, 2) AS revenue_percentage FROM product_sales ps CROSS JOIN total_sales ts ORDER BY revenue_percentage DESC;","title":"36. Calculez le pourcentage de contribution de chaque produit au chiffre d'affaires total."},{"location":"7.%20Exercices/SQL/03-northwind/#37-identifiez-les-clients-qui-ont-augmente-leurs-achats-dune-annee-a-lautre","text":"Difficult\u00e9 : 4 Code WITH yearly_customer_purchases AS (SELECT c.customer_id, c.company_name, EXTRACT(YEAR FROM o.order_date) AS order_year, SUM(od.quantity * od.unit_price * (1 - od.discount)) AS total_purchase FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_id, c.company_name, EXTRACT(YEAR FROM o.order_date)) SELECT ycp1.customer_id, ycp1.company_name, ycp1.order_year AS year1, ycp1.total_purchase AS purchase_year1, ycp2.order_year AS year2, ycp2.total_purchase AS purchase_year2, TRUNC(((ycp2.total_purchase - ycp1.total_purchase) / ycp1.total_purchase * 100)::numeric, 2) AS growth_percentage FROM yearly_customer_purchases ycp1 JOIN yearly_customer_purchases ycp2 ON ycp1.customer_id = ycp2.customer_id AND ycp2.order_year = ycp1.order_year + 1 WHERE ycp2.total_purchase > ycp1.total_purchase ORDER BY growth_percentage DESC;","title":"37. Identifiez les clients qui ont augment\u00e9 leurs achats d'une ann\u00e9e \u00e0 l'autre."},{"location":"7.%20Exercices/SQL/03-northwind/#38-trouvez-la-sequence-la-plus-longue-de-jours-consecutifs-avec-des-commandes","text":"Difficult\u00e9 : 4 Code WITH date_diff AS (SELECT order_date, order_date - LAG(order_date) OVER (ORDER BY order_date) AS diff FROM orders), sequences AS (SELECT order_date, SUM(CASE WHEN diff = 1 THEN 0 ELSE 1 END) OVER (ORDER BY order_date) AS seq FROM date_diff) SELECT MIN(order_date) AS start_date, MAX(order_date) AS end_date, COUNT(*) AS consecutive_days FROM sequences GROUP BY seq ORDER BY consecutive_days DESC LIMIT 1; Difficult\u00e9 : 5 Code WITH date_diff AS (SELECT order_date, order_date - LAG(order_date) OVER (ORDER BY order_date) AS diff FROM orders), sequences AS (SELECT order_date, SUM(CASE WHEN diff = 1 THEN 0 ELSE 1 END) OVER (ORDER BY order_date) AS seq FROM date_diff), sequence_lengths AS (SELECT seq, MIN(order_date) AS start_date, MAX(order_date) AS end_date, COUNT(*) AS consecutive_days FROM sequences GROUP BY seq), max_length AS (SELECT MAX(consecutive_days) AS max_consecutive_days FROM sequence_lengths) SELECT sl.start_date, sl.end_date, sl.consecutive_days FROM sequence_lengths sl JOIN max_length ml ON sl.consecutive_days = ml.max_consecutive_days ORDER BY sl.start_date;","title":"38. Trouvez la s\u00e9quence la plus longue de jours cons\u00e9cutifs avec des commandes."},{"location":"7.%20Exercices/SQL/03-northwind/#39-calculez-le-temps-moyen-entre-les-commandes-pour-chaque-client","text":"Difficult\u00e9 : 4 Code WITH customer_order_dates AS (SELECT customer_id, order_date, LAG(order_date) OVER (PARTITION BY customer_id ORDER BY order_date) AS prev_order_date FROM orders) SELECT c.customer_id, c.company_name, ROUND(AVG(cod.order_date - cod.prev_order_date)::numeric, 2) AS avg_days_between_orders FROM customers c JOIN customer_order_dates cod ON c.customer_id = cod.customer_id WHERE cod.prev_order_date IS NOT NULL GROUP BY c.customer_id, c.company_name ORDER BY avg_days_between_orders;","title":"39. Calculez le temps moyen entre les commandes pour chaque client."},{"location":"7.%20Exercices/SQL/03-northwind/#40-identifiez-les-produits-dont-les-ventes-ont-augmente-chaque-mois-sur-une-periode-dau-moins-3-mois-consecutifs","text":"Difficult\u00e9 : 5 Code WITH monthly_product_sales AS (SELECT p.product_id, p.product_name, DATE_TRUNC('month', o.order_date) AS sale_month, SUM(od.quantity * od.unit_price * (1 - od.discount)) AS monthly_sales FROM products p JOIN order_details od ON p.product_id = od.product_id JOIN orders o ON od.order_id = o.order_id GROUP BY p.product_id, p.product_name, DATE_TRUNC('month', o.order_date)), sales_growth AS (SELECT product_id, product_name, sale_month, monthly_sales, LAG(monthly_sales) OVER (PARTITION BY product_id ORDER BY sale_month) AS prev_month_sales, CASE WHEN monthly_sales > LAG(monthly_sales) OVER (PARTITION BY product_id ORDER BY sale_month) THEN 1 ELSE 0 END AS is_increase FROM monthly_product_sales), consecutive_increases AS (SELECT product_id, product_name, sale_month, monthly_sales, SUM(CASE WHEN is_increase = 0 THEN 1 ELSE 0 END) OVER (PARTITION BY product_id ORDER BY sale_month) AS grp FROM sales_growth WHERE is_increase = 1) SELECT DISTINCT product_id, product_name FROM (SELECT product_id, product_name, grp, COUNT(*) OVER (PARTITION BY product_id, grp) AS consecutive_count FROM consecutive_increases) subq WHERE consecutive_count >= 3 ORDER BY product_id;","title":"40. Identifiez les produits dont les ventes ont augment\u00e9 chaque mois sur une p\u00e9riode d'au moins 3 mois cons\u00e9cutifs."}]}